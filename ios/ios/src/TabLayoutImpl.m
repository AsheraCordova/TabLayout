//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSTabLayoutPlugin\src\main\java\com\ashera\tablayout\TabLayoutImpl.java
//

#include "AbstractEnumToIntConverter.h"
#include "BadgeDrawable.h"
#include "BaseHasWidgets.h"
#include "Color.h"
#include "ColorStateList.h"
#include "Context.h"
#include "ConverterFactory.h"
#include "Drawable.h"
#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "EventExpressionParser.h"
#include "FrameLayout.h"
#include "HasWidgets.h"
#include "IActivity.h"
#include "IAttributable.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IListener.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IViewStub.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "IdGenerator.h"
#include "J2ObjC_source.h"
#include "LayoutTransition.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "Rect.h"
#include "Resources.h"
#include "TabItemImpl.h"
#include "TabLayout.h"
#include "TabLayoutImpl.h"
#include "View.h"
#include "ViewCompat.h"
#include "ViewGroup.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "ViewPager.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/Runnable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"
#include "HasLifeCycleDecorators.h"

#include "ASUIScrollView.h"

@protocol JavaUtilList;
@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASTabLayoutImpl () {
 @public
  id uiView_;
  ADMTabLayout *tabLayout_;
  jint tabTextColor_;
  jint tabSelectedTextColor_;
  id<JavaUtilList> badgeMenuItemIds_;
  ASTabLayoutImpl_TabLayoutCommandBuilder *builder_;
  ASTabLayoutImpl_TabLayoutBean *bean_;
  ASTabLayoutImpl_TabLayoutCommandParamsBuilder *paramsBuilder_;
  ASTabLayoutImpl_TabLayoutParamsBean *paramsBean_;
}

- (void)setWidgetOnNativeClass;

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget;

- (void)createLayoutParamsWithADView:(ADView *)view;

- (ADFrameLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view;

- (void)updateTabTextsWithId:(id)objValue;

- (void)addTabWithId:(id)tabItemText
              withId:(id)tabItemIcon
              withId:(id)tabItemId
              withId:(id)tabItemLayout
              withId:(id)tabItemCustomTabTitleId
              withId:(id)tabItemCustomTabIconId
              withId:(id)where;

- (void)setTabTextColorWithId:(id)objValue;

- (void)setTabSelectedTextColorWithId:(id)objValue;

- (void)setTabTextAppearanceWithId:(id)objValue;

- (void)setPaddingWithId:(id)objValue;

- (void)setContentStartWithId:(id)objValue;

- (void)setTabContentInsetStartWithId:(id)objValue;

- (void)setPaddingBottomWithId:(id)objValue;

- (void)setPaddingEndWithId:(id)objValue;

- (void)setPaddingTopWithId:(id)objValue;

- (void)setPaddingStartWithId:(id)objValue;

- (void)setMinWidthWithId:(id)objValue;

- (void)setMaxWidthWithId:(id)objValue;

- (void)selectTabWithId:(id)objValue;

- (ADMTabLayout_Tab *)findTabByIdWithInt:(jint)id_;

- (void)setupWithViewPagerWithNSString:(NSString *)strValue;

- (void)setBackgroundDrawableWithId:(id)objValue;

- (void)removeTabByIdWithInt:(jint)id_;

- (void)removeTabByAtWithInt:(jint)pos;

- (void)setScrollXWithId:(id)objValue;

- (void)setScrollYWithId:(id)objValue;

- (void)setBadgeBackgroundColorsWithId:(id)objValue;

- (void)setValueOnBadgeDrawableWithId:(id)objValue
      withASTabLayoutImpl_ValueSetter:(id<ASTabLayoutImpl_ValueSetter>)valueSetter;

- (void)setBadgeMenuItemIdsWithId:(id)objValue;

- (void)setBadgeNumbersWithId:(id)objValue;

- (void)setBadgeVerticalOffsetsWithId:(id)objValue;

- (void)setBadgeHorizontalOffsetsWithId:(id)objValue;

- (void)setBadgeGravitiesWithId:(id)objValue;

- (void)setBadgeMaxCharacterCountsWithId:(id)objValue;

- (void)setBadgeAlphasWithId:(id)objValue;

- (void)setBadgeTextColorsWithId:(id)objValue;

- (void)setBadgeIsVisiblesWithId:(id)objValue;

- (void)setTextAppearanceResourcesWithId:(id)objValue;

- (void)applyTabContentInsetStartWithId:(id)objValue;

- (void)applyTabBackgroundWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab
                                        withId:(id)objValue;

- (void)applyRequestedTabMinWidthWithId:(id)objValue;

- (void)applyRequestedTabMaxWidthWithId:(id)objValue;

- (jint)getTabPaddingBottom;

- (jint)getTabPaddingEnd;

- (jint)getTabPaddingTop;

- (jint)getTabPaddingStart;

- (void)applyTabPaddingBottomWithId:(id)objValue;

- (void)applyTabPaddingEndWithId:(id)objValue;

- (void)applyTabPaddingTopWithId:(id)objValue;

- (void)applyTabPaddingStartWithId:(id)objValue;

- (void)applyModeAndGravity;

- (void)updateAllTabs;

- (void)applyTextAppearanceWithId:(id)objValue;

- (id<ASIWidget>)loadLazyWidgetsWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab
                                       withASIWidget:(id<ASIWidget>)layout;

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params;

- (void)initThumbHeight OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(ASTabLayoutImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASTabLayoutImpl, tabLayout_, ADMTabLayout *)
J2OBJC_FIELD_SETTER(ASTabLayoutImpl, badgeMenuItemIds_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASTabLayoutImpl, builder_, ASTabLayoutImpl_TabLayoutCommandBuilder *)
J2OBJC_FIELD_SETTER(ASTabLayoutImpl, bean_, ASTabLayoutImpl_TabLayoutBean *)
J2OBJC_FIELD_SETTER(ASTabLayoutImpl, paramsBuilder_, ASTabLayoutImpl_TabLayoutCommandParamsBuilder *)
J2OBJC_FIELD_SETTER(ASTabLayoutImpl, paramsBean_, ASTabLayoutImpl_TabLayoutParamsBean *)

__attribute__((unused)) static void ASTabLayoutImpl_setWidgetOnNativeClass(ASTabLayoutImpl *self);

__attribute__((unused)) static void ASTabLayoutImpl_nativeRemoveViewWithASIWidget_(ASTabLayoutImpl *self, id<ASIWidget> widget);

__attribute__((unused)) static void ASTabLayoutImpl_createLayoutParamsWithADView_(ASTabLayoutImpl *self, ADView *view);

__attribute__((unused)) static ADFrameLayout_LayoutParams *ASTabLayoutImpl_getLayoutParamsWithADView_(ASTabLayoutImpl *self, ADView *view);

__attribute__((unused)) static void ASTabLayoutImpl_updateTabTextsWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_addTabWithId_withId_withId_withId_withId_withId_withId_(ASTabLayoutImpl *self, id tabItemText, id tabItemIcon, id tabItemId, id tabItemLayout, id tabItemCustomTabTitleId, id tabItemCustomTabIconId, id where);

__attribute__((unused)) static void ASTabLayoutImpl_setTabTextColorWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_setTabSelectedTextColorWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_setTabTextAppearanceWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_setPaddingWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_setContentStartWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_setTabContentInsetStartWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_setPaddingBottomWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_setPaddingEndWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_setPaddingTopWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_setPaddingStartWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_setMinWidthWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_setMaxWidthWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_selectTabWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static ADMTabLayout_Tab *ASTabLayoutImpl_findTabByIdWithInt_(ASTabLayoutImpl *self, jint id_);

__attribute__((unused)) static void ASTabLayoutImpl_setupWithViewPagerWithNSString_(ASTabLayoutImpl *self, NSString *strValue);

__attribute__((unused)) static void ASTabLayoutImpl_setBackgroundDrawableWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_removeTabByIdWithInt_(ASTabLayoutImpl *self, jint id_);

__attribute__((unused)) static void ASTabLayoutImpl_removeTabByAtWithInt_(ASTabLayoutImpl *self, jint pos);

__attribute__((unused)) static void ASTabLayoutImpl_setScrollXWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_setScrollYWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_setBadgeBackgroundColorsWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_setValueOnBadgeDrawableWithId_withASTabLayoutImpl_ValueSetter_(ASTabLayoutImpl *self, id objValue, id<ASTabLayoutImpl_ValueSetter> valueSetter);

__attribute__((unused)) static void ASTabLayoutImpl_setBadgeMenuItemIdsWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_setBadgeNumbersWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_setBadgeVerticalOffsetsWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_setBadgeHorizontalOffsetsWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_setBadgeGravitiesWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_setBadgeMaxCharacterCountsWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_setBadgeAlphasWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_setBadgeTextColorsWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_setBadgeIsVisiblesWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_setTextAppearanceResourcesWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_applyTabContentInsetStartWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_applyTabBackgroundWithADMTabLayout_Tab_withId_(ASTabLayoutImpl *self, ADMTabLayout_Tab *tab, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_applyRequestedTabMinWidthWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_applyRequestedTabMaxWidthWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static jint ASTabLayoutImpl_getTabPaddingBottom(ASTabLayoutImpl *self);

__attribute__((unused)) static jint ASTabLayoutImpl_getTabPaddingEnd(ASTabLayoutImpl *self);

__attribute__((unused)) static jint ASTabLayoutImpl_getTabPaddingTop(ASTabLayoutImpl *self);

__attribute__((unused)) static jint ASTabLayoutImpl_getTabPaddingStart(ASTabLayoutImpl *self);

__attribute__((unused)) static void ASTabLayoutImpl_applyTabPaddingBottomWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_applyTabPaddingEndWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_applyTabPaddingTopWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_applyTabPaddingStartWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTabLayoutImpl_applyModeAndGravity(ASTabLayoutImpl *self);

__attribute__((unused)) static void ASTabLayoutImpl_updateAllTabs(ASTabLayoutImpl *self);

__attribute__((unused)) static void ASTabLayoutImpl_applyTextAppearanceWithId_(ASTabLayoutImpl *self, id objValue);

__attribute__((unused)) static id<ASIWidget> ASTabLayoutImpl_loadLazyWidgetsWithADMTabLayout_Tab_withASIWidget_(ASTabLayoutImpl *self, ADMTabLayout_Tab *tab, id<ASIWidget> layout);

__attribute__((unused)) static void ASTabLayoutImpl_nativeCreateWithJavaUtilMap_(ASTabLayoutImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static void ASTabLayoutImpl_initThumbHeight(ASTabLayoutImpl *self);

@interface ASTabLayoutImpl_TabGravity () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASTabLayoutImpl_TabGravity, mapping_, id<JavaUtilMap>)

@interface ASTabLayoutImpl_TabIndicatorAnimationMode () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASTabLayoutImpl_TabIndicatorAnimationMode, mapping_, id<JavaUtilMap>)

@interface ASTabLayoutImpl_TabIndicatorGravity () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASTabLayoutImpl_TabIndicatorGravity, mapping_, id<JavaUtilMap>)

@interface ASTabLayoutImpl_TabMode () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASTabLayoutImpl_TabMode, mapping_, id<JavaUtilMap>)

@interface ASTabLayoutImpl_TabLayoutExt () {
 @public
  __unsafe_unretained ASTabLayoutImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  id<JavaUtilList> overlays_;
  jint mMaxWidth_;
  jint mMaxHeight_;
  id<JavaUtilMap> templates_;
}

@end

J2OBJC_FIELD_SETTER(ASTabLayoutImpl_TabLayoutExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASTabLayoutImpl_TabLayoutExt, onLayoutEvent_, ASOnLayoutEvent *)
J2OBJC_FIELD_SETTER(ASTabLayoutImpl_TabLayoutExt, overlays_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASTabLayoutImpl_TabLayoutExt, templates_, id<JavaUtilMap>)

@interface ASTabLayoutImpl_ValueSetter : NSObject

@end

@interface ASTabLayoutImpl_OnTabSelectedListener : NSObject < ADMTabLayout_OnTabSelectedListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onTabSelectedWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab;

- (id<JavaUtilMap>)getOnTabSelectedEventObjWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab;

- (void)onTabUnselectedWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab;

- (id<JavaUtilMap>)getOnTabUnselectedEventObjWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab;

- (void)onTabReselectedWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab;

- (id<JavaUtilMap>)getOnTabReselectedEventObjWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab;

@end

J2OBJC_EMPTY_STATIC_INIT(ASTabLayoutImpl_OnTabSelectedListener)

J2OBJC_FIELD_SETTER(ASTabLayoutImpl_OnTabSelectedListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASTabLayoutImpl_OnTabSelectedListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASTabLayoutImpl_OnTabSelectedListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASTabLayoutImpl_OnTabSelectedListener, action_, NSString *)

__attribute__((unused)) static void ASTabLayoutImpl_OnTabSelectedListener_initWithASIWidget_withNSString_(ASTabLayoutImpl_OnTabSelectedListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASTabLayoutImpl_OnTabSelectedListener *new_ASTabLayoutImpl_OnTabSelectedListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTabLayoutImpl_OnTabSelectedListener *create_ASTabLayoutImpl_OnTabSelectedListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASTabLayoutImpl_OnTabSelectedListener_initWithASIWidget_withNSString_withNSString_(ASTabLayoutImpl_OnTabSelectedListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASTabLayoutImpl_OnTabSelectedListener *new_ASTabLayoutImpl_OnTabSelectedListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTabLayoutImpl_OnTabSelectedListener *create_ASTabLayoutImpl_OnTabSelectedListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASTabLayoutImpl_OnTabSelectedListener)

@interface ASTabLayoutImpl_TabLayoutCommandBuilder () {
 @public
  ASTabLayoutImpl *this$0_;
}

@end

@interface ASTabLayoutImpl_TabLayoutBean () {
 @public
  ASTabLayoutImpl *this$0_;
}

@end

@interface ASTabLayoutImpl_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  id<ASIWidget> val$widget_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASTabLayoutImpl_$Lambda$1)

__attribute__((unused)) static void ASTabLayoutImpl_$Lambda$1_initWithASIWidget_(ASTabLayoutImpl_$Lambda$1 *self, id<ASIWidget> capture$0);

__attribute__((unused)) static ASTabLayoutImpl_$Lambda$1 *new_ASTabLayoutImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTabLayoutImpl_$Lambda$1 *create_ASTabLayoutImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0);

@interface ASTabLayoutImpl_$Lambda$2 : NSObject < ASTabLayoutImpl_ValueSetter >

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value;

@end

J2OBJC_STATIC_INIT(ASTabLayoutImpl_$Lambda$2)

inline ASTabLayoutImpl_$Lambda$2 *ASTabLayoutImpl_$Lambda$2_get_instance(void);
static ASTabLayoutImpl_$Lambda$2 *ASTabLayoutImpl_$Lambda$2_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASTabLayoutImpl_$Lambda$2, instance, ASTabLayoutImpl_$Lambda$2 *)

__attribute__((unused)) static void ASTabLayoutImpl_$Lambda$2_init(ASTabLayoutImpl_$Lambda$2 *self);

__attribute__((unused)) static ASTabLayoutImpl_$Lambda$2 *new_ASTabLayoutImpl_$Lambda$2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTabLayoutImpl_$Lambda$2 *create_ASTabLayoutImpl_$Lambda$2_init(void);

@interface ASTabLayoutImpl_$Lambda$3 : NSObject < ASTabLayoutImpl_ValueSetter >

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value;

@end

J2OBJC_STATIC_INIT(ASTabLayoutImpl_$Lambda$3)

inline ASTabLayoutImpl_$Lambda$3 *ASTabLayoutImpl_$Lambda$3_get_instance(void);
static ASTabLayoutImpl_$Lambda$3 *ASTabLayoutImpl_$Lambda$3_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASTabLayoutImpl_$Lambda$3, instance, ASTabLayoutImpl_$Lambda$3 *)

__attribute__((unused)) static void ASTabLayoutImpl_$Lambda$3_init(ASTabLayoutImpl_$Lambda$3 *self);

__attribute__((unused)) static ASTabLayoutImpl_$Lambda$3 *new_ASTabLayoutImpl_$Lambda$3_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTabLayoutImpl_$Lambda$3 *create_ASTabLayoutImpl_$Lambda$3_init(void);

@interface ASTabLayoutImpl_$Lambda$4 : NSObject < ASTabLayoutImpl_ValueSetter >

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value;

@end

J2OBJC_STATIC_INIT(ASTabLayoutImpl_$Lambda$4)

inline ASTabLayoutImpl_$Lambda$4 *ASTabLayoutImpl_$Lambda$4_get_instance(void);
static ASTabLayoutImpl_$Lambda$4 *ASTabLayoutImpl_$Lambda$4_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASTabLayoutImpl_$Lambda$4, instance, ASTabLayoutImpl_$Lambda$4 *)

__attribute__((unused)) static void ASTabLayoutImpl_$Lambda$4_init(ASTabLayoutImpl_$Lambda$4 *self);

__attribute__((unused)) static ASTabLayoutImpl_$Lambda$4 *new_ASTabLayoutImpl_$Lambda$4_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTabLayoutImpl_$Lambda$4 *create_ASTabLayoutImpl_$Lambda$4_init(void);

@interface ASTabLayoutImpl_$Lambda$5 : NSObject < ASTabLayoutImpl_ValueSetter >

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value;

@end

J2OBJC_STATIC_INIT(ASTabLayoutImpl_$Lambda$5)

inline ASTabLayoutImpl_$Lambda$5 *ASTabLayoutImpl_$Lambda$5_get_instance(void);
static ASTabLayoutImpl_$Lambda$5 *ASTabLayoutImpl_$Lambda$5_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASTabLayoutImpl_$Lambda$5, instance, ASTabLayoutImpl_$Lambda$5 *)

__attribute__((unused)) static void ASTabLayoutImpl_$Lambda$5_init(ASTabLayoutImpl_$Lambda$5 *self);

__attribute__((unused)) static ASTabLayoutImpl_$Lambda$5 *new_ASTabLayoutImpl_$Lambda$5_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTabLayoutImpl_$Lambda$5 *create_ASTabLayoutImpl_$Lambda$5_init(void);

@interface ASTabLayoutImpl_$Lambda$6 : NSObject < ASTabLayoutImpl_ValueSetter >

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value;

@end

J2OBJC_STATIC_INIT(ASTabLayoutImpl_$Lambda$6)

inline ASTabLayoutImpl_$Lambda$6 *ASTabLayoutImpl_$Lambda$6_get_instance(void);
static ASTabLayoutImpl_$Lambda$6 *ASTabLayoutImpl_$Lambda$6_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASTabLayoutImpl_$Lambda$6, instance, ASTabLayoutImpl_$Lambda$6 *)

__attribute__((unused)) static void ASTabLayoutImpl_$Lambda$6_init(ASTabLayoutImpl_$Lambda$6 *self);

__attribute__((unused)) static ASTabLayoutImpl_$Lambda$6 *new_ASTabLayoutImpl_$Lambda$6_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTabLayoutImpl_$Lambda$6 *create_ASTabLayoutImpl_$Lambda$6_init(void);

@interface ASTabLayoutImpl_$Lambda$7 : NSObject < ASTabLayoutImpl_ValueSetter >

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value;

@end

J2OBJC_STATIC_INIT(ASTabLayoutImpl_$Lambda$7)

inline ASTabLayoutImpl_$Lambda$7 *ASTabLayoutImpl_$Lambda$7_get_instance(void);
static ASTabLayoutImpl_$Lambda$7 *ASTabLayoutImpl_$Lambda$7_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASTabLayoutImpl_$Lambda$7, instance, ASTabLayoutImpl_$Lambda$7 *)

__attribute__((unused)) static void ASTabLayoutImpl_$Lambda$7_init(ASTabLayoutImpl_$Lambda$7 *self);

__attribute__((unused)) static ASTabLayoutImpl_$Lambda$7 *new_ASTabLayoutImpl_$Lambda$7_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTabLayoutImpl_$Lambda$7 *create_ASTabLayoutImpl_$Lambda$7_init(void);

@interface ASTabLayoutImpl_$Lambda$8 : NSObject < ASTabLayoutImpl_ValueSetter >

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value;

@end

J2OBJC_STATIC_INIT(ASTabLayoutImpl_$Lambda$8)

inline ASTabLayoutImpl_$Lambda$8 *ASTabLayoutImpl_$Lambda$8_get_instance(void);
static ASTabLayoutImpl_$Lambda$8 *ASTabLayoutImpl_$Lambda$8_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASTabLayoutImpl_$Lambda$8, instance, ASTabLayoutImpl_$Lambda$8 *)

__attribute__((unused)) static void ASTabLayoutImpl_$Lambda$8_init(ASTabLayoutImpl_$Lambda$8 *self);

__attribute__((unused)) static ASTabLayoutImpl_$Lambda$8 *new_ASTabLayoutImpl_$Lambda$8_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTabLayoutImpl_$Lambda$8 *create_ASTabLayoutImpl_$Lambda$8_init(void);

@interface ASTabLayoutImpl_$Lambda$9 : NSObject < ASTabLayoutImpl_ValueSetter >

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value;

@end

J2OBJC_STATIC_INIT(ASTabLayoutImpl_$Lambda$9)

inline ASTabLayoutImpl_$Lambda$9 *ASTabLayoutImpl_$Lambda$9_get_instance(void);
static ASTabLayoutImpl_$Lambda$9 *ASTabLayoutImpl_$Lambda$9_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASTabLayoutImpl_$Lambda$9, instance, ASTabLayoutImpl_$Lambda$9 *)

__attribute__((unused)) static void ASTabLayoutImpl_$Lambda$9_init(ASTabLayoutImpl_$Lambda$9 *self);

__attribute__((unused)) static ASTabLayoutImpl_$Lambda$9 *new_ASTabLayoutImpl_$Lambda$9_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTabLayoutImpl_$Lambda$9 *create_ASTabLayoutImpl_$Lambda$9_init(void);

@interface ASTabLayoutImpl_$Lambda$10 : NSObject < ASTabLayoutImpl_ValueSetter >

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value;

@end

J2OBJC_STATIC_INIT(ASTabLayoutImpl_$Lambda$10)

inline ASTabLayoutImpl_$Lambda$10 *ASTabLayoutImpl_$Lambda$10_get_instance(void);
static ASTabLayoutImpl_$Lambda$10 *ASTabLayoutImpl_$Lambda$10_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASTabLayoutImpl_$Lambda$10, instance, ASTabLayoutImpl_$Lambda$10 *)

__attribute__((unused)) static void ASTabLayoutImpl_$Lambda$10_init(ASTabLayoutImpl_$Lambda$10 *self);

__attribute__((unused)) static ASTabLayoutImpl_$Lambda$10 *new_ASTabLayoutImpl_$Lambda$10_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTabLayoutImpl_$Lambda$10 *create_ASTabLayoutImpl_$Lambda$10_init(void);

@interface ASTabLayoutImpl_$Lambda$11 : NSObject < ASTabLayoutImpl_ValueSetter >

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value;

@end

J2OBJC_STATIC_INIT(ASTabLayoutImpl_$Lambda$11)

inline ASTabLayoutImpl_$Lambda$11 *ASTabLayoutImpl_$Lambda$11_get_instance(void);
static ASTabLayoutImpl_$Lambda$11 *ASTabLayoutImpl_$Lambda$11_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASTabLayoutImpl_$Lambda$11, instance, ASTabLayoutImpl_$Lambda$11 *)

__attribute__((unused)) static void ASTabLayoutImpl_$Lambda$11_init(ASTabLayoutImpl_$Lambda$11 *self);

__attribute__((unused)) static ASTabLayoutImpl_$Lambda$11 *new_ASTabLayoutImpl_$Lambda$11_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTabLayoutImpl_$Lambda$11 *create_ASTabLayoutImpl_$Lambda$11_init(void);

NSString *ASTabLayoutImpl_LOCAL_NAME = @"com.google.android.material.tabs.TabLayout";
NSString *ASTabLayoutImpl_GROUP_NAME = @"com.google.android.material.tabs.TabLayout";

@implementation ASTabLayoutImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)localName {
  ASViewGroupImpl_register__WithNSString_(localName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"tabBackground"])) withTypeWithNSString:@"drawable"])) withBufferStrategyWithInt:ASIWidget_BUFFER_STRATEGY_DURING_INIT])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"tabContentStart"])) withTypeWithNSString:@"dimension"])) withOrderWithInt:-1])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"com.google.android.material.tabs.TabLayout.tabGravity", new_ASTabLayoutImpl_TabGravity_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"tabGravity"])) withTypeWithNSString:@"com.google.android.material.tabs.TabLayout.tabGravity"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"com.google.android.material.tabs.TabLayout.tabIndicatorAnimationMode", new_ASTabLayoutImpl_TabIndicatorAnimationMode_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"tabIndicatorAnimationMode"])) withTypeWithNSString:@"com.google.android.material.tabs.TabLayout.tabIndicatorAnimationMode"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"tabIndicatorFullWidth"])) withTypeWithNSString:@"boolean"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"com.google.android.material.tabs.TabLayout.tabIndicatorGravity", new_ASTabLayoutImpl_TabIndicatorGravity_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"tabIndicatorGravity"])) withTypeWithNSString:@"com.google.android.material.tabs.TabLayout.tabIndicatorGravity"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"tabIndicatorHeight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"tabInlineLabel"])) withTypeWithNSString:@"boolean"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"tabMaxWidth"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"tabMinWidth"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"com.google.android.material.tabs.TabLayout.tabMode", new_ASTabLayoutImpl_TabMode_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"tabMode"])) withTypeWithNSString:@"com.google.android.material.tabs.TabLayout.tabMode"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"tabPadding"])) withTypeWithNSString:@"dimension"])) withOrderWithInt:-1])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"tabPaddingBottom"])) withTypeWithNSString:@"dimension"])) withOrderWithInt:-1])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"tabPaddingEnd"])) withTypeWithNSString:@"dimension"])) withOrderWithInt:-1])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"tabPaddingStart"])) withTypeWithNSString:@"dimension"])) withOrderWithInt:-1])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"tabPaddingTop"])) withTypeWithNSString:@"dimension"])) withOrderWithInt:-1])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"removeTab"])) withTypeWithNSString:@"id"])) withBufferStrategyWithInt:ASIWidget_BUFFER_STRATEGY_DURING_INIT])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"removeTabAt"])) withTypeWithNSString:@"int"])) withBufferStrategyWithInt:ASIWidget_BUFFER_STRATEGY_DURING_INIT])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"removeAllTabs"])) withTypeWithNSString:@"nil"])) withBufferStrategyWithInt:ASIWidget_BUFFER_STRATEGY_DURING_INIT])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onTabSelected"])) withTypeWithNSString:@"string"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onTabUnselected"])) withTypeWithNSString:@"string"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onTabReselected"])) withTypeWithNSString:@"string"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"addTab"])) withTypeWithNSString:@"object"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"tabIconTint"])) withTypeWithNSString:@"colorstate"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"selectTab"])) withTypeWithNSString:@"int"])) withBufferStrategyWithInt:ASIWidget_BUFFER_STRATEGY_DURING_INIT])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"updateTabTexts"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"resourcestring"])) withBufferStrategyWithInt:ASIWidget_BUFFER_STRATEGY_DURING_INIT])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"setupWithViewPager"])) withTypeWithNSString:@"id"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"tabIndicatorColor"])) withTypeWithNSString:@"colorint"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"tabSelectedTextColor"])) withTypeWithNSString:@"colorint"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"tabTextColor"])) withTypeWithNSString:@"colorint"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"tabTextAppearance"])) withTypeWithNSString:@"string"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"badgeNumbers"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"int"])) withOrderWithInt:10])) withBufferStrategyWithInt:ASIWidget_BUFFER_STRATEGY_DURING_INIT])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"badgeAlphas"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"int"])) withOrderWithInt:10])) withBufferStrategyWithInt:ASIWidget_BUFFER_STRATEGY_DURING_INIT])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"badgeMaxCharacterCounts"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"int"])) withOrderWithInt:10])) withBufferStrategyWithInt:ASIWidget_BUFFER_STRATEGY_DURING_INIT])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"badgeGravities"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"gravity"])) withOrderWithInt:10])) withBufferStrategyWithInt:ASIWidget_BUFFER_STRATEGY_DURING_INIT])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"badgeHorizontalOffsets"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"dimension"])) withOrderWithInt:10])) withBufferStrategyWithInt:ASIWidget_BUFFER_STRATEGY_DURING_INIT])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"badgeVerticalOffsets"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"dimension"])) withOrderWithInt:10])) withBufferStrategyWithInt:ASIWidget_BUFFER_STRATEGY_DURING_INIT])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"badgeIsVisibles"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"boolean"])) withOrderWithInt:10])) withBufferStrategyWithInt:ASIWidget_BUFFER_STRATEGY_DURING_INIT])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"badgeBackgroundColors"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"colorint"])) withOrderWithInt:10])) withBufferStrategyWithInt:ASIWidget_BUFFER_STRATEGY_DURING_INIT])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"badgeTextColors"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"colorint"])) withOrderWithInt:10])) withBufferStrategyWithInt:ASIWidget_BUFFER_STRATEGY_DURING_INIT])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"badgeTextAppearanceResources"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"string"])) withOrderWithInt:10])) withBufferStrategyWithInt:ASIWidget_BUFFER_STRATEGY_DURING_INIT])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"menuItemIds"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"id"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"scrollX"])) withTypeWithNSString:@"dimension"])) withBufferStrategyWithInt:ASIWidget_BUFFER_STRATEGY_DURING_INIT]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASTabLayoutImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASTabLayoutImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASTabLayoutImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (id<ASIWidget>)newInstance {
  return new_ASTabLayoutImpl_initWithNSString_withNSString_(groupName_, localName_);
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  tabLayout_ = new_ASTabLayoutImpl_TabLayoutExt_initWithASTabLayoutImpl_(self);
  ASTabLayoutImpl_nativeCreateWithJavaUtilMap_(self, params);
  ASViewGroupImpl_registerCommandConveterWithASIWidget_(self);
  ASTabLayoutImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASTabLayoutImpl_setWidgetOnNativeClass(self);
}

- (id)asWidget {
  return tabLayout_;
}

- (jboolean)removeWithASIWidget:(id<ASIWidget>)w {
  jboolean remove = [super removeWithASIWidget:w];
  [((ADMTabLayout *) nil_chk(tabLayout_)) removeViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])];
  ASTabLayoutImpl_nativeRemoveViewWithASIWidget_(self, w);
  return remove;
}

- (jboolean)removeWithInt:(jint)index {
  id<ASIWidget> widget = [((id<JavaUtilList>) nil_chk(widgets_)) getWithInt:index];
  jboolean remove = [super removeWithInt:index];
  if (index + 1 <= [((ADMTabLayout *) nil_chk(tabLayout_)) getChildCount]) {
    [((ADMTabLayout *) nil_chk(tabLayout_)) removeViewAtWithInt:index];
    ASTabLayoutImpl_nativeRemoveViewWithASIWidget_(self, widget);
  }
  return remove;
}

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget {
  ASTabLayoutImpl_nativeRemoveViewWithASIWidget_(self, widget);
}

- (void)addWithASIWidget:(id<ASIWidget>)w
                 withInt:(jint)index {
  if (index != -2) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ASTabLayoutImpl_createLayoutParamsWithADView_(self, view);
    if (index == -1) {
      [((ADMTabLayout *) nil_chk(tabLayout_)) addViewWithADView:view];
    }
    else {
      [((ADMTabLayout *) nil_chk(tabLayout_)) addViewWithADView:view withInt:index];
    }
  }
  if (!([ASIViewStub_class_() isInstance:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])])) {
    ASViewGroupImpl_nativeAddViewWithId_withId_([self asNativeWidget], [w asNativeWidget]);
  }
  [super addWithASIWidget:w withInt:index];
}

- (void)createLayoutParamsWithADView:(ADView *)view {
  ASTabLayoutImpl_createLayoutParamsWithADView_(self, view);
}

- (ADFrameLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view {
  return ASTabLayoutImpl_getLayoutParamsWithADView_(self, view);
}

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)w
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADFrameLayout_LayoutParams *layoutParams = ASTabLayoutImpl_getLayoutParamsWithADView_(self, view);
  ASViewGroupImpl_setChildAttributeWithASIWidget_withASWidgetAttribute_withId_withId_(w, key, objValue, layoutParams);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height" }, 2)) {
    case 0:
    ((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 1:
    ((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    default:
    break;
  }
  [((ADView *) nil_chk(view)) setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
}

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  id attributeValue = ASViewGroupImpl_getChildAttributeWithASIWidget_withASWidgetAttribute_(w, key);
  if (attributeValue != nil) {
    return attributeValue;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADFrameLayout_LayoutParams *layoutParams = ASTabLayoutImpl_getLayoutParamsWithADView_(self, view);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height" }, 2)) {
    case 0:
    return JavaLangInteger_valueOfWithInt_(((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->width_);
    case 1:
    return JavaLangInteger_valueOfWithInt_(((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->height_);
  }
  return nil;
}

- (IOSClass *)getViewClass {
  return ASTabLayoutImpl_TabLayoutExt_class_();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewGroupImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"tabBackground", @"tabContentStart", @"tabGravity", @"tabIndicatorAnimationMode", @"tabIndicatorFullWidth", @"tabIndicatorGravity", @"tabIndicatorHeight", @"tabInlineLabel", @"tabMaxWidth", @"tabMinWidth", @"tabMode", @"tabPadding", @"tabPaddingBottom", @"tabPaddingEnd", @"tabPaddingStart", @"tabPaddingTop", @"removeTab", @"removeTabAt", @"removeAllTabs", @"onTabSelected", @"onTabUnselected", @"onTabReselected", @"addTab", @"tabIconTint", @"selectTab", @"updateTabTexts", @"setupWithViewPager", @"tabIndicatorColor", @"tabSelectedTextColor", @"tabTextColor", @"tabTextAppearance", @"badgeNumbers", @"badgeAlphas", @"badgeMaxCharacterCounts", @"badgeGravities", @"badgeHorizontalOffsets", @"badgeVerticalOffsets", @"badgeIsVisibles", @"badgeBackgroundColors", @"badgeTextColors", @"badgeTextAppearanceResources", @"menuItemIds", @"scrollX" }, 43)) {
    case 0:
    {
      ASTabLayoutImpl_setBackgroundDrawableWithId_(self, objValue);
    }
    break;
    case 1:
    {
      ASTabLayoutImpl_setContentStartWithId_(self, objValue);
    }
    break;
    case 2:
    {
      [((ADMTabLayout *) nil_chk(tabLayout_)) setTabGravityWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 3:
    {
      [((ADMTabLayout *) nil_chk(tabLayout_)) setTabIndicatorAnimationModeWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 4:
    {
      [((ADMTabLayout *) nil_chk(tabLayout_)) setTabIndicatorFullWidthWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    }
    break;
    case 5:
    {
      [((ADMTabLayout *) nil_chk(tabLayout_)) setSelectedTabIndicatorGravityWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 6:
    {
      [((ADMTabLayout *) nil_chk(tabLayout_)) setSelectedTabIndicatorHeightWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 7:
    {
      [((ADMTabLayout *) nil_chk(tabLayout_)) setInlineLabelWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    }
    break;
    case 8:
    {
      ASTabLayoutImpl_setMaxWidthWithId_(self, objValue);
    }
    break;
    case 9:
    {
      ASTabLayoutImpl_setMinWidthWithId_(self, objValue);
    }
    break;
    case 10:
    {
      [((ADMTabLayout *) nil_chk(tabLayout_)) setTabModeWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 11:
    {
      ASTabLayoutImpl_setPaddingWithId_(self, objValue);
    }
    break;
    case 12:
    {
      ASTabLayoutImpl_setPaddingBottomWithId_(self, objValue);
    }
    break;
    case 13:
    {
      ASTabLayoutImpl_setPaddingEndWithId_(self, objValue);
    }
    break;
    case 14:
    {
      ASTabLayoutImpl_setPaddingStartWithId_(self, objValue);
    }
    break;
    case 15:
    {
      ASTabLayoutImpl_setPaddingTopWithId_(self, objValue);
    }
    break;
    case 16:
    {
      ASTabLayoutImpl_removeTabByIdWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]);
    }
    break;
    case 17:
    {
      ASTabLayoutImpl_removeTabByAtWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]);
    }
    break;
    case 18:
    {
      [((ADMTabLayout *) nil_chk(tabLayout_)) removeAllTabs];
    }
    break;
    case 19:
    {
      [((ADMTabLayout *) nil_chk(tabLayout_)) setOnTabSelectedListenerWithADMTabLayout_OnTabSelectedListener:new_ASTabLayoutImpl_OnTabSelectedListener_initWithASIWidget_withNSString_withNSString_(self, strValue, @"onTabSelected")];
    }
    break;
    case 20:
    {
      [((ADMTabLayout *) nil_chk(tabLayout_)) setOnTabSelectedListenerWithADMTabLayout_OnTabSelectedListener:new_ASTabLayoutImpl_OnTabSelectedListener_initWithASIWidget_withNSString_withNSString_(self, strValue, @"onTabUnselected")];
    }
    break;
    case 21:
    {
      [((ADMTabLayout *) nil_chk(tabLayout_)) setOnTabSelectedListenerWithADMTabLayout_OnTabSelectedListener:new_ASTabLayoutImpl_OnTabSelectedListener_initWithASIWidget_withNSString_withNSString_(self, strValue, @"onTabReselected")];
    }
    break;
    case 22:
    {
      if ([JavaUtilMap_class_() isInstance:objValue]) {
        id<JavaUtilMap> data = ((id<JavaUtilMap>) cast_check(objValue, JavaUtilMap_class_()));
        id text = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"text"] withNSString:@"resourcestring"];
        id icon = [self quickConvertWithId:[data getWithId:@"icon"] withNSString:@"drawable"];
        id id_ = [self quickConvertWithId:[data getWithId:@"id"] withNSString:@"id"];
        id layout = [self quickConvertWithId:[data getWithId:@"layout"] withNSString:@"template"];
        id customTabTitleId = [self quickConvertWithId:[data getWithId:@"customTabTitleId"] withNSString:@"string"];
        id customTabiconId = [self quickConvertWithId:[data getWithId:@"customTabiconId"] withNSString:@"string"];
        id where = [self quickConvertWithId:[data getWithId:@"where"] withNSString:@"string"];
        ASTabLayoutImpl_addTabWithId_withId_withId_withId_withId_withId_withId_(self, text, icon, id_, layout, customTabTitleId, customTabiconId, where);
      }
      if ([JavaUtilList_class_() isInstance:objValue]) {
        id<JavaUtilList> list = (id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_());
        for (id __strong object in nil_chk(list)) {
          id<JavaUtilMap> data = ASPluginInvoker_getMapWithId_(object);
          id text = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"text"] withNSString:@"resourcestring"];
          id icon = [self quickConvertWithId:[data getWithId:@"icon"] withNSString:@"drawable"];
          id id_ = [self quickConvertWithId:[data getWithId:@"id"] withNSString:@"id"];
          id layout = [self quickConvertWithId:[data getWithId:@"layout"] withNSString:@"template"];
          id customTabTitleId = [self quickConvertWithId:[data getWithId:@"customTabTitleId"] withNSString:@"string"];
          id customTabiconId = [self quickConvertWithId:[data getWithId:@"customTabiconId"] withNSString:@"string"];
          id where = [self quickConvertWithId:[data getWithId:@"where"] withNSString:@"string"];
          ASTabLayoutImpl_addTabWithId_withId_withId_withId_withId_withId_withId_(self, text, icon, id_, layout, customTabTitleId, customTabiconId, where);
        }
      }
    }
    break;
    case 23:
    {
      [((ADMTabLayout *) nil_chk(tabLayout_)) setTabIconTintWithADColorStateList:(ADColorStateList *) cast_chk(objValue, [ADColorStateList class])];
    }
    break;
    case 24:
    {
      ASTabLayoutImpl_selectTabWithId_(self, objValue);
    }
    break;
    case 25:
    {
      ASTabLayoutImpl_updateTabTextsWithId_(self, objValue);
    }
    break;
    case 26:
    {
      ASTabLayoutImpl_setupWithViewPagerWithNSString_(self, strValue);
    }
    break;
    case 27:
    {
      [((ADMTabLayout *) nil_chk(tabLayout_)) setSelectedTabIndicatorColorWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 28:
    {
      ASTabLayoutImpl_setTabSelectedTextColorWithId_(self, objValue);
    }
    break;
    case 29:
    {
      ASTabLayoutImpl_setTabTextColorWithId_(self, objValue);
    }
    break;
    case 30:
    {
      ASTabLayoutImpl_setTabTextAppearanceWithId_(self, objValue);
    }
    break;
    case 31:
    {
      ASTabLayoutImpl_setBadgeNumbersWithId_(self, objValue);
    }
    break;
    case 32:
    {
      ASTabLayoutImpl_setBadgeAlphasWithId_(self, objValue);
    }
    break;
    case 33:
    {
      ASTabLayoutImpl_setBadgeMaxCharacterCountsWithId_(self, objValue);
    }
    break;
    case 34:
    {
      ASTabLayoutImpl_setBadgeGravitiesWithId_(self, objValue);
    }
    break;
    case 35:
    {
      ASTabLayoutImpl_setBadgeHorizontalOffsetsWithId_(self, objValue);
    }
    break;
    case 36:
    {
      ASTabLayoutImpl_setBadgeVerticalOffsetsWithId_(self, objValue);
    }
    break;
    case 37:
    {
      ASTabLayoutImpl_setBadgeIsVisiblesWithId_(self, objValue);
    }
    break;
    case 38:
    {
      ASTabLayoutImpl_setBadgeBackgroundColorsWithId_(self, objValue);
    }
    break;
    case 39:
    {
      ASTabLayoutImpl_setBadgeTextColorsWithId_(self, objValue);
    }
    break;
    case 40:
    {
      ASTabLayoutImpl_setTextAppearanceResourcesWithId_(self, objValue);
    }
    break;
    case 41:
    {
      ASTabLayoutImpl_setBadgeMenuItemIdsWithId_(self, objValue);
    }
    break;
    case 42:
    {
      ASTabLayoutImpl_setScrollXWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id attributeValue = ASViewGroupImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"tabIndicatorAnimationMode", @"scrollX" }, 2)) {
    case 0:
    {
      return JavaLangInteger_valueOfWithInt_([((ADMTabLayout *) nil_chk(tabLayout_)) getTabIndicatorAnimationMode]);
    }
    case 1:
    {
      return [self getScrollX];
    }
  }
  return nil;
}

- (id)asNativeWidget {
  return uiView_;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)updateTabTextsWithId:(id)objValue {
  ASTabLayoutImpl_updateTabTextsWithId_(self, objValue);
}

- (void)addTabWithId:(id)tabItemText
              withId:(id)tabItemIcon
              withId:(id)tabItemId
              withId:(id)tabItemLayout
              withId:(id)tabItemCustomTabTitleId
              withId:(id)tabItemCustomTabIconId
              withId:(id)where {
  ASTabLayoutImpl_addTabWithId_withId_withId_withId_withId_withId_withId_(self, tabItemText, tabItemIcon, tabItemId, tabItemLayout, tabItemCustomTabTitleId, tabItemCustomTabIconId, where);
}

- (void)initialized {
  [super initialized];
  if (widgets_ != nil) {
    for (id<ASIWidget> __strong child in widgets_) {
      if ([((NSString *) nil_chk([((id<ASIWidget>) nil_chk(child)) getLocalName])) isEqual:ASTabItemImpl_LOCAL_NAME]) {
        id tabItemLayout = [child getAttributeWithNSString:@"layout" withBoolean:true];
        id tabItemCustomTabTitleId = [child getAttributeWithNSString:@"customTabTitleId" withBoolean:true];
        id tabItemCustomTabIconId = [child getAttributeWithNSString:@"customTabiconId" withBoolean:true];
        id tabItemIcon = [child getAttributeWithNSString:@"icon" withBoolean:true];
        id tabItemText = [child getAttributeWithNSString:@"text" withBoolean:true];
        id tabItemId = [child getAttributeWithNSString:@"id" withBoolean:true];
        ASTabLayoutImpl_addTabWithId_withId_withId_withId_withId_withId_withId_(self, tabItemText, tabItemIcon, tabItemId, tabItemLayout, tabItemCustomTabTitleId, tabItemCustomTabIconId, nil);
      }
    }
    ASTabLayoutImpl_initThumbHeight(self);
  }
  [self replayBufferedEvents];
}

- (void)setTabTextColorWithId:(id)objValue {
  ASTabLayoutImpl_setTabTextColorWithId_(self, objValue);
}

- (void)setTabSelectedTextColorWithId:(id)objValue {
  ASTabLayoutImpl_setTabSelectedTextColorWithId_(self, objValue);
}

- (void)setTabTextAppearanceWithId:(id)objValue {
  ASTabLayoutImpl_setTabTextAppearanceWithId_(self, objValue);
}

- (void)setPaddingWithId:(id)objValue {
  ASTabLayoutImpl_setPaddingWithId_(self, objValue);
}

- (void)setContentStartWithId:(id)objValue {
  ASTabLayoutImpl_setContentStartWithId_(self, objValue);
}

- (void)setTabContentInsetStartWithId:(id)objValue {
  ASTabLayoutImpl_setTabContentInsetStartWithId_(self, objValue);
}

- (void)setPaddingBottomWithId:(id)objValue {
  ASTabLayoutImpl_setPaddingBottomWithId_(self, objValue);
}

- (void)setPaddingEndWithId:(id)objValue {
  ASTabLayoutImpl_setPaddingEndWithId_(self, objValue);
}

- (void)setPaddingTopWithId:(id)objValue {
  ASTabLayoutImpl_setPaddingTopWithId_(self, objValue);
}

- (void)setPaddingStartWithId:(id)objValue {
  ASTabLayoutImpl_setPaddingStartWithId_(self, objValue);
}

- (void)setMinWidthWithId:(id)objValue {
  ASTabLayoutImpl_setMinWidthWithId_(self, objValue);
}

- (void)setMaxWidthWithId:(id)objValue {
  ASTabLayoutImpl_setMaxWidthWithId_(self, objValue);
}

- (void)selectTabWithId:(id)objValue {
  ASTabLayoutImpl_selectTabWithId_(self, objValue);
}

- (ADMTabLayout_Tab *)findTabByIdWithInt:(jint)id_ {
  return ASTabLayoutImpl_findTabByIdWithInt_(self, id_);
}

+ (void)addEventInfoWithJavaUtilMap:(id<JavaUtilMap>)obj
               withADMTabLayout_Tab:(ADMTabLayout_Tab *)tab
                    withASIFragment:(id<ASIFragment>)fragment {
  ASTabLayoutImpl_addEventInfoWithJavaUtilMap_withADMTabLayout_Tab_withASIFragment_(obj, tab, fragment);
}

- (void)setupWithViewPagerWithNSString:(NSString *)strValue {
  ASTabLayoutImpl_setupWithViewPagerWithNSString_(self, strValue);
}

- (void)setBackgroundDrawableWithId:(id)objValue {
  ASTabLayoutImpl_setBackgroundDrawableWithId_(self, objValue);
}

- (void)removeTabByIdWithInt:(jint)id_ {
  ASTabLayoutImpl_removeTabByIdWithInt_(self, id_);
}

- (void)removeTabByAtWithInt:(jint)pos {
  ASTabLayoutImpl_removeTabByAtWithInt_(self, pos);
}

- (void)setScrollXWithId:(id)objValue {
  ASTabLayoutImpl_setScrollXWithId_(self, objValue);
}

- (void)nativeSetScrollXWithId:(id)view
                       withInt:(jint)value {
  [((ASUIScrollView*)view) setContentOffset:CGPointMake(value ,((ASUIScrollView*)view).contentOffset.y)];
}

- (void)setScrollYWithId:(id)objValue {
  ASTabLayoutImpl_setScrollYWithId_(self, objValue);
}

- (void)nativeSetScrollYWithId:(id)view
                       withInt:(jint)value {
  [((ASUIScrollView*)view) setContentOffset:CGPointMake(((ASUIScrollView*)view).contentOffset.x, value)];
}

- (id)getScrollX {
  return JavaLangDouble_valueOfWithDouble_([self nativeGetScrollXWithId:[self asNativeWidget]]);
}

- (jdouble)nativeGetScrollXWithId:(id)view {
  return ((ASUIScrollView*)view).contentOffset.x;
}

- (id)getScrollY {
  return JavaLangDouble_valueOfWithDouble_([self nativeGetScrollYWithId:[self asNativeWidget]]);
}

- (jdouble)nativeGetScrollYWithId:(id)view {
  return ((ASUIScrollView*)view).contentOffset.y;
}

- (void)setBadgeBackgroundColorsWithId:(id)objValue {
  ASTabLayoutImpl_setBadgeBackgroundColorsWithId_(self, objValue);
}

- (void)setValueOnBadgeDrawableWithId:(id)objValue
      withASTabLayoutImpl_ValueSetter:(id<ASTabLayoutImpl_ValueSetter>)valueSetter {
  ASTabLayoutImpl_setValueOnBadgeDrawableWithId_withASTabLayoutImpl_ValueSetter_(self, objValue, valueSetter);
}

- (void)setBadgeMenuItemIdsWithId:(id)objValue {
  ASTabLayoutImpl_setBadgeMenuItemIdsWithId_(self, objValue);
}

- (void)setBadgeNumbersWithId:(id)objValue {
  ASTabLayoutImpl_setBadgeNumbersWithId_(self, objValue);
}

- (void)setBadgeVerticalOffsetsWithId:(id)objValue {
  ASTabLayoutImpl_setBadgeVerticalOffsetsWithId_(self, objValue);
}

- (void)setBadgeHorizontalOffsetsWithId:(id)objValue {
  ASTabLayoutImpl_setBadgeHorizontalOffsetsWithId_(self, objValue);
}

- (void)setBadgeGravitiesWithId:(id)objValue {
  ASTabLayoutImpl_setBadgeGravitiesWithId_(self, objValue);
}

- (void)setBadgeMaxCharacterCountsWithId:(id)objValue {
  ASTabLayoutImpl_setBadgeMaxCharacterCountsWithId_(self, objValue);
}

- (void)setBadgeAlphasWithId:(id)objValue {
  ASTabLayoutImpl_setBadgeAlphasWithId_(self, objValue);
}

- (void)setBadgeTextColorsWithId:(id)objValue {
  ASTabLayoutImpl_setBadgeTextColorsWithId_(self, objValue);
}

- (void)setBadgeIsVisiblesWithId:(id)objValue {
  ASTabLayoutImpl_setBadgeIsVisiblesWithId_(self, objValue);
}

- (void)setTextAppearanceResourcesWithId:(id)objValue {
  ASTabLayoutImpl_setTextAppearanceResourcesWithId_(self, objValue);
}

- (void)applyTabContentInsetStartWithId:(id)objValue {
  ASTabLayoutImpl_applyTabContentInsetStartWithId_(self, objValue);
}

- (void)applyTabBackgroundWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab
                                        withId:(id)objValue {
  ASTabLayoutImpl_applyTabBackgroundWithADMTabLayout_Tab_withId_(self, tab, objValue);
}

- (void)applyRequestedTabMinWidthWithId:(id)objValue {
  ASTabLayoutImpl_applyRequestedTabMinWidthWithId_(self, objValue);
}

- (void)applyRequestedTabMaxWidthWithId:(id)objValue {
  ASTabLayoutImpl_applyRequestedTabMaxWidthWithId_(self, objValue);
}

- (jint)getTabPaddingBottom {
  return ASTabLayoutImpl_getTabPaddingBottom(self);
}

- (jint)getTabPaddingEnd {
  return ASTabLayoutImpl_getTabPaddingEnd(self);
}

- (jint)getTabPaddingTop {
  return ASTabLayoutImpl_getTabPaddingTop(self);
}

- (jint)getTabPaddingStart {
  return ASTabLayoutImpl_getTabPaddingStart(self);
}

- (void)applyTabPaddingBottomWithId:(id)objValue {
  ASTabLayoutImpl_applyTabPaddingBottomWithId_(self, objValue);
}

- (void)applyTabPaddingEndWithId:(id)objValue {
  ASTabLayoutImpl_applyTabPaddingEndWithId_(self, objValue);
}

- (void)applyTabPaddingTopWithId:(id)objValue {
  ASTabLayoutImpl_applyTabPaddingTopWithId_(self, objValue);
}

- (void)applyTabPaddingStartWithId:(id)objValue {
  ASTabLayoutImpl_applyTabPaddingStartWithId_(self, objValue);
}

- (void)applyModeAndGravity {
  ASTabLayoutImpl_applyModeAndGravity(self);
}

- (void)updateAllTabs {
  ASTabLayoutImpl_updateAllTabs(self);
}

- (void)applyTextAppearanceWithId:(id)objValue {
  ASTabLayoutImpl_applyTextAppearanceWithId_(self, objValue);
}

- (id<ASIWidget>)loadLazyWidgetsWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab
                                       withASIWidget:(id<ASIWidget>)layout {
  return ASTabLayoutImpl_loadLazyWidgetsWithADMTabLayout_Tab_withASIWidget_(self, tab, layout);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADMTabLayout *) nil_chk(tabLayout_)) setIdWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:id_ withNSString:@"id"], [JavaLangInteger class]))) intValue]];
  }
}

- (void)setVisibleWithBoolean:(jboolean)b {
  [((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) setVisibilityWithInt:b ? ADView_VISIBLE : ADView_GONE];
}

- (id)getPluginWithNSString:(NSString *)plugin {
  return [((id<ASIAttributable>) nil_chk(ASWidgetFactory_getAttributableWithNSString_(plugin))) newInstanceWithASIWidget:self];
}

- (ASTabLayoutImpl_TabLayoutBean *)getBean {
  if (bean_ == nil) {
    bean_ = new_ASTabLayoutImpl_TabLayoutBean_initWithASTabLayoutImpl_(self);
  }
  return bean_;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)getBuilder {
  if (builder_ == nil) {
    builder_ = new_ASTabLayoutImpl_TabLayoutCommandBuilder_initWithASTabLayoutImpl_(self);
  }
  return builder_;
}

- (ASTabLayoutImpl_TabLayoutParamsBean *)getParamsBean {
  if (paramsBean_ == nil) {
    paramsBean_ = new_ASTabLayoutImpl_TabLayoutParamsBean_initWithASTabLayoutImpl_(self);
  }
  return paramsBean_;
}

- (ASTabLayoutImpl_TabLayoutCommandParamsBuilder *)getParamsBuilder {
  if (paramsBuilder_ == nil) {
    paramsBuilder_ = new_ASTabLayoutImpl_TabLayoutCommandParamsBuilder_initWithASTabLayoutImpl_(self);
  }
  return paramsBuilder_;
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASTabLayoutImpl_nativeCreateWithJavaUtilMap_(self, params);
}

- (id)nativeHscrollViewCreate {
  ASUIScrollView* uiView = [ASUIScrollView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView.showsHorizontalScrollIndicator=YES;
  uiView.scrollEnabled=YES;
  uiView.userInteractionEnabled=YES;
  return uiView;
}

- (void)initThumbHeight {
  ASTabLayoutImpl_initThumbHeight(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "LADFrameLayout_LayoutParams;", 0x2, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 23, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 31, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 32, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 36, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 37, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 25, -1, -1, -1, -1 },
    { NULL, "LADMTabLayout_Tab;", 0x2, 41, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 42, 43, -1, 44, -1, -1 },
    { NULL, "V", 0x2, 45, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 46, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 47, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 48, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 49, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 50, 51, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 52, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 53, 51, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x101, 54, 25, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x101, 55, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 56, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 57, 58, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 59, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 60, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 61, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 62, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 63, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 64, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 65, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 66, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 67, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 68, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 69, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 70, 71, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 72, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 73, 25, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 74, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 75, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 76, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 77, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 78, 25, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x2, 79, 80, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 81, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 82, 83, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 84, 1, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutParamsBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 85, 86, -1, 87, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:);
  methods[4].selector = @selector(newInstance);
  methods[5].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[6].selector = @selector(setWidgetOnNativeClass);
  methods[7].selector = @selector(asWidget);
  methods[8].selector = @selector(removeWithASIWidget:);
  methods[9].selector = @selector(removeWithInt:);
  methods[10].selector = @selector(nativeRemoveViewWithASIWidget:);
  methods[11].selector = @selector(addWithASIWidget:withInt:);
  methods[12].selector = @selector(createLayoutParamsWithADView:);
  methods[13].selector = @selector(getLayoutParamsWithADView:);
  methods[14].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[15].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[16].selector = @selector(getViewClass);
  methods[17].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[18].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[19].selector = @selector(asNativeWidget);
  methods[20].selector = @selector(checkIosVersionWithNSString:);
  methods[21].selector = @selector(requestLayout);
  methods[22].selector = @selector(invalidate);
  methods[23].selector = @selector(updateTabTextsWithId:);
  methods[24].selector = @selector(addTabWithId:withId:withId:withId:withId:withId:withId:);
  methods[25].selector = @selector(initialized);
  methods[26].selector = @selector(setTabTextColorWithId:);
  methods[27].selector = @selector(setTabSelectedTextColorWithId:);
  methods[28].selector = @selector(setTabTextAppearanceWithId:);
  methods[29].selector = @selector(setPaddingWithId:);
  methods[30].selector = @selector(setContentStartWithId:);
  methods[31].selector = @selector(setTabContentInsetStartWithId:);
  methods[32].selector = @selector(setPaddingBottomWithId:);
  methods[33].selector = @selector(setPaddingEndWithId:);
  methods[34].selector = @selector(setPaddingTopWithId:);
  methods[35].selector = @selector(setPaddingStartWithId:);
  methods[36].selector = @selector(setMinWidthWithId:);
  methods[37].selector = @selector(setMaxWidthWithId:);
  methods[38].selector = @selector(selectTabWithId:);
  methods[39].selector = @selector(findTabByIdWithInt:);
  methods[40].selector = @selector(addEventInfoWithJavaUtilMap:withADMTabLayout_Tab:withASIFragment:);
  methods[41].selector = @selector(setupWithViewPagerWithNSString:);
  methods[42].selector = @selector(setBackgroundDrawableWithId:);
  methods[43].selector = @selector(removeTabByIdWithInt:);
  methods[44].selector = @selector(removeTabByAtWithInt:);
  methods[45].selector = @selector(setScrollXWithId:);
  methods[46].selector = @selector(nativeSetScrollXWithId:withInt:);
  methods[47].selector = @selector(setScrollYWithId:);
  methods[48].selector = @selector(nativeSetScrollYWithId:withInt:);
  methods[49].selector = @selector(getScrollX);
  methods[50].selector = @selector(nativeGetScrollXWithId:);
  methods[51].selector = @selector(getScrollY);
  methods[52].selector = @selector(nativeGetScrollYWithId:);
  methods[53].selector = @selector(setBadgeBackgroundColorsWithId:);
  methods[54].selector = @selector(setValueOnBadgeDrawableWithId:withASTabLayoutImpl_ValueSetter:);
  methods[55].selector = @selector(setBadgeMenuItemIdsWithId:);
  methods[56].selector = @selector(setBadgeNumbersWithId:);
  methods[57].selector = @selector(setBadgeVerticalOffsetsWithId:);
  methods[58].selector = @selector(setBadgeHorizontalOffsetsWithId:);
  methods[59].selector = @selector(setBadgeGravitiesWithId:);
  methods[60].selector = @selector(setBadgeMaxCharacterCountsWithId:);
  methods[61].selector = @selector(setBadgeAlphasWithId:);
  methods[62].selector = @selector(setBadgeTextColorsWithId:);
  methods[63].selector = @selector(setBadgeIsVisiblesWithId:);
  methods[64].selector = @selector(setTextAppearanceResourcesWithId:);
  methods[65].selector = @selector(applyTabContentInsetStartWithId:);
  methods[66].selector = @selector(applyTabBackgroundWithADMTabLayout_Tab:withId:);
  methods[67].selector = @selector(applyRequestedTabMinWidthWithId:);
  methods[68].selector = @selector(applyRequestedTabMaxWidthWithId:);
  methods[69].selector = @selector(getTabPaddingBottom);
  methods[70].selector = @selector(getTabPaddingEnd);
  methods[71].selector = @selector(getTabPaddingTop);
  methods[72].selector = @selector(getTabPaddingStart);
  methods[73].selector = @selector(applyTabPaddingBottomWithId:);
  methods[74].selector = @selector(applyTabPaddingEndWithId:);
  methods[75].selector = @selector(applyTabPaddingTopWithId:);
  methods[76].selector = @selector(applyTabPaddingStartWithId:);
  methods[77].selector = @selector(applyModeAndGravity);
  methods[78].selector = @selector(updateAllTabs);
  methods[79].selector = @selector(applyTextAppearanceWithId:);
  methods[80].selector = @selector(loadLazyWidgetsWithADMTabLayout_Tab:withASIWidget:);
  methods[81].selector = @selector(setIdWithNSString:);
  methods[82].selector = @selector(setVisibleWithBoolean:);
  methods[83].selector = @selector(getPluginWithNSString:);
  methods[84].selector = @selector(getBean);
  methods[85].selector = @selector(getBuilder);
  methods[86].selector = @selector(getParamsBean);
  methods[87].selector = @selector(getParamsBuilder);
  methods[88].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[89].selector = @selector(nativeHscrollViewCreate);
  methods[90].selector = @selector(initThumbHeight);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 88, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 89, -1, -1 },
    { "tabLayout_", "LADMTabLayout;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tabTextColor_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tabSelectedTextColor_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "badgeMenuItemIds_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 90, -1 },
    { "builder_", "LASTabLayoutImpl_TabLayoutCommandBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bean_", "LASTabLayoutImpl_TabLayoutBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBuilder_", "LASTabLayoutImpl_TabLayoutCommandParamsBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBean_", "LASTabLayoutImpl_TabLayoutParamsBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "remove", "LASIWidget;", "I", "nativeRemoveView", "add", "LASIWidget;I", "createLayoutParams", "LADView;", "getLayoutParams", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "checkIosVersion", "updateTabTexts", "LNSObject;", "addTab", "LNSObject;LNSObject;LNSObject;LNSObject;LNSObject;LNSObject;LNSObject;", "setTabTextColor", "setTabSelectedTextColor", "setTabTextAppearance", "setPadding", "setContentStart", "setTabContentInsetStart", "setPaddingBottom", "setPaddingEnd", "setPaddingTop", "setPaddingStart", "setMinWidth", "setMaxWidth", "selectTab", "findTabById", "addEventInfo", "LJavaUtilMap;LADMTabLayout_Tab;LASIFragment;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lcom/google/android/material/tabs/TabLayout$Tab;Lcom/ashera/core/IFragment;)V", "setupWithViewPager", "setBackgroundDrawable", "removeTabById", "removeTabByAt", "setScrollX", "nativeSetScrollX", "LNSObject;I", "setScrollY", "nativeSetScrollY", "nativeGetScrollX", "nativeGetScrollY", "setBadgeBackgroundColors", "setValueOnBadgeDrawable", "LNSObject;LASTabLayoutImpl_ValueSetter;", "setBadgeMenuItemIds", "setBadgeNumbers", "setBadgeVerticalOffsets", "setBadgeHorizontalOffsets", "setBadgeGravities", "setBadgeMaxCharacterCounts", "setBadgeAlphas", "setBadgeTextColors", "setBadgeIsVisibles", "setTextAppearanceResources", "applyTabContentInsetStart", "applyTabBackground", "LADMTabLayout_Tab;LNSObject;", "applyRequestedTabMinWidth", "applyRequestedTabMaxWidth", "applyTabPaddingBottom", "applyTabPaddingEnd", "applyTabPaddingTop", "applyTabPaddingStart", "applyTextAppearance", "loadLazyWidgets", "LADMTabLayout_Tab;LASIWidget;", "setId", "setVisible", "Z", "getPlugin", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", &ASTabLayoutImpl_LOCAL_NAME, &ASTabLayoutImpl_GROUP_NAME, "Ljava/util/List<Ljava/lang/Object;>;", "LASTabLayoutImpl_TabGravity;LASTabLayoutImpl_TabIndicatorAnimationMode;LASTabLayoutImpl_TabIndicatorGravity;LASTabLayoutImpl_TabMode;LASTabLayoutImpl_TabLayoutExt;LASTabLayoutImpl_ValueSetter;LASTabLayoutImpl_OnTabSelectedListener;LASTabLayoutImpl_TabLayoutCommandBuilder;LASTabLayoutImpl_TabLayoutBean;LASTabLayoutImpl_TabLayoutParamsBean;LASTabLayoutImpl_TabLayoutCommandParamsBuilder;" };
  static const J2ObjcClassInfo _ASTabLayoutImpl = { "TabLayoutImpl", "com.ashera.tablayout", ptrTable, methods, fields, 7, 0x1, 91, 11, -1, 91, -1, -1, -1 };
  return &_ASTabLayoutImpl;
}

@end

void ASTabLayoutImpl_init(ASTabLayoutImpl *self) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASTabLayoutImpl_GROUP_NAME, ASTabLayoutImpl_LOCAL_NAME);
  self->tabTextColor_ = ADColor_BLACK;
  self->tabSelectedTextColor_ = ADColor_BLACK;
}

ASTabLayoutImpl *new_ASTabLayoutImpl_init() {
  J2OBJC_NEW_IMPL(ASTabLayoutImpl, init)
}

ASTabLayoutImpl *create_ASTabLayoutImpl_init() {
  J2OBJC_CREATE_IMPL(ASTabLayoutImpl, init)
}

void ASTabLayoutImpl_initWithNSString_(ASTabLayoutImpl *self, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASTabLayoutImpl_GROUP_NAME, localname);
  self->tabTextColor_ = ADColor_BLACK;
  self->tabSelectedTextColor_ = ADColor_BLACK;
}

ASTabLayoutImpl *new_ASTabLayoutImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASTabLayoutImpl, initWithNSString_, localname)
}

ASTabLayoutImpl *create_ASTabLayoutImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASTabLayoutImpl, initWithNSString_, localname)
}

void ASTabLayoutImpl_initWithNSString_withNSString_(ASTabLayoutImpl *self, NSString *groupName, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, groupName, localname);
  self->tabTextColor_ = ADColor_BLACK;
  self->tabSelectedTextColor_ = ADColor_BLACK;
}

ASTabLayoutImpl *new_ASTabLayoutImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASTabLayoutImpl, initWithNSString_withNSString_, groupName, localname)
}

ASTabLayoutImpl *create_ASTabLayoutImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASTabLayoutImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASTabLayoutImpl_setWidgetOnNativeClass(ASTabLayoutImpl *self) {
  ((ASUIView*) [self asNativeWidget]).widget = self;
}

void ASTabLayoutImpl_nativeRemoveViewWithASIWidget_(ASTabLayoutImpl *self, id<ASIWidget> widget) {
  ADLayoutTransition *layoutTransition = [((ADMTabLayout *) nil_chk(self->tabLayout_)) getLayoutTransition];
  if (layoutTransition != nil && ([layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_CHANGE_DISAPPEARING] || [layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_DISAPPEARING])) {
    [self addToBufferedRunnablesWithJavaLangRunnable:new_ASTabLayoutImpl_$Lambda$1_initWithASIWidget_(widget)];
  }
  else {
    ASViewGroupImpl_nativeRemoveViewWithASIWidget_(widget);
  }
}

void ASTabLayoutImpl_createLayoutParamsWithADView_(ASTabLayoutImpl *self, ADView *view) {
  ADFrameLayout_LayoutParams *layoutParams = (ADFrameLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADFrameLayout_LayoutParams class]);
  layoutParams = (ADFrameLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADFrameLayout_LayoutParams class]);
  if (layoutParams == nil) {
    layoutParams = new_ADFrameLayout_LayoutParams_initWithInt_withInt_(-2, -2);
    [view setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
  }
  else {
    layoutParams->height_ = -2;
    layoutParams->width_ = -2;
  }
}

ADFrameLayout_LayoutParams *ASTabLayoutImpl_getLayoutParamsWithADView_(ASTabLayoutImpl *self, ADView *view) {
  return (ADFrameLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADFrameLayout_LayoutParams class]);
}

void ASTabLayoutImpl_updateTabTextsWithId_(ASTabLayoutImpl *self, id objValue) {
  if (self->badgeMenuItemIds_ != nil) {
    id<JavaUtilList> badgeAttrs = ASPluginInvoker_getListWithId_(objValue);
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(self->badgeMenuItemIds_)) size]; i++) {
      jint id_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<JavaUtilList>) nil_chk(self->badgeMenuItemIds_)) getWithInt:i], [JavaLangInteger class]))) intValue];
      ADMTabLayout_Tab *tab = ASTabLayoutImpl_findTabByIdWithInt_(self, id_);
      id value = [((id<JavaUtilList>) nil_chk(badgeAttrs)) getWithInt:i];
      (void) [((ADMTabLayout_Tab *) nil_chk(tab)) setTextWithJavaLangCharSequence:(NSString *) cast_chk(value, [NSString class])];
    }
  }
}

void ASTabLayoutImpl_addTabWithId_withId_withId_withId_withId_withId_withId_(ASTabLayoutImpl *self, id tabItemText, id tabItemIcon, id tabItemId, id tabItemLayout, id tabItemCustomTabTitleId, id tabItemCustomTabIconId, id where) {
  id<ASIWidget> layout = (id<ASIWidget>) cast_check(tabItemLayout, ASIWidget_class_());
  if (tabItemId != nil && ASTabLayoutImpl_findTabByIdWithInt_(self, [(JavaLangInteger *) cast_chk(tabItemId, [JavaLangInteger class]) intValue]) != nil) {
    return;
  }
  ADMTabLayout_Tab *tab = [((ADMTabLayout *) nil_chk(self->tabLayout_)) newTab];
  if (layout != nil) {
    id<ASIWidget> customView = ASTabLayoutImpl_loadLazyWidgetsWithADMTabLayout_Tab_withASIWidget_(self, tab, layout);
    (void) [((ADMTabLayout_Tab *) nil_chk(tab)) setCustomViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(customView)) asWidget], [ADView class])];
    NSString *customTabTitleId = ASPluginInvoker_getStringWithId_(tabItemCustomTabTitleId);
    NSString *customTabiconId = ASPluginInvoker_getStringWithId_(tabItemCustomTabIconId);
    NSString *text = ASPluginInvoker_getStringWithId_(tabItemText);
    ADDrawable *icon = (ADDrawable *) cast_chk(tabItemIcon, [ADDrawable class]);
    if (customTabTitleId != nil && text != nil) {
      [((id<ASIWidget>) nil_chk([customView findWidgetByIdWithNSString:customTabTitleId])) setAttributeWithNSString:@"text" withId:text withBoolean:true];
    }
    if (customTabiconId != nil && icon != nil) {
      [((id<ASIWidget>) nil_chk([customView findWidgetByIdWithNSString:customTabiconId])) setAttributeWithNSString:@"src" withId:icon withBoolean:true];
    }
  }
  else {
    NSString *text = ASPluginInvoker_getStringWithId_(tabItemText);
    if (text != nil) {
      (void) [((ADMTabLayout_Tab *) nil_chk(tab)) setTextWithJavaLangCharSequence:text];
    }
    ADDrawable *icon = (ADDrawable *) cast_chk(tabItemIcon, [ADDrawable class]);
    if (icon != nil) {
      (void) [((ADMTabLayout_Tab *) nil_chk(tab)) setIconWithADDrawable:icon];
    }
  }
  JavaLangInteger *id_ = ASPluginInvoker_getIntWithId_(tabItemId);
  if (id_ != nil) {
    (void) [((ADMTabLayout_Tab *) nil_chk(tab)) setIdWithInt:[id_ intValue]];
  }
  NSString *whereStr = ASPluginInvoker_getStringWithId_(where);
  if (whereStr == nil) {
    [((ADMTabLayout *) nil_chk(self->tabLayout_)) addTabWithADMTabLayout_Tab:tab];
  }
  else {
    if ([whereStr java_hasPrefix:@"at:"]) {
      whereStr = [whereStr java_replace:@"at:" withSequence:@""];
      jint position = JavaLangInteger_parseIntWithNSString_(whereStr);
      [((ADMTabLayout *) nil_chk(self->tabLayout_)) addTabWithADMTabLayout_Tab:tab withInt:position];
    }
    else if ([whereStr java_hasPrefix:@"before:"]) {
      whereStr = [whereStr java_replace:@"before:" withSequence:@""];
      jint tabId = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:whereStr withNSString:@"id"], [JavaLangInteger class]))) intValue];
      ADMTabLayout_Tab *mytab = ASTabLayoutImpl_findTabByIdWithInt_(self, tabId);
      [((ADMTabLayout *) nil_chk(self->tabLayout_)) addTabWithADMTabLayout_Tab:tab withInt:[((ADMTabLayout_Tab *) nil_chk(mytab)) getPosition]];
    }
    else if ([whereStr java_hasPrefix:@"after:"]) {
      whereStr = [whereStr java_replace:@"after:" withSequence:@""];
      jint tabId = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:whereStr withNSString:@"id"], [JavaLangInteger class]))) intValue];
      ADMTabLayout_Tab *mytab = ASTabLayoutImpl_findTabByIdWithInt_(self, tabId);
      [((ADMTabLayout *) nil_chk(self->tabLayout_)) addTabWithADMTabLayout_Tab:tab withInt:[((ADMTabLayout_Tab *) nil_chk(mytab)) getPosition] + 1];
    }
  }
}

void ASTabLayoutImpl_setTabTextColorWithId_(ASTabLayoutImpl *self, id objValue) {
  self->tabTextColor_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  [((ADMTabLayout *) nil_chk(self->tabLayout_)) setTabTextColorsWithInt:self->tabTextColor_ withInt:self->tabSelectedTextColor_];
}

void ASTabLayoutImpl_setTabSelectedTextColorWithId_(ASTabLayoutImpl *self, id objValue) {
  self->tabSelectedTextColor_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  [((ADMTabLayout *) nil_chk(self->tabLayout_)) setTabTextColorsWithInt:self->tabTextColor_ withInt:self->tabSelectedTextColor_];
}

void ASTabLayoutImpl_setTabTextAppearanceWithId_(ASTabLayoutImpl *self, id objValue) {
  ASTabLayoutImpl_applyTextAppearanceWithId_(self, objValue);
  if ([self isInitialised]) {
    ASTabLayoutImpl_updateAllTabs(self);
  }
}

void ASTabLayoutImpl_setPaddingWithId_(ASTabLayoutImpl *self, id objValue) {
  for (jint i = 0; i < [((ADMTabLayout *) nil_chk(self->tabLayout_)) getTabCount]; i++) {
    ADMTabLayout_Tab *tab = [((ADMTabLayout *) nil_chk(self->tabLayout_)) getTabAtWithInt:i];
    ADXViewCompat_setPaddingRelativeWithADView_withInt_withInt_withInt_withInt_(((ADMTabLayout_Tab *) nil_chk(tab))->view_, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue], [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue], [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue], [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]);
  }
  ASTabLayoutImpl_applyTabPaddingStartWithId_(self, objValue);
  ASTabLayoutImpl_applyTabPaddingTopWithId_(self, objValue);
  ASTabLayoutImpl_applyTabPaddingEndWithId_(self, objValue);
  ASTabLayoutImpl_applyTabPaddingBottomWithId_(self, objValue);
  ASTabLayoutImpl_applyModeAndGravity(self);
}

void ASTabLayoutImpl_setContentStartWithId_(ASTabLayoutImpl *self, id objValue) {
  ASTabLayoutImpl_setTabContentInsetStartWithId_(self, objValue);
  ASTabLayoutImpl_applyModeAndGravity(self);
}

void ASTabLayoutImpl_setTabContentInsetStartWithId_(ASTabLayoutImpl *self, id objValue) {
  ASTabLayoutImpl_applyTabContentInsetStartWithId_(self, objValue);
}

void ASTabLayoutImpl_setPaddingBottomWithId_(ASTabLayoutImpl *self, id objValue) {
  for (jint i = 0; i < [((ADMTabLayout *) nil_chk(self->tabLayout_)) getTabCount]; i++) {
    ADMTabLayout_Tab *tab = [((ADMTabLayout *) nil_chk(self->tabLayout_)) getTabAtWithInt:i];
    ADXViewCompat_setPaddingRelativeWithADView_withInt_withInt_withInt_withInt_(((ADMTabLayout_Tab *) nil_chk(tab))->view_, ASTabLayoutImpl_getTabPaddingStart(self), ASTabLayoutImpl_getTabPaddingTop(self), ASTabLayoutImpl_getTabPaddingEnd(self), [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]);
  }
  ASTabLayoutImpl_applyTabPaddingBottomWithId_(self, objValue);
  ASTabLayoutImpl_applyModeAndGravity(self);
}

void ASTabLayoutImpl_setPaddingEndWithId_(ASTabLayoutImpl *self, id objValue) {
  for (jint i = 0; i < [((ADMTabLayout *) nil_chk(self->tabLayout_)) getTabCount]; i++) {
    ADMTabLayout_Tab *tab = [((ADMTabLayout *) nil_chk(self->tabLayout_)) getTabAtWithInt:i];
    ADXViewCompat_setPaddingRelativeWithADView_withInt_withInt_withInt_withInt_(((ADMTabLayout_Tab *) nil_chk(tab))->view_, ASTabLayoutImpl_getTabPaddingStart(self), ASTabLayoutImpl_getTabPaddingTop(self), [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue], ASTabLayoutImpl_getTabPaddingBottom(self));
  }
  ASTabLayoutImpl_applyTabPaddingEndWithId_(self, objValue);
  ASTabLayoutImpl_applyModeAndGravity(self);
}

void ASTabLayoutImpl_setPaddingTopWithId_(ASTabLayoutImpl *self, id objValue) {
  for (jint i = 0; i < [((ADMTabLayout *) nil_chk(self->tabLayout_)) getTabCount]; i++) {
    ADMTabLayout_Tab *tab = [((ADMTabLayout *) nil_chk(self->tabLayout_)) getTabAtWithInt:i];
    ADXViewCompat_setPaddingRelativeWithADView_withInt_withInt_withInt_withInt_(((ADMTabLayout_Tab *) nil_chk(tab))->view_, ASTabLayoutImpl_getTabPaddingStart(self), [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue], ASTabLayoutImpl_getTabPaddingEnd(self), ASTabLayoutImpl_getTabPaddingBottom(self));
  }
  ASTabLayoutImpl_applyTabPaddingTopWithId_(self, objValue);
  ASTabLayoutImpl_applyModeAndGravity(self);
}

void ASTabLayoutImpl_setPaddingStartWithId_(ASTabLayoutImpl *self, id objValue) {
  for (jint i = 0; i < [((ADMTabLayout *) nil_chk(self->tabLayout_)) getTabCount]; i++) {
    ADMTabLayout_Tab *tab = [((ADMTabLayout *) nil_chk(self->tabLayout_)) getTabAtWithInt:i];
    ADXViewCompat_setPaddingRelativeWithADView_withInt_withInt_withInt_withInt_(((ADMTabLayout_Tab *) nil_chk(tab))->view_, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue], ASTabLayoutImpl_getTabPaddingTop(self), ASTabLayoutImpl_getTabPaddingEnd(self), ASTabLayoutImpl_getTabPaddingBottom(self));
  }
  ASTabLayoutImpl_applyTabPaddingStartWithId_(self, objValue);
  ASTabLayoutImpl_applyModeAndGravity(self);
}

void ASTabLayoutImpl_setMinWidthWithId_(ASTabLayoutImpl *self, id objValue) {
  ASTabLayoutImpl_applyRequestedTabMinWidthWithId_(self, objValue);
}

void ASTabLayoutImpl_setMaxWidthWithId_(ASTabLayoutImpl *self, id objValue) {
  ASTabLayoutImpl_applyRequestedTabMaxWidthWithId_(self, objValue);
  [((ADMTabLayout *) nil_chk(self->tabLayout_)) requestLayout];
}

void ASTabLayoutImpl_selectTabWithId_(ASTabLayoutImpl *self, id objValue) {
  [((ADMTabLayout *) nil_chk(self->tabLayout_)) selectTabWithADMTabLayout_Tab:[self->tabLayout_ getTabAtWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]]];
}

ADMTabLayout_Tab *ASTabLayoutImpl_findTabByIdWithInt_(ASTabLayoutImpl *self, jint id_) {
  for (jint i = 0; i < [((ADMTabLayout *) nil_chk(self->tabLayout_)) getTabCount]; i++) {
    ADMTabLayout_Tab *tab = [((ADMTabLayout *) nil_chk(self->tabLayout_)) getTabAtWithInt:i];
    if ([((ADMTabLayout_Tab *) nil_chk(tab)) getId] == id_) {
      return tab;
    }
  }
  return nil;
}

void ASTabLayoutImpl_addEventInfoWithJavaUtilMap_withADMTabLayout_Tab_withASIFragment_(id<JavaUtilMap> obj, ADMTabLayout_Tab *tab, id<ASIFragment> fragment) {
  ASTabLayoutImpl_initialize();
  ADContext *context = (ADContext *) cast_chk([((id<ASIFragment>) nil_chk(fragment)) getRootActivity], [ADContext class]);
  if ([((ADMTabLayout_Tab *) nil_chk(tab)) getId] != ADView_NO_ID) {
    NSString *idStr = [((ADResources *) nil_chk([((ADContext *) nil_chk(context)) getResources])) getResourceEntryNameWithInt:[tab getId]];
    if (idStr == nil) {
      idStr = ASIdGenerator_getNameWithInt_([tab getId]);
    }
    if (idStr != nil) {
      (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"tabId" withId:![idStr java_hasPrefix:@"@"] ? JreStrcat("$$", @"@+id/", idStr) : idStr];
    }
  }
}

void ASTabLayoutImpl_setupWithViewPagerWithNSString_(ASTabLayoutImpl *self, NSString *strValue) {
  id<ASIWidget> viewPager = [self findNearestViewWithNSString:strValue];
  if (viewPager != nil) {
    [((ADMTabLayout *) nil_chk(self->tabLayout_)) setupWithViewPagerWithADXViewPager:(ADXViewPager *) cast_chk([viewPager asWidget], [ADXViewPager class])];
  }
}

void ASTabLayoutImpl_setBackgroundDrawableWithId_(ASTabLayoutImpl *self, id objValue) {
  for (jint i = 0; i < [((ADMTabLayout *) nil_chk(self->tabLayout_)) getTabCount]; i++) {
    ADMTabLayout_Tab *tab = [((ADMTabLayout *) nil_chk(self->tabLayout_)) getTabAtWithInt:i];
    ASTabLayoutImpl_applyTabBackgroundWithADMTabLayout_Tab_withId_(self, tab, objValue);
  }
  [((ADMTabLayout *) nil_chk(self->tabLayout_)) invalidate];
}

void ASTabLayoutImpl_removeTabByIdWithInt_(ASTabLayoutImpl *self, jint id_) {
  ADMTabLayout_Tab *tab = ASTabLayoutImpl_findTabByIdWithInt_(self, id_);
  if (tab != nil) {
    [((ADMTabLayout *) nil_chk(self->tabLayout_)) removeTabWithADMTabLayout_Tab:tab];
  }
}

void ASTabLayoutImpl_removeTabByAtWithInt_(ASTabLayoutImpl *self, jint pos) {
  if ([((ADMTabLayout *) nil_chk(self->tabLayout_)) getTabCount] > pos) {
    [((ADMTabLayout *) nil_chk(self->tabLayout_)) removeTabAtWithInt:pos];
  }
}

void ASTabLayoutImpl_setScrollXWithId_(ASTabLayoutImpl *self, id objValue) {
  [self nativeSetScrollXWithId:[self asNativeWidget] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASTabLayoutImpl_setScrollYWithId_(ASTabLayoutImpl *self, id objValue) {
  [self nativeSetScrollYWithId:[self asNativeWidget] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASTabLayoutImpl_setBadgeBackgroundColorsWithId_(ASTabLayoutImpl *self, id objValue) {
  ASTabLayoutImpl_setValueOnBadgeDrawableWithId_withASTabLayoutImpl_ValueSetter_(self, objValue, JreLoadStatic(ASTabLayoutImpl_$Lambda$2, instance));
}

void ASTabLayoutImpl_setValueOnBadgeDrawableWithId_withASTabLayoutImpl_ValueSetter_(ASTabLayoutImpl *self, id objValue, id<ASTabLayoutImpl_ValueSetter> valueSetter) {
  if (self->badgeMenuItemIds_ != nil) {
    id<JavaUtilList> badgeAttrs = ASPluginInvoker_getListWithId_(objValue);
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(self->badgeMenuItemIds_)) size]; i++) {
      jint id_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<JavaUtilList>) nil_chk(self->badgeMenuItemIds_)) getWithInt:i], [JavaLangInteger class]))) intValue];
      ADXBadgeDrawable *badge = [((ADMTabLayout_Tab *) nil_chk(ASTabLayoutImpl_findTabByIdWithInt_(self, id_))) getOrCreateBadge];
      id value = [((id<JavaUtilList>) nil_chk(badgeAttrs)) getWithInt:i];
      [((id<ASTabLayoutImpl_ValueSetter>) nil_chk(valueSetter)) setValueOnBadgeDrawableWithADXBadgeDrawable:badge withId:value];
    }
  }
}

void ASTabLayoutImpl_setBadgeMenuItemIdsWithId_(ASTabLayoutImpl *self, id objValue) {
  self->badgeMenuItemIds_ = ASPluginInvoker_getListWithId_(objValue);
}

void ASTabLayoutImpl_setBadgeNumbersWithId_(ASTabLayoutImpl *self, id objValue) {
  ASTabLayoutImpl_setValueOnBadgeDrawableWithId_withASTabLayoutImpl_ValueSetter_(self, objValue, JreLoadStatic(ASTabLayoutImpl_$Lambda$3, instance));
}

void ASTabLayoutImpl_setBadgeVerticalOffsetsWithId_(ASTabLayoutImpl *self, id objValue) {
  ASTabLayoutImpl_setValueOnBadgeDrawableWithId_withASTabLayoutImpl_ValueSetter_(self, objValue, JreLoadStatic(ASTabLayoutImpl_$Lambda$4, instance));
}

void ASTabLayoutImpl_setBadgeHorizontalOffsetsWithId_(ASTabLayoutImpl *self, id objValue) {
  ASTabLayoutImpl_setValueOnBadgeDrawableWithId_withASTabLayoutImpl_ValueSetter_(self, objValue, JreLoadStatic(ASTabLayoutImpl_$Lambda$5, instance));
}

void ASTabLayoutImpl_setBadgeGravitiesWithId_(ASTabLayoutImpl *self, id objValue) {
  ASTabLayoutImpl_setValueOnBadgeDrawableWithId_withASTabLayoutImpl_ValueSetter_(self, objValue, JreLoadStatic(ASTabLayoutImpl_$Lambda$6, instance));
}

void ASTabLayoutImpl_setBadgeMaxCharacterCountsWithId_(ASTabLayoutImpl *self, id objValue) {
  ASTabLayoutImpl_setValueOnBadgeDrawableWithId_withASTabLayoutImpl_ValueSetter_(self, objValue, JreLoadStatic(ASTabLayoutImpl_$Lambda$7, instance));
}

void ASTabLayoutImpl_setBadgeAlphasWithId_(ASTabLayoutImpl *self, id objValue) {
  ASTabLayoutImpl_setValueOnBadgeDrawableWithId_withASTabLayoutImpl_ValueSetter_(self, objValue, JreLoadStatic(ASTabLayoutImpl_$Lambda$8, instance));
}

void ASTabLayoutImpl_setBadgeTextColorsWithId_(ASTabLayoutImpl *self, id objValue) {
  ASTabLayoutImpl_setValueOnBadgeDrawableWithId_withASTabLayoutImpl_ValueSetter_(self, objValue, JreLoadStatic(ASTabLayoutImpl_$Lambda$9, instance));
}

void ASTabLayoutImpl_setBadgeIsVisiblesWithId_(ASTabLayoutImpl *self, id objValue) {
  ASTabLayoutImpl_setValueOnBadgeDrawableWithId_withASTabLayoutImpl_ValueSetter_(self, objValue, JreLoadStatic(ASTabLayoutImpl_$Lambda$10, instance));
}

void ASTabLayoutImpl_setTextAppearanceResourcesWithId_(ASTabLayoutImpl *self, id objValue) {
  ASTabLayoutImpl_setValueOnBadgeDrawableWithId_withASTabLayoutImpl_ValueSetter_(self, objValue, JreLoadStatic(ASTabLayoutImpl_$Lambda$11, instance));
}

void ASTabLayoutImpl_applyTabContentInsetStartWithId_(ASTabLayoutImpl *self, id objValue) {
  [((ADMTabLayout *) nil_chk(self->tabLayout_)) setContentInsetStartWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASTabLayoutImpl_applyTabBackgroundWithADMTabLayout_Tab_withId_(ASTabLayoutImpl *self, ADMTabLayout_Tab *tab, id objValue) {
  [((ADMTabLayout_TabView *) nil_chk(((ADMTabLayout_Tab *) nil_chk(tab))->view_)) setBaseBackgroundDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
}

void ASTabLayoutImpl_applyRequestedTabMinWidthWithId_(ASTabLayoutImpl *self, id objValue) {
  [((ADMTabLayout *) nil_chk(self->tabLayout_)) setRequestedTabMinWidthWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASTabLayoutImpl_applyRequestedTabMaxWidthWithId_(ASTabLayoutImpl *self, id objValue) {
  [((ADMTabLayout *) nil_chk(self->tabLayout_)) setRequestedTabMaxWidthWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

jint ASTabLayoutImpl_getTabPaddingBottom(ASTabLayoutImpl *self) {
  return [((ADMTabLayout *) nil_chk(self->tabLayout_)) getTabPaddingBottom];
}

jint ASTabLayoutImpl_getTabPaddingEnd(ASTabLayoutImpl *self) {
  return [((ADMTabLayout *) nil_chk(self->tabLayout_)) getTabPaddingEnd];
}

jint ASTabLayoutImpl_getTabPaddingTop(ASTabLayoutImpl *self) {
  return [((ADMTabLayout *) nil_chk(self->tabLayout_)) getTabPaddingTop];
}

jint ASTabLayoutImpl_getTabPaddingStart(ASTabLayoutImpl *self) {
  return [((ADMTabLayout *) nil_chk(self->tabLayout_)) getTabPaddingStart];
}

void ASTabLayoutImpl_applyTabPaddingBottomWithId_(ASTabLayoutImpl *self, id objValue) {
  [((ADMTabLayout *) nil_chk(self->tabLayout_)) setTabPaddingBottomWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASTabLayoutImpl_applyTabPaddingEndWithId_(ASTabLayoutImpl *self, id objValue) {
  [((ADMTabLayout *) nil_chk(self->tabLayout_)) setTabPaddingEndWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASTabLayoutImpl_applyTabPaddingTopWithId_(ASTabLayoutImpl *self, id objValue) {
  [((ADMTabLayout *) nil_chk(self->tabLayout_)) setTabPaddingTopWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASTabLayoutImpl_applyTabPaddingStartWithId_(ASTabLayoutImpl *self, id objValue) {
  [((ADMTabLayout *) nil_chk(self->tabLayout_)) setTabPaddingStartWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASTabLayoutImpl_applyModeAndGravity(ASTabLayoutImpl *self) {
  [((ADMTabLayout *) nil_chk(self->tabLayout_)) applyModeAndGravity];
}

void ASTabLayoutImpl_updateAllTabs(ASTabLayoutImpl *self) {
  [((ADMTabLayout *) nil_chk(self->tabLayout_)) updateAllTabs];
}

void ASTabLayoutImpl_applyTextAppearanceWithId_(ASTabLayoutImpl *self, id objValue) {
  [((ADMTabLayout *) nil_chk(self->tabLayout_)) setTabTextAppearanceWithNSString:(NSString *) cast_chk(objValue, [NSString class])];
}

id<ASIWidget> ASTabLayoutImpl_loadLazyWidgetsWithADMTabLayout_Tab_withASIWidget_(ASTabLayoutImpl *self, ADMTabLayout_Tab *tab, id<ASIWidget> layout) {
  id<ASIWidget> customView = [((id<ASIWidget>) nil_chk(layout)) loadLazyWidgetsWithASHasWidgets:(id<ASHasWidgets>) cast_check([((id<ASILifeCycleDecorator>) nil_chk(((id<ASILifeCycleDecorator>) cast_check(((ADMTabLayout_Tab *) nil_chk(tab))->view_, ASILifeCycleDecorator_class_())))) getWidget], ASHasWidgets_class_())];
  return customView;
}

void ASTabLayoutImpl_nativeCreateWithJavaUtilMap_(ASTabLayoutImpl *self, id<JavaUtilMap> params) {
  self->uiView_ = [self nativeHscrollViewCreate];
  [((ADMTabLayout *) nil_chk(self->tabLayout_)) initTabLayout];
}

void ASTabLayoutImpl_initThumbHeight(ASTabLayoutImpl *self) {
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTabLayoutImpl)

@implementation ASTabLayoutImpl_TabGravity

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASTabLayoutImpl_TabGravity_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASTabLayoutImpl;" };
  static const J2ObjcClassInfo _ASTabLayoutImpl_TabGravity = { "TabGravity", "com.ashera.tablayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASTabLayoutImpl_TabGravity;
}

@end

void ASTabLayoutImpl_TabGravity_init(ASTabLayoutImpl_TabGravity *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"fill" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"center" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"start" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
  }
}

ASTabLayoutImpl_TabGravity *new_ASTabLayoutImpl_TabGravity_init() {
  J2OBJC_NEW_IMPL(ASTabLayoutImpl_TabGravity, init)
}

ASTabLayoutImpl_TabGravity *create_ASTabLayoutImpl_TabGravity_init() {
  J2OBJC_CREATE_IMPL(ASTabLayoutImpl_TabGravity, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTabLayoutImpl_TabGravity)

@implementation ASTabLayoutImpl_TabIndicatorAnimationMode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASTabLayoutImpl_TabIndicatorAnimationMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASTabLayoutImpl;" };
  static const J2ObjcClassInfo _ASTabLayoutImpl_TabIndicatorAnimationMode = { "TabIndicatorAnimationMode", "com.ashera.tablayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASTabLayoutImpl_TabIndicatorAnimationMode;
}

@end

void ASTabLayoutImpl_TabIndicatorAnimationMode_init(ASTabLayoutImpl_TabIndicatorAnimationMode *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"elastic" withId:JavaLangInteger_valueOfWithInt_(ADMTabLayout_INDICATOR_ANIMATION_MODE_LINEAR)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"linear" withId:JavaLangInteger_valueOfWithInt_(ADMTabLayout_INDICATOR_ANIMATION_MODE_ELASTIC)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"fade" withId:JavaLangInteger_valueOfWithInt_(ADMTabLayout_INDICATOR_ANIMATION_MODE_FADE)];
  }
}

ASTabLayoutImpl_TabIndicatorAnimationMode *new_ASTabLayoutImpl_TabIndicatorAnimationMode_init() {
  J2OBJC_NEW_IMPL(ASTabLayoutImpl_TabIndicatorAnimationMode, init)
}

ASTabLayoutImpl_TabIndicatorAnimationMode *create_ASTabLayoutImpl_TabIndicatorAnimationMode_init() {
  J2OBJC_CREATE_IMPL(ASTabLayoutImpl_TabIndicatorAnimationMode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTabLayoutImpl_TabIndicatorAnimationMode)

@implementation ASTabLayoutImpl_TabIndicatorGravity

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASTabLayoutImpl_TabIndicatorGravity_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASTabLayoutImpl;" };
  static const J2ObjcClassInfo _ASTabLayoutImpl_TabIndicatorGravity = { "TabIndicatorGravity", "com.ashera.tablayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASTabLayoutImpl_TabIndicatorGravity;
}

@end

void ASTabLayoutImpl_TabIndicatorGravity_init(ASTabLayoutImpl_TabIndicatorGravity *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"bottom" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"center" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"top" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"stretch" withId:JavaLangInteger_valueOfWithInt_((jint) 0x3)];
  }
}

ASTabLayoutImpl_TabIndicatorGravity *new_ASTabLayoutImpl_TabIndicatorGravity_init() {
  J2OBJC_NEW_IMPL(ASTabLayoutImpl_TabIndicatorGravity, init)
}

ASTabLayoutImpl_TabIndicatorGravity *create_ASTabLayoutImpl_TabIndicatorGravity_init() {
  J2OBJC_CREATE_IMPL(ASTabLayoutImpl_TabIndicatorGravity, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTabLayoutImpl_TabIndicatorGravity)

@implementation ASTabLayoutImpl_TabMode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASTabLayoutImpl_TabMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASTabLayoutImpl;" };
  static const J2ObjcClassInfo _ASTabLayoutImpl_TabMode = { "TabMode", "com.ashera.tablayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASTabLayoutImpl_TabMode;
}

@end

void ASTabLayoutImpl_TabMode_init(ASTabLayoutImpl_TabMode *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"fixed" withId:JavaLangInteger_valueOfWithInt_(ADMTabLayout_MODE_FIXED)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"scrollable" withId:JavaLangInteger_valueOfWithInt_(ADMTabLayout_MODE_SCROLLABLE)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"auto" withId:JavaLangInteger_valueOfWithInt_(ADMTabLayout_MODE_AUTO)];
  }
}

ASTabLayoutImpl_TabMode *new_ASTabLayoutImpl_TabMode_init() {
  J2OBJC_NEW_IMPL(ASTabLayoutImpl_TabMode, init)
}

ASTabLayoutImpl_TabMode *create_ASTabLayoutImpl_TabMode_init() {
  J2OBJC_CREATE_IMPL(ASTabLayoutImpl_TabMode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTabLayoutImpl_TabMode)

@implementation ASTabLayoutImpl_TabLayoutExt

- (id<ASIWidget>)getWidget {
  return this$0_;
}

- (void)setMaxWidthWithInt:(jint)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(jint)height {
  mMaxHeight_ = height;
}

- (jint)getMaxWidth {
  return mMaxWidth_;
}

- (jint)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASTabLayoutImpl:(ASTabLayoutImpl *)outer$ {
  ASTabLayoutImpl_TabLayoutExt_initWithASTabLayoutImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  if (![self isOverlay]) {
    ASViewImpl_nativeMakeFrameForHorizontalScrollViewWithId_withInt_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b, (jint) ([self computeHorizontalScrollRange]));
  }
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  overlays_ = ASViewImpl_drawOverlayWithASIWidget_withJavaUtilList_(this$0_, overlays_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  if (![this$0_ isWidgetDisposed]) {
    ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
  }
}

- (ADView *)inflateViewWithNSString:(NSString *)layout {
  if (templates_ == nil) {
    templates_ = new_JavaUtilHashMap_init();
  }
  id<ASIWidget> template_ = [templates_ getWithId:layout];
  if (template_ == nil) {
    template_ = (id<ASIWidget>) cast_check([this$0_ quickConvertWithId:layout withNSString:@"template"], ASIWidget_class_());
    (void) [((id<JavaUtilMap>) nil_chk(templates_)) putWithId:layout withId:template_];
  }
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(template_)) loadLazyWidgetsWithASHasWidgets:this$0_];
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
}

- (void)remeasure {
  if ([this$0_ getFragment] != nil) {
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
}

- (void)removeFromParent {
  [((id<ASHasWidgets>) nil_chk([this$0_ getParent])) removeWithASIWidget:this$0_];
}

- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)appScreenLocation {
  *IOSIntArray_GetRef(nil_chk(appScreenLocation), 0) = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  *IOSIntArray_GetRef(appScreenLocation, 1) = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
}

- (void)getWindowVisibleDisplayFrameWithADRect:(ADRect *)displayFrame {
  ((ADRect *) nil_chk(displayFrame))->left_ = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->top_ = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->right_ = displayFrame->left_ + [self getWidth];
  displayFrame->bottom_ = displayFrame->top_ + [self getHeight];
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setMyAttributeWithNSString:(NSString *)name
                            withId:(id)value {
  if ([((NSString *) nil_chk(name)) isEqual:@"state0"]) {
    [self setState0WithId:value];
    return;
  }
  if ([name isEqual:@"state1"]) {
    [self setState1WithId:value];
    return;
  }
  if ([name isEqual:@"state2"]) {
    [self setState2WithId:value];
    return;
  }
  if ([name isEqual:@"state3"]) {
    [self setState3WithId:value];
    return;
  }
  if ([name isEqual:@"state4"]) {
    [self setState4WithId:value];
    return;
  }
  [this$0_ setAttributeWithNSString:name withId:value withBoolean:!([value isKindOfClass:[NSString class]])];
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)setState0WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 0, value);
}

- (void)setState1WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 1, value);
}

- (void)setState2WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 2, value);
}

- (void)setState3WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 3, value);
}

- (void)setState4WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 4, value);
}

- (void)state0 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 0);
}

- (void)state1 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 1);
}

- (void)state2 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 2);
}

- (void)state3 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 3);
}

- (void)state4 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 4);
}

- (void)stateYes {
  ASViewImpl_stateYesWithASIWidget_(this$0_);
}

- (void)stateNo {
  ASViewImpl_stateNoWithASIWidget_(this$0_);
}

- (void)endViewTransitionWithADView:(ADView *)view {
  [super endViewTransitionWithADView:view];
  [this$0_ runBufferedRunnables];
}

- (void)__javaClone:(ASTabLayoutImpl_TabLayoutExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 36, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWidget);
  methods[1].selector = @selector(setMaxWidthWithInt:);
  methods[2].selector = @selector(setMaxHeightWithInt:);
  methods[3].selector = @selector(getMaxWidth);
  methods[4].selector = @selector(getMaxHeight);
  methods[5].selector = @selector(initWithASTabLayoutImpl:);
  methods[6].selector = @selector(onMeasureWithInt:withInt:);
  methods[7].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[8].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[9].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[10].selector = @selector(newInstanceWithASIWidget:);
  methods[11].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[12].selector = @selector(getMethods);
  methods[13].selector = @selector(initialized);
  methods[14].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[15].selector = @selector(drawableStateChanged);
  methods[16].selector = @selector(inflateViewWithNSString:);
  methods[17].selector = @selector(remeasure);
  methods[18].selector = @selector(removeFromParent);
  methods[19].selector = @selector(getLocationOnScreenWithIntArray:);
  methods[20].selector = @selector(getWindowVisibleDisplayFrameWithADRect:);
  methods[21].selector = @selector(offsetTopAndBottomWithInt:);
  methods[22].selector = @selector(offsetLeftAndRightWithInt:);
  methods[23].selector = @selector(setMyAttributeWithNSString:withId:);
  methods[24].selector = @selector(setVisibilityWithInt:);
  methods[25].selector = @selector(setState0WithId:);
  methods[26].selector = @selector(setState1WithId:);
  methods[27].selector = @selector(setState2WithId:);
  methods[28].selector = @selector(setState3WithId:);
  methods[29].selector = @selector(setState4WithId:);
  methods[30].selector = @selector(state0);
  methods[31].selector = @selector(state1);
  methods[32].selector = @selector(state2);
  methods[33].selector = @selector(state3);
  methods[34].selector = @selector(state4);
  methods[35].selector = @selector(stateYes);
  methods[36].selector = @selector(stateNo);
  methods[37].selector = @selector(endViewTransitionWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASTabLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "overlays_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 37, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "templates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 38, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASTabLayoutImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "inflateView", "LNSString;", "getLocationOnScreen", "[I", "getWindowVisibleDisplayFrame", "LADRect;", "offsetTopAndBottom", "offsetLeftAndRight", "setMyAttribute", "LNSString;LNSObject;", "setVisibility", "setState0", "LNSObject;", "setState1", "setState2", "setState3", "setState4", "endViewTransition", "LADView;", "Ljava/util/List<Lcom/ashera/widget/IWidget;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASTabLayoutImpl_TabLayoutExt = { "TabLayoutExt", "com.ashera.tablayout", ptrTable, methods, fields, 7, 0x1, 38, 7, 3, -1, -1, -1, -1 };
  return &_ASTabLayoutImpl_TabLayoutExt;
}

@end

void ASTabLayoutImpl_TabLayoutExt_initWithASTabLayoutImpl_(ASTabLayoutImpl_TabLayoutExt *self, ASTabLayoutImpl *outer$) {
  self->this$0_ = outer$;
  ADMTabLayout_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASTabLayoutImpl_TabLayoutExt *new_ASTabLayoutImpl_TabLayoutExt_initWithASTabLayoutImpl_(ASTabLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASTabLayoutImpl_TabLayoutExt, initWithASTabLayoutImpl_, outer$)
}

ASTabLayoutImpl_TabLayoutExt *create_ASTabLayoutImpl_TabLayoutExt_initWithASTabLayoutImpl_(ASTabLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASTabLayoutImpl_TabLayoutExt, initWithASTabLayoutImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTabLayoutImpl_TabLayoutExt)

@implementation ASTabLayoutImpl_ValueSetter

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setValueOnBadgeDrawableWithADXBadgeDrawable:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "setValueOnBadgeDrawable", "LADXBadgeDrawable;LNSObject;", "LASTabLayoutImpl;" };
  static const J2ObjcClassInfo _ASTabLayoutImpl_ValueSetter = { "ValueSetter", "com.ashera.tablayout", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ASTabLayoutImpl_ValueSetter;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ASTabLayoutImpl_ValueSetter)

@implementation ASTabLayoutImpl_OnTabSelectedListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASTabLayoutImpl_OnTabSelectedListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASTabLayoutImpl_OnTabSelectedListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onTabSelectedWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab {
  if (action_ == nil || [action_ isEqual:@"onTabSelected"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onTabSelected"];
    id<JavaUtilMap> obj = [self getOnTabSelectedEventObjWithADMTabLayout_Tab:tab];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ tab } count:1 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnTabSelectedEventObjWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"tabselected"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASTabLayoutImpl_addEventInfoWithJavaUtilMap_withADMTabLayout_Tab_withASIFragment_(obj, tab, [((id<ASIWidget>) nil_chk(w_)) getFragment]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onTabSelected" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

- (void)onTabUnselectedWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab {
  if (action_ == nil || [action_ isEqual:@"onTabUnselected"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onTabUnselected"];
    id<JavaUtilMap> obj = [self getOnTabUnselectedEventObjWithADMTabLayout_Tab:tab];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ tab } count:1 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnTabUnselectedEventObjWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"tabunselected"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASTabLayoutImpl_addEventInfoWithJavaUtilMap_withADMTabLayout_Tab_withASIFragment_(obj, tab, [((id<ASIWidget>) nil_chk(w_)) getFragment]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onTabUnselected" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

- (void)onTabReselectedWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab {
  if (action_ == nil || [action_ isEqual:@"onTabReselected"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onTabReselected"];
    id<JavaUtilMap> obj = [self getOnTabReselectedEventObjWithADMTabLayout_Tab:tab];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ tab } count:1 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnTabReselectedEventObjWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"tabreselected"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASTabLayoutImpl_addEventInfoWithJavaUtilMap_withADMTabLayout_Tab_withASIFragment_(obj, tab, [((id<ASIWidget>) nil_chk(w_)) getFragment]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onTabReselected" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 7, 3, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 8, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 9, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onTabSelectedWithADMTabLayout_Tab:);
  methods[4].selector = @selector(getOnTabSelectedEventObjWithADMTabLayout_Tab:);
  methods[5].selector = @selector(onTabUnselectedWithADMTabLayout_Tab:);
  methods[6].selector = @selector(getOnTabUnselectedEventObjWithADMTabLayout_Tab:);
  methods[7].selector = @selector(onTabReselectedWithADMTabLayout_Tab:);
  methods[8].selector = @selector(getOnTabReselectedEventObjWithADMTabLayout_Tab:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onTabSelected", "LADMTabLayout_Tab;", "getOnTabSelectedEventObj", "(Lcom/google/android/material/tabs/TabLayout$Tab;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "onTabUnselected", "getOnTabUnselectedEventObj", "onTabReselected", "getOnTabReselectedEventObj", "LASTabLayoutImpl;" };
  static const J2ObjcClassInfo _ASTabLayoutImpl_OnTabSelectedListener = { "OnTabSelectedListener", "com.ashera.tablayout", ptrTable, methods, fields, 7, 0xa, 9, 4, 10, -1, -1, -1, -1 };
  return &_ASTabLayoutImpl_OnTabSelectedListener;
}

@end

void ASTabLayoutImpl_OnTabSelectedListener_initWithASIWidget_withNSString_(ASTabLayoutImpl_OnTabSelectedListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASTabLayoutImpl_OnTabSelectedListener *new_ASTabLayoutImpl_OnTabSelectedListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASTabLayoutImpl_OnTabSelectedListener, initWithASIWidget_withNSString_, w, strValue)
}

ASTabLayoutImpl_OnTabSelectedListener *create_ASTabLayoutImpl_OnTabSelectedListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASTabLayoutImpl_OnTabSelectedListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASTabLayoutImpl_OnTabSelectedListener_initWithASIWidget_withNSString_withNSString_(ASTabLayoutImpl_OnTabSelectedListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASTabLayoutImpl_OnTabSelectedListener *new_ASTabLayoutImpl_OnTabSelectedListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASTabLayoutImpl_OnTabSelectedListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASTabLayoutImpl_OnTabSelectedListener *create_ASTabLayoutImpl_OnTabSelectedListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASTabLayoutImpl_OnTabSelectedListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTabLayoutImpl_OnTabSelectedListener)

@implementation ASTabLayoutImpl_TabLayoutCommandBuilder

- (instancetype)initWithASTabLayoutImpl:(ASTabLayoutImpl *)outer$ {
  ASTabLayoutImpl_TabLayoutCommandBuilder_initWithASTabLayoutImpl_(self, outer$);
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
  [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setTabBackgroundWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tabBackground"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setTabContentStartWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tabContentStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setTabGravityWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tabGravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)tryGetTabIndicatorAnimationMode {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tabIndicatorAnimationMode"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getTabIndicatorAnimationMode {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tabIndicatorAnimationMode"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setTabIndicatorAnimationModeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tabIndicatorAnimationMode"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setTabIndicatorFullWidthWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tabIndicatorFullWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setTabIndicatorGravityWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tabIndicatorGravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setTabIndicatorHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tabIndicatorHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setTabInlineLabelWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tabInlineLabel"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setTabMaxWidthWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tabMaxWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setTabMinWidthWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tabMinWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setTabModeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tabMode"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setTabPaddingWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tabPadding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setTabPaddingBottomWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tabPaddingBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setTabPaddingEndWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tabPaddingEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setTabPaddingStartWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tabPaddingStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setTabPaddingTopWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tabPaddingTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)removeTabWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"removeTab"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)removeTabAtWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"removeTabAt"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)removeAllTabs {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"removeAllTabs"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setOnTabSelectedWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onTabSelected"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setOnTabUnselectedWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onTabUnselected"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setOnTabReselectedWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onTabReselected"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)addTabWithNSString:(NSString *)text
                                                   withNSString:(NSString *)icon
                                                   withNSString:(NSString *)id_
                                                   withNSString:(NSString *)layout
                                                   withNSString:(NSString *)customTabTitleId
                                                   withNSString:(NSString *)customTabiconId
                                                   withNSString:(NSString *)where {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"addTab"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  id<JavaUtilMap> wrapper = new_JavaUtilHashMap_init();
  (void) [wrapper putWithId:@"text" withId:text];
  (void) [wrapper putWithId:@"icon" withId:icon];
  (void) [wrapper putWithId:@"id" withId:id_];
  (void) [wrapper putWithId:@"layout" withId:layout];
  (void) [wrapper putWithId:@"customTabTitleId" withId:customTabTitleId];
  (void) [wrapper putWithId:@"customTabiconId" withId:customTabiconId];
  (void) [wrapper putWithId:@"where" withId:where];
  (void) [attrs putWithId:@"value" withId:wrapper];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setTabIconTintWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tabIconTint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)selectTabWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"selectTab"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)updateTabTextsWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"updateTabTexts"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setupWithViewPagerWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"setupWithViewPager"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setTabIndicatorColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tabIndicatorColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setTabSelectedTextColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tabSelectedTextColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setTabTextColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tabTextColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setTabTextAppearanceWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tabTextAppearance"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setBadgeNumbersWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"badgeNumbers"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setBadgeAlphasWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"badgeAlphas"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setBadgeMaxCharacterCountsWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"badgeMaxCharacterCounts"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setBadgeGravitiesWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"badgeGravities"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setBadgeHorizontalOffsetsWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"badgeHorizontalOffsets"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setBadgeVerticalOffsetsWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"badgeVerticalOffsets"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setBadgeIsVisiblesWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"badgeIsVisibles"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setBadgeBackgroundColorsWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"badgeBackgroundColors"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setBadgeTextColorsWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"badgeTextColors"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setBadgeTextAppearanceResourcesWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"badgeTextAppearanceResources"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setMenuItemIdsWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"menuItemIds"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)tryGetScrollX {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"scrollX"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getScrollX {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"scrollX"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASTabLayoutImpl_TabLayoutCommandBuilder *)setScrollXWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"scrollX"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 12, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 13, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 14, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 15, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 16, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 17, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 18, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 19, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 20, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 23, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 24, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 25, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 28, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 29, 22, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 30, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 31, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 32, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 33, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 34, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 35, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 36, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 37, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 38, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 39, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 40, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 41, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 42, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 43, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 44, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 45, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 46, 4, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTabLayoutImpl_TabLayoutCommandBuilder;", 0x1, 47, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASTabLayoutImpl:);
  methods[1].selector = @selector(executeWithBoolean:);
  methods[2].selector = @selector(setTabBackgroundWithNSString:);
  methods[3].selector = @selector(setTabContentStartWithNSString:);
  methods[4].selector = @selector(setTabGravityWithNSString:);
  methods[5].selector = @selector(tryGetTabIndicatorAnimationMode);
  methods[6].selector = @selector(getTabIndicatorAnimationMode);
  methods[7].selector = @selector(setTabIndicatorAnimationModeWithNSString:);
  methods[8].selector = @selector(setTabIndicatorFullWidthWithBoolean:);
  methods[9].selector = @selector(setTabIndicatorGravityWithNSString:);
  methods[10].selector = @selector(setTabIndicatorHeightWithNSString:);
  methods[11].selector = @selector(setTabInlineLabelWithBoolean:);
  methods[12].selector = @selector(setTabMaxWidthWithNSString:);
  methods[13].selector = @selector(setTabMinWidthWithNSString:);
  methods[14].selector = @selector(setTabModeWithNSString:);
  methods[15].selector = @selector(setTabPaddingWithNSString:);
  methods[16].selector = @selector(setTabPaddingBottomWithNSString:);
  methods[17].selector = @selector(setTabPaddingEndWithNSString:);
  methods[18].selector = @selector(setTabPaddingStartWithNSString:);
  methods[19].selector = @selector(setTabPaddingTopWithNSString:);
  methods[20].selector = @selector(removeTabWithNSString:);
  methods[21].selector = @selector(removeTabAtWithInt:);
  methods[22].selector = @selector(removeAllTabs);
  methods[23].selector = @selector(setOnTabSelectedWithNSString:);
  methods[24].selector = @selector(setOnTabUnselectedWithNSString:);
  methods[25].selector = @selector(setOnTabReselectedWithNSString:);
  methods[26].selector = @selector(addTabWithNSString:withNSString:withNSString:withNSString:withNSString:withNSString:withNSString:);
  methods[27].selector = @selector(setTabIconTintWithNSString:);
  methods[28].selector = @selector(selectTabWithInt:);
  methods[29].selector = @selector(updateTabTextsWithNSString:);
  methods[30].selector = @selector(setupWithViewPagerWithNSString:);
  methods[31].selector = @selector(setTabIndicatorColorWithNSString:);
  methods[32].selector = @selector(setTabSelectedTextColorWithNSString:);
  methods[33].selector = @selector(setTabTextColorWithNSString:);
  methods[34].selector = @selector(setTabTextAppearanceWithNSString:);
  methods[35].selector = @selector(setBadgeNumbersWithNSString:);
  methods[36].selector = @selector(setBadgeAlphasWithNSString:);
  methods[37].selector = @selector(setBadgeMaxCharacterCountsWithNSString:);
  methods[38].selector = @selector(setBadgeGravitiesWithNSString:);
  methods[39].selector = @selector(setBadgeHorizontalOffsetsWithNSString:);
  methods[40].selector = @selector(setBadgeVerticalOffsetsWithNSString:);
  methods[41].selector = @selector(setBadgeIsVisiblesWithNSString:);
  methods[42].selector = @selector(setBadgeBackgroundColorsWithNSString:);
  methods[43].selector = @selector(setBadgeTextColorsWithNSString:);
  methods[44].selector = @selector(setBadgeTextAppearanceResourcesWithNSString:);
  methods[45].selector = @selector(setMenuItemIdsWithNSString:);
  methods[46].selector = @selector(tryGetScrollX);
  methods[47].selector = @selector(getScrollX);
  methods[48].selector = @selector(setScrollXWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASTabLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASTabLayoutImpl;", "execute", "Z", "setTabBackground", "LNSString;", "setTabContentStart", "setTabGravity", "setTabIndicatorAnimationMode", "setTabIndicatorFullWidth", "setTabIndicatorGravity", "setTabIndicatorHeight", "setTabInlineLabel", "setTabMaxWidth", "setTabMinWidth", "setTabMode", "setTabPadding", "setTabPaddingBottom", "setTabPaddingEnd", "setTabPaddingStart", "setTabPaddingTop", "removeTab", "removeTabAt", "I", "setOnTabSelected", "setOnTabUnselected", "setOnTabReselected", "addTab", "LNSString;LNSString;LNSString;LNSString;LNSString;LNSString;LNSString;", "setTabIconTint", "selectTab", "updateTabTexts", "setupWithViewPager", "setTabIndicatorColor", "setTabSelectedTextColor", "setTabTextColor", "setTabTextAppearance", "setBadgeNumbers", "setBadgeAlphas", "setBadgeMaxCharacterCounts", "setBadgeGravities", "setBadgeHorizontalOffsets", "setBadgeVerticalOffsets", "setBadgeIsVisibles", "setBadgeBackgroundColors", "setBadgeTextColors", "setBadgeTextAppearanceResources", "setMenuItemIds", "setScrollX", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandBuilder<Lcom/ashera/tablayout/TabLayoutImpl$TabLayoutCommandBuilder;>;" };
  static const J2ObjcClassInfo _ASTabLayoutImpl_TabLayoutCommandBuilder = { "TabLayoutCommandBuilder", "com.ashera.tablayout", ptrTable, methods, fields, 7, 0x1, 49, 1, 0, -1, -1, 48, -1 };
  return &_ASTabLayoutImpl_TabLayoutCommandBuilder;
}

@end

void ASTabLayoutImpl_TabLayoutCommandBuilder_initWithASTabLayoutImpl_(ASTabLayoutImpl_TabLayoutCommandBuilder *self, ASTabLayoutImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupCommandBuilder_init(self);
}

ASTabLayoutImpl_TabLayoutCommandBuilder *new_ASTabLayoutImpl_TabLayoutCommandBuilder_initWithASTabLayoutImpl_(ASTabLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASTabLayoutImpl_TabLayoutCommandBuilder, initWithASTabLayoutImpl_, outer$)
}

ASTabLayoutImpl_TabLayoutCommandBuilder *create_ASTabLayoutImpl_TabLayoutCommandBuilder_initWithASTabLayoutImpl_(ASTabLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASTabLayoutImpl_TabLayoutCommandBuilder, initWithASTabLayoutImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTabLayoutImpl_TabLayoutCommandBuilder)

@implementation ASTabLayoutImpl_TabLayoutBean

- (instancetype)initWithASTabLayoutImpl:(ASTabLayoutImpl *)outer$ {
  ASTabLayoutImpl_TabLayoutBean_initWithASTabLayoutImpl_(self, outer$);
  return self;
}

- (void)setTabBackgroundWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTabBackgroundWithNSString:value])) executeWithBoolean:true];
}

- (void)setTabContentStartWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTabContentStartWithNSString:value])) executeWithBoolean:true];
}

- (void)setTabGravityWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTabGravityWithNSString:value])) executeWithBoolean:true];
}

- (id)getTabIndicatorAnimationMode {
  return [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetTabIndicatorAnimationMode])) executeWithBoolean:false])) getTabIndicatorAnimationMode];
}

- (void)setTabIndicatorAnimationModeWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTabIndicatorAnimationModeWithNSString:value])) executeWithBoolean:true];
}

- (void)setTabIndicatorFullWidthWithBoolean:(jboolean)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTabIndicatorFullWidthWithBoolean:value])) executeWithBoolean:true];
}

- (void)setTabIndicatorGravityWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTabIndicatorGravityWithNSString:value])) executeWithBoolean:true];
}

- (void)setTabIndicatorHeightWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTabIndicatorHeightWithNSString:value])) executeWithBoolean:true];
}

- (void)setTabInlineLabelWithBoolean:(jboolean)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTabInlineLabelWithBoolean:value])) executeWithBoolean:true];
}

- (void)setTabMaxWidthWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTabMaxWidthWithNSString:value])) executeWithBoolean:true];
}

- (void)setTabMinWidthWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTabMinWidthWithNSString:value])) executeWithBoolean:true];
}

- (void)setTabModeWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTabModeWithNSString:value])) executeWithBoolean:true];
}

- (void)setTabPaddingWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTabPaddingWithNSString:value])) executeWithBoolean:true];
}

- (void)setTabPaddingBottomWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTabPaddingBottomWithNSString:value])) executeWithBoolean:true];
}

- (void)setTabPaddingEndWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTabPaddingEndWithNSString:value])) executeWithBoolean:true];
}

- (void)setTabPaddingStartWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTabPaddingStartWithNSString:value])) executeWithBoolean:true];
}

- (void)setTabPaddingTopWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTabPaddingTopWithNSString:value])) executeWithBoolean:true];
}

- (void)removeTabWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) removeTabWithNSString:value])) executeWithBoolean:true];
}

- (void)removeTabAtWithInt:(jint)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) removeTabAtWithInt:value])) executeWithBoolean:true];
}

- (void)removeAllTabs {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) removeAllTabs])) executeWithBoolean:true];
}

- (void)setOnTabSelectedWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnTabSelectedWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnTabUnselectedWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnTabUnselectedWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnTabReselectedWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnTabReselectedWithNSString:value])) executeWithBoolean:true];
}

- (void)addTabWithNSString:(NSString *)text
              withNSString:(NSString *)icon
              withNSString:(NSString *)id_
              withNSString:(NSString *)layout
              withNSString:(NSString *)customTabTitleId
              withNSString:(NSString *)customTabiconId
              withNSString:(NSString *)where {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) addTabWithNSString:text withNSString:icon withNSString:id_ withNSString:layout withNSString:customTabTitleId withNSString:customTabiconId withNSString:where])) executeWithBoolean:true];
}

- (void)setTabIconTintWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTabIconTintWithNSString:value])) executeWithBoolean:true];
}

- (void)selectTabWithInt:(jint)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) selectTabWithInt:value])) executeWithBoolean:true];
}

- (void)updateTabTextsWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) updateTabTextsWithNSString:value])) executeWithBoolean:true];
}

- (void)setupWithViewPagerWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setupWithViewPagerWithNSString:value])) executeWithBoolean:true];
}

- (void)setTabIndicatorColorWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTabIndicatorColorWithNSString:value])) executeWithBoolean:true];
}

- (void)setTabSelectedTextColorWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTabSelectedTextColorWithNSString:value])) executeWithBoolean:true];
}

- (void)setTabTextColorWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTabTextColorWithNSString:value])) executeWithBoolean:true];
}

- (void)setTabTextAppearanceWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTabTextAppearanceWithNSString:value])) executeWithBoolean:true];
}

- (void)setBadgeNumbersWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setBadgeNumbersWithNSString:value])) executeWithBoolean:true];
}

- (void)setBadgeAlphasWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setBadgeAlphasWithNSString:value])) executeWithBoolean:true];
}

- (void)setBadgeMaxCharacterCountsWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setBadgeMaxCharacterCountsWithNSString:value])) executeWithBoolean:true];
}

- (void)setBadgeGravitiesWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setBadgeGravitiesWithNSString:value])) executeWithBoolean:true];
}

- (void)setBadgeHorizontalOffsetsWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setBadgeHorizontalOffsetsWithNSString:value])) executeWithBoolean:true];
}

- (void)setBadgeVerticalOffsetsWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setBadgeVerticalOffsetsWithNSString:value])) executeWithBoolean:true];
}

- (void)setBadgeIsVisiblesWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setBadgeIsVisiblesWithNSString:value])) executeWithBoolean:true];
}

- (void)setBadgeBackgroundColorsWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setBadgeBackgroundColorsWithNSString:value])) executeWithBoolean:true];
}

- (void)setBadgeTextColorsWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setBadgeTextColorsWithNSString:value])) executeWithBoolean:true];
}

- (void)setBadgeTextAppearanceResourcesWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setBadgeTextAppearanceResourcesWithNSString:value])) executeWithBoolean:true];
}

- (void)setMenuItemIdsWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMenuItemIdsWithNSString:value])) executeWithBoolean:true];
}

- (id)getScrollX {
  return [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetScrollX])) executeWithBoolean:false])) getScrollX];
}

- (void)setScrollXWithNSString:(NSString *)value {
  (void) [((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([((ASTabLayoutImpl_TabLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setScrollXWithNSString:value])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASTabLayoutImpl:);
  methods[1].selector = @selector(setTabBackgroundWithNSString:);
  methods[2].selector = @selector(setTabContentStartWithNSString:);
  methods[3].selector = @selector(setTabGravityWithNSString:);
  methods[4].selector = @selector(getTabIndicatorAnimationMode);
  methods[5].selector = @selector(setTabIndicatorAnimationModeWithNSString:);
  methods[6].selector = @selector(setTabIndicatorFullWidthWithBoolean:);
  methods[7].selector = @selector(setTabIndicatorGravityWithNSString:);
  methods[8].selector = @selector(setTabIndicatorHeightWithNSString:);
  methods[9].selector = @selector(setTabInlineLabelWithBoolean:);
  methods[10].selector = @selector(setTabMaxWidthWithNSString:);
  methods[11].selector = @selector(setTabMinWidthWithNSString:);
  methods[12].selector = @selector(setTabModeWithNSString:);
  methods[13].selector = @selector(setTabPaddingWithNSString:);
  methods[14].selector = @selector(setTabPaddingBottomWithNSString:);
  methods[15].selector = @selector(setTabPaddingEndWithNSString:);
  methods[16].selector = @selector(setTabPaddingStartWithNSString:);
  methods[17].selector = @selector(setTabPaddingTopWithNSString:);
  methods[18].selector = @selector(removeTabWithNSString:);
  methods[19].selector = @selector(removeTabAtWithInt:);
  methods[20].selector = @selector(removeAllTabs);
  methods[21].selector = @selector(setOnTabSelectedWithNSString:);
  methods[22].selector = @selector(setOnTabUnselectedWithNSString:);
  methods[23].selector = @selector(setOnTabReselectedWithNSString:);
  methods[24].selector = @selector(addTabWithNSString:withNSString:withNSString:withNSString:withNSString:withNSString:withNSString:);
  methods[25].selector = @selector(setTabIconTintWithNSString:);
  methods[26].selector = @selector(selectTabWithInt:);
  methods[27].selector = @selector(updateTabTextsWithNSString:);
  methods[28].selector = @selector(setupWithViewPagerWithNSString:);
  methods[29].selector = @selector(setTabIndicatorColorWithNSString:);
  methods[30].selector = @selector(setTabSelectedTextColorWithNSString:);
  methods[31].selector = @selector(setTabTextColorWithNSString:);
  methods[32].selector = @selector(setTabTextAppearanceWithNSString:);
  methods[33].selector = @selector(setBadgeNumbersWithNSString:);
  methods[34].selector = @selector(setBadgeAlphasWithNSString:);
  methods[35].selector = @selector(setBadgeMaxCharacterCountsWithNSString:);
  methods[36].selector = @selector(setBadgeGravitiesWithNSString:);
  methods[37].selector = @selector(setBadgeHorizontalOffsetsWithNSString:);
  methods[38].selector = @selector(setBadgeVerticalOffsetsWithNSString:);
  methods[39].selector = @selector(setBadgeIsVisiblesWithNSString:);
  methods[40].selector = @selector(setBadgeBackgroundColorsWithNSString:);
  methods[41].selector = @selector(setBadgeTextColorsWithNSString:);
  methods[42].selector = @selector(setBadgeTextAppearanceResourcesWithNSString:);
  methods[43].selector = @selector(setMenuItemIdsWithNSString:);
  methods[44].selector = @selector(getScrollX);
  methods[45].selector = @selector(setScrollXWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASTabLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASTabLayoutImpl;", "setTabBackground", "LNSString;", "setTabContentStart", "setTabGravity", "setTabIndicatorAnimationMode", "setTabIndicatorFullWidth", "Z", "setTabIndicatorGravity", "setTabIndicatorHeight", "setTabInlineLabel", "setTabMaxWidth", "setTabMinWidth", "setTabMode", "setTabPadding", "setTabPaddingBottom", "setTabPaddingEnd", "setTabPaddingStart", "setTabPaddingTop", "removeTab", "removeTabAt", "I", "setOnTabSelected", "setOnTabUnselected", "setOnTabReselected", "addTab", "LNSString;LNSString;LNSString;LNSString;LNSString;LNSString;LNSString;", "setTabIconTint", "selectTab", "updateTabTexts", "setupWithViewPager", "setTabIndicatorColor", "setTabSelectedTextColor", "setTabTextColor", "setTabTextAppearance", "setBadgeNumbers", "setBadgeAlphas", "setBadgeMaxCharacterCounts", "setBadgeGravities", "setBadgeHorizontalOffsets", "setBadgeVerticalOffsets", "setBadgeIsVisibles", "setBadgeBackgroundColors", "setBadgeTextColors", "setBadgeTextAppearanceResources", "setMenuItemIds", "setScrollX" };
  static const J2ObjcClassInfo _ASTabLayoutImpl_TabLayoutBean = { "TabLayoutBean", "com.ashera.tablayout", ptrTable, methods, fields, 7, 0x1, 46, 1, 0, -1, -1, -1, -1 };
  return &_ASTabLayoutImpl_TabLayoutBean;
}

@end

void ASTabLayoutImpl_TabLayoutBean_initWithASTabLayoutImpl_(ASTabLayoutImpl_TabLayoutBean *self, ASTabLayoutImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupBean_initWithASIWidget_(self, outer$);
}

ASTabLayoutImpl_TabLayoutBean *new_ASTabLayoutImpl_TabLayoutBean_initWithASTabLayoutImpl_(ASTabLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASTabLayoutImpl_TabLayoutBean, initWithASTabLayoutImpl_, outer$)
}

ASTabLayoutImpl_TabLayoutBean *create_ASTabLayoutImpl_TabLayoutBean_initWithASTabLayoutImpl_(ASTabLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASTabLayoutImpl_TabLayoutBean, initWithASTabLayoutImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTabLayoutImpl_TabLayoutBean)

@implementation ASTabLayoutImpl_TabLayoutParamsBean

- (instancetype)initWithASTabLayoutImpl:(ASTabLayoutImpl *)outer$ {
  ASTabLayoutImpl_TabLayoutParamsBean_initWithASTabLayoutImpl_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASTabLayoutImpl:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASTabLayoutImpl;" };
  static const J2ObjcClassInfo _ASTabLayoutImpl_TabLayoutParamsBean = { "TabLayoutParamsBean", "com.ashera.tablayout", ptrTable, methods, NULL, 7, 0x1, 1, 0, 0, -1, -1, -1, -1 };
  return &_ASTabLayoutImpl_TabLayoutParamsBean;
}

@end

void ASTabLayoutImpl_TabLayoutParamsBean_initWithASTabLayoutImpl_(ASTabLayoutImpl_TabLayoutParamsBean *self, ASTabLayoutImpl *outer$) {
  ASViewGroupImpl_ViewGroupParamsBean_init(self);
}

ASTabLayoutImpl_TabLayoutParamsBean *new_ASTabLayoutImpl_TabLayoutParamsBean_initWithASTabLayoutImpl_(ASTabLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASTabLayoutImpl_TabLayoutParamsBean, initWithASTabLayoutImpl_, outer$)
}

ASTabLayoutImpl_TabLayoutParamsBean *create_ASTabLayoutImpl_TabLayoutParamsBean_initWithASTabLayoutImpl_(ASTabLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASTabLayoutImpl_TabLayoutParamsBean, initWithASTabLayoutImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTabLayoutImpl_TabLayoutParamsBean)

@implementation ASTabLayoutImpl_TabLayoutCommandParamsBuilder

- (instancetype)initWithASTabLayoutImpl:(ASTabLayoutImpl *)outer$ {
  ASTabLayoutImpl_TabLayoutCommandParamsBuilder_initWithASTabLayoutImpl_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASTabLayoutImpl:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASTabLayoutImpl;", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandParamsBuilder<Lcom/ashera/tablayout/TabLayoutImpl$TabLayoutCommandParamsBuilder;>;" };
  static const J2ObjcClassInfo _ASTabLayoutImpl_TabLayoutCommandParamsBuilder = { "TabLayoutCommandParamsBuilder", "com.ashera.tablayout", ptrTable, methods, NULL, 7, 0x1, 1, 0, 0, -1, -1, 1, -1 };
  return &_ASTabLayoutImpl_TabLayoutCommandParamsBuilder;
}

@end

void ASTabLayoutImpl_TabLayoutCommandParamsBuilder_initWithASTabLayoutImpl_(ASTabLayoutImpl_TabLayoutCommandParamsBuilder *self, ASTabLayoutImpl *outer$) {
  ASViewGroupImpl_ViewGroupCommandParamsBuilder_init(self);
}

ASTabLayoutImpl_TabLayoutCommandParamsBuilder *new_ASTabLayoutImpl_TabLayoutCommandParamsBuilder_initWithASTabLayoutImpl_(ASTabLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASTabLayoutImpl_TabLayoutCommandParamsBuilder, initWithASTabLayoutImpl_, outer$)
}

ASTabLayoutImpl_TabLayoutCommandParamsBuilder *create_ASTabLayoutImpl_TabLayoutCommandParamsBuilder_initWithASTabLayoutImpl_(ASTabLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASTabLayoutImpl_TabLayoutCommandParamsBuilder, initWithASTabLayoutImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTabLayoutImpl_TabLayoutCommandParamsBuilder)

@implementation ASTabLayoutImpl_$Lambda$1

- (void)run {
  ASViewGroupImpl_nativeRemoveViewWithASIWidget_(val$widget_);
}

@end

void ASTabLayoutImpl_$Lambda$1_initWithASIWidget_(ASTabLayoutImpl_$Lambda$1 *self, id<ASIWidget> capture$0) {
  self->val$widget_ = capture$0;
  NSObject_init(self);
}

ASTabLayoutImpl_$Lambda$1 *new_ASTabLayoutImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_NEW_IMPL(ASTabLayoutImpl_$Lambda$1, initWithASIWidget_, capture$0)
}

ASTabLayoutImpl_$Lambda$1 *create_ASTabLayoutImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_CREATE_IMPL(ASTabLayoutImpl_$Lambda$1, initWithASIWidget_, capture$0)
}

J2OBJC_INITIALIZED_DEFN(ASTabLayoutImpl_$Lambda$2)

@implementation ASTabLayoutImpl_$Lambda$2

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value {
  [((ADXBadgeDrawable *) nil_chk(badge)) setBackgroundColorWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(value, [JavaLangInteger class]))) intValue]];
}

+ (void)initialize {
  if (self == [ASTabLayoutImpl_$Lambda$2 class]) {
    ASTabLayoutImpl_$Lambda$2_instance = new_ASTabLayoutImpl_$Lambda$2_init();
    J2OBJC_SET_INITIALIZED(ASTabLayoutImpl_$Lambda$2)
  }
}

@end

void ASTabLayoutImpl_$Lambda$2_init(ASTabLayoutImpl_$Lambda$2 *self) {
  NSObject_init(self);
}

ASTabLayoutImpl_$Lambda$2 *new_ASTabLayoutImpl_$Lambda$2_init() {
  J2OBJC_NEW_IMPL(ASTabLayoutImpl_$Lambda$2, init)
}

ASTabLayoutImpl_$Lambda$2 *create_ASTabLayoutImpl_$Lambda$2_init() {
  J2OBJC_CREATE_IMPL(ASTabLayoutImpl_$Lambda$2, init)
}

J2OBJC_INITIALIZED_DEFN(ASTabLayoutImpl_$Lambda$3)

@implementation ASTabLayoutImpl_$Lambda$3

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value {
  [((ADXBadgeDrawable *) nil_chk(badge)) setNumberWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(value, [JavaLangInteger class]))) intValue]];
}

+ (void)initialize {
  if (self == [ASTabLayoutImpl_$Lambda$3 class]) {
    ASTabLayoutImpl_$Lambda$3_instance = new_ASTabLayoutImpl_$Lambda$3_init();
    J2OBJC_SET_INITIALIZED(ASTabLayoutImpl_$Lambda$3)
  }
}

@end

void ASTabLayoutImpl_$Lambda$3_init(ASTabLayoutImpl_$Lambda$3 *self) {
  NSObject_init(self);
}

ASTabLayoutImpl_$Lambda$3 *new_ASTabLayoutImpl_$Lambda$3_init() {
  J2OBJC_NEW_IMPL(ASTabLayoutImpl_$Lambda$3, init)
}

ASTabLayoutImpl_$Lambda$3 *create_ASTabLayoutImpl_$Lambda$3_init() {
  J2OBJC_CREATE_IMPL(ASTabLayoutImpl_$Lambda$3, init)
}

J2OBJC_INITIALIZED_DEFN(ASTabLayoutImpl_$Lambda$4)

@implementation ASTabLayoutImpl_$Lambda$4

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value {
  [((ADXBadgeDrawable *) nil_chk(badge)) setVerticalOffsetWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(value, [JavaLangInteger class]))) intValue]];
}

+ (void)initialize {
  if (self == [ASTabLayoutImpl_$Lambda$4 class]) {
    ASTabLayoutImpl_$Lambda$4_instance = new_ASTabLayoutImpl_$Lambda$4_init();
    J2OBJC_SET_INITIALIZED(ASTabLayoutImpl_$Lambda$4)
  }
}

@end

void ASTabLayoutImpl_$Lambda$4_init(ASTabLayoutImpl_$Lambda$4 *self) {
  NSObject_init(self);
}

ASTabLayoutImpl_$Lambda$4 *new_ASTabLayoutImpl_$Lambda$4_init() {
  J2OBJC_NEW_IMPL(ASTabLayoutImpl_$Lambda$4, init)
}

ASTabLayoutImpl_$Lambda$4 *create_ASTabLayoutImpl_$Lambda$4_init() {
  J2OBJC_CREATE_IMPL(ASTabLayoutImpl_$Lambda$4, init)
}

J2OBJC_INITIALIZED_DEFN(ASTabLayoutImpl_$Lambda$5)

@implementation ASTabLayoutImpl_$Lambda$5

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value {
  [((ADXBadgeDrawable *) nil_chk(badge)) setHorizontalOffsetWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(value, [JavaLangInteger class]))) intValue]];
}

+ (void)initialize {
  if (self == [ASTabLayoutImpl_$Lambda$5 class]) {
    ASTabLayoutImpl_$Lambda$5_instance = new_ASTabLayoutImpl_$Lambda$5_init();
    J2OBJC_SET_INITIALIZED(ASTabLayoutImpl_$Lambda$5)
  }
}

@end

void ASTabLayoutImpl_$Lambda$5_init(ASTabLayoutImpl_$Lambda$5 *self) {
  NSObject_init(self);
}

ASTabLayoutImpl_$Lambda$5 *new_ASTabLayoutImpl_$Lambda$5_init() {
  J2OBJC_NEW_IMPL(ASTabLayoutImpl_$Lambda$5, init)
}

ASTabLayoutImpl_$Lambda$5 *create_ASTabLayoutImpl_$Lambda$5_init() {
  J2OBJC_CREATE_IMPL(ASTabLayoutImpl_$Lambda$5, init)
}

J2OBJC_INITIALIZED_DEFN(ASTabLayoutImpl_$Lambda$6)

@implementation ASTabLayoutImpl_$Lambda$6

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value {
  [((ADXBadgeDrawable *) nil_chk(badge)) setBadgeGravityWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(value, [JavaLangInteger class]))) intValue]];
}

+ (void)initialize {
  if (self == [ASTabLayoutImpl_$Lambda$6 class]) {
    ASTabLayoutImpl_$Lambda$6_instance = new_ASTabLayoutImpl_$Lambda$6_init();
    J2OBJC_SET_INITIALIZED(ASTabLayoutImpl_$Lambda$6)
  }
}

@end

void ASTabLayoutImpl_$Lambda$6_init(ASTabLayoutImpl_$Lambda$6 *self) {
  NSObject_init(self);
}

ASTabLayoutImpl_$Lambda$6 *new_ASTabLayoutImpl_$Lambda$6_init() {
  J2OBJC_NEW_IMPL(ASTabLayoutImpl_$Lambda$6, init)
}

ASTabLayoutImpl_$Lambda$6 *create_ASTabLayoutImpl_$Lambda$6_init() {
  J2OBJC_CREATE_IMPL(ASTabLayoutImpl_$Lambda$6, init)
}

J2OBJC_INITIALIZED_DEFN(ASTabLayoutImpl_$Lambda$7)

@implementation ASTabLayoutImpl_$Lambda$7

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value {
  [((ADXBadgeDrawable *) nil_chk(badge)) setMaxCharacterCountWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(value, [JavaLangInteger class]))) intValue]];
}

+ (void)initialize {
  if (self == [ASTabLayoutImpl_$Lambda$7 class]) {
    ASTabLayoutImpl_$Lambda$7_instance = new_ASTabLayoutImpl_$Lambda$7_init();
    J2OBJC_SET_INITIALIZED(ASTabLayoutImpl_$Lambda$7)
  }
}

@end

void ASTabLayoutImpl_$Lambda$7_init(ASTabLayoutImpl_$Lambda$7 *self) {
  NSObject_init(self);
}

ASTabLayoutImpl_$Lambda$7 *new_ASTabLayoutImpl_$Lambda$7_init() {
  J2OBJC_NEW_IMPL(ASTabLayoutImpl_$Lambda$7, init)
}

ASTabLayoutImpl_$Lambda$7 *create_ASTabLayoutImpl_$Lambda$7_init() {
  J2OBJC_CREATE_IMPL(ASTabLayoutImpl_$Lambda$7, init)
}

J2OBJC_INITIALIZED_DEFN(ASTabLayoutImpl_$Lambda$8)

@implementation ASTabLayoutImpl_$Lambda$8

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value {
  [((ADXBadgeDrawable *) nil_chk(badge)) setAlphaWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(value, [JavaLangInteger class]))) intValue]];
}

+ (void)initialize {
  if (self == [ASTabLayoutImpl_$Lambda$8 class]) {
    ASTabLayoutImpl_$Lambda$8_instance = new_ASTabLayoutImpl_$Lambda$8_init();
    J2OBJC_SET_INITIALIZED(ASTabLayoutImpl_$Lambda$8)
  }
}

@end

void ASTabLayoutImpl_$Lambda$8_init(ASTabLayoutImpl_$Lambda$8 *self) {
  NSObject_init(self);
}

ASTabLayoutImpl_$Lambda$8 *new_ASTabLayoutImpl_$Lambda$8_init() {
  J2OBJC_NEW_IMPL(ASTabLayoutImpl_$Lambda$8, init)
}

ASTabLayoutImpl_$Lambda$8 *create_ASTabLayoutImpl_$Lambda$8_init() {
  J2OBJC_CREATE_IMPL(ASTabLayoutImpl_$Lambda$8, init)
}

J2OBJC_INITIALIZED_DEFN(ASTabLayoutImpl_$Lambda$9)

@implementation ASTabLayoutImpl_$Lambda$9

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value {
  [((ADXBadgeDrawable *) nil_chk(badge)) setBadgeTextColorWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(value, [JavaLangInteger class]))) intValue]];
}

+ (void)initialize {
  if (self == [ASTabLayoutImpl_$Lambda$9 class]) {
    ASTabLayoutImpl_$Lambda$9_instance = new_ASTabLayoutImpl_$Lambda$9_init();
    J2OBJC_SET_INITIALIZED(ASTabLayoutImpl_$Lambda$9)
  }
}

@end

void ASTabLayoutImpl_$Lambda$9_init(ASTabLayoutImpl_$Lambda$9 *self) {
  NSObject_init(self);
}

ASTabLayoutImpl_$Lambda$9 *new_ASTabLayoutImpl_$Lambda$9_init() {
  J2OBJC_NEW_IMPL(ASTabLayoutImpl_$Lambda$9, init)
}

ASTabLayoutImpl_$Lambda$9 *create_ASTabLayoutImpl_$Lambda$9_init() {
  J2OBJC_CREATE_IMPL(ASTabLayoutImpl_$Lambda$9, init)
}

J2OBJC_INITIALIZED_DEFN(ASTabLayoutImpl_$Lambda$10)

@implementation ASTabLayoutImpl_$Lambda$10

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value {
  [((ADXBadgeDrawable *) nil_chk(badge)) setVisibleWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(value, [JavaLangBoolean class]))) booleanValue]];
}

+ (void)initialize {
  if (self == [ASTabLayoutImpl_$Lambda$10 class]) {
    ASTabLayoutImpl_$Lambda$10_instance = new_ASTabLayoutImpl_$Lambda$10_init();
    J2OBJC_SET_INITIALIZED(ASTabLayoutImpl_$Lambda$10)
  }
}

@end

void ASTabLayoutImpl_$Lambda$10_init(ASTabLayoutImpl_$Lambda$10 *self) {
  NSObject_init(self);
}

ASTabLayoutImpl_$Lambda$10 *new_ASTabLayoutImpl_$Lambda$10_init() {
  J2OBJC_NEW_IMPL(ASTabLayoutImpl_$Lambda$10, init)
}

ASTabLayoutImpl_$Lambda$10 *create_ASTabLayoutImpl_$Lambda$10_init() {
  J2OBJC_CREATE_IMPL(ASTabLayoutImpl_$Lambda$10, init)
}

J2OBJC_INITIALIZED_DEFN(ASTabLayoutImpl_$Lambda$11)

@implementation ASTabLayoutImpl_$Lambda$11

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value {
  [((ADXBadgeDrawable *) nil_chk(badge)) setTextAppearanceResourceWithNSString:(NSString *) cast_chk(value, [NSString class])];
}

+ (void)initialize {
  if (self == [ASTabLayoutImpl_$Lambda$11 class]) {
    ASTabLayoutImpl_$Lambda$11_instance = new_ASTabLayoutImpl_$Lambda$11_init();
    J2OBJC_SET_INITIALIZED(ASTabLayoutImpl_$Lambda$11)
  }
}

@end

void ASTabLayoutImpl_$Lambda$11_init(ASTabLayoutImpl_$Lambda$11 *self) {
  NSObject_init(self);
}

ASTabLayoutImpl_$Lambda$11 *new_ASTabLayoutImpl_$Lambda$11_init() {
  J2OBJC_NEW_IMPL(ASTabLayoutImpl_$Lambda$11, init)
}

ASTabLayoutImpl_$Lambda$11 *create_ASTabLayoutImpl_$Lambda$11_init() {
  J2OBJC_CREATE_IMPL(ASTabLayoutImpl_$Lambda$11, init)
}
