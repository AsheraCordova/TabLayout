//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSTabLayoutPlugin\src\main\java\com\ashera\tablayout\SlidingTabIndicatorImpl.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "AbstractBitFlagConverter.h"
#include "BaseHasWidgets.h"
#include "Canvas.h"
#include "Context.h"
#include "ConverterFactory.h"
#include "Drawable.h"
#include "HasWidgets.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "J2ObjC_source.h"
#include "LayoutTransition.h"
#include "LinearLayout.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "Rect.h"
#include "SlidingTabIndicatorImpl.h"
#include "TabLayout.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Runnable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"
#include "HasLifeCycleDecorators.h"

#include "ASUIImageView.h"

static bool (*ASSlidingTabIndicatorImpl_super$_removeWithInt_)(id, SEL, int32_t);


@class NSString;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


#pragma clang diagnostic ignored "-Wprotocol"

@interface ASSlidingTabIndicatorImpl () {
 @public
  id uiView_;
  id<ADCanvas> canvas_;
  ADMTabLayout_SlidingTabIndicator *slidingTabIndicator_;
}

- (void)setWidgetOnNativeClass;

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget;

- (void)createLayoutParamsWithADView:(ADView *)view;

- (ADLinearLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view;

- (void)setDividerPaddingWithId:(id)objValue;

- (void)setShowDividersWithId:(id)objValue;

- (id)getDividerPadding;

- (id)getShowDividers;

- (void)createCanvas;

@end

J2OBJC_FIELD_SETTER(ASSlidingTabIndicatorImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASSlidingTabIndicatorImpl, canvas_, id<ADCanvas>)
J2OBJC_FIELD_SETTER(ASSlidingTabIndicatorImpl, slidingTabIndicator_, ADMTabLayout_SlidingTabIndicator *)

__attribute__((unused)) static void ASSlidingTabIndicatorImpl_setWidgetOnNativeClass(ASSlidingTabIndicatorImpl *self);

__attribute__((unused)) static void ASSlidingTabIndicatorImpl_nativeRemoveViewWithASIWidget_(ASSlidingTabIndicatorImpl *self, id<ASIWidget> widget);

__attribute__((unused)) static void ASSlidingTabIndicatorImpl_createLayoutParamsWithADView_(ASSlidingTabIndicatorImpl *self, ADView *view);

__attribute__((unused)) static ADLinearLayout_LayoutParams *ASSlidingTabIndicatorImpl_getLayoutParamsWithADView_(ASSlidingTabIndicatorImpl *self, ADView *view);

__attribute__((unused)) static void ASSlidingTabIndicatorImpl_setDividerPaddingWithId_(ASSlidingTabIndicatorImpl *self, id objValue);

__attribute__((unused)) static void ASSlidingTabIndicatorImpl_setShowDividersWithId_(ASSlidingTabIndicatorImpl *self, id objValue);

__attribute__((unused)) static id ASSlidingTabIndicatorImpl_getDividerPadding(ASSlidingTabIndicatorImpl *self);

__attribute__((unused)) static id ASSlidingTabIndicatorImpl_getShowDividers(ASSlidingTabIndicatorImpl *self);

__attribute__((unused)) static void ASSlidingTabIndicatorImpl_createCanvas(ASSlidingTabIndicatorImpl *self);

@interface ASSlidingTabIndicatorImpl_Divider () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASSlidingTabIndicatorImpl_Divider, mapping_, id<JavaUtilMap>)

@interface ASSlidingTabIndicatorImpl_SlidingTabIndicatorExt () {
 @public
  WEAK_ ASSlidingTabIndicatorImpl *this$1_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  id<JavaUtilList> overlays_;
  int32_t mMaxWidth_;
  int32_t mMaxHeight_;
  id<JavaUtilMap> templates_;
}

@end

J2OBJC_FIELD_SETTER(ASSlidingTabIndicatorImpl_SlidingTabIndicatorExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASSlidingTabIndicatorImpl_SlidingTabIndicatorExt, onLayoutEvent_, ASOnLayoutEvent *)
J2OBJC_FIELD_SETTER(ASSlidingTabIndicatorImpl_SlidingTabIndicatorExt, overlays_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASSlidingTabIndicatorImpl_SlidingTabIndicatorExt, templates_, id<JavaUtilMap>)

@interface ASSlidingTabIndicatorImpl_CanvasImpl : NSObject < ADCanvas > {
 @public
  bool canvasReset_;
  bool requiresAttrChangeListener_;
  id<JavaUtilList> imageViews_;
  WEAK_ id<ASIWidget> widget_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget;

- (void)drawWithADDrawable:(ADDrawable *)mDivider;

- (void)reset;

- (id)nativeCreateImageViewWithId:(id)image;

@end

J2OBJC_EMPTY_STATIC_INIT(ASSlidingTabIndicatorImpl_CanvasImpl)

J2OBJC_FIELD_SETTER(ASSlidingTabIndicatorImpl_CanvasImpl, imageViews_, id<JavaUtilList>)

__attribute__((unused)) static void ASSlidingTabIndicatorImpl_CanvasImpl_initWithASIWidget_(ASSlidingTabIndicatorImpl_CanvasImpl *self, id<ASIWidget> widget);

__attribute__((unused)) static ASSlidingTabIndicatorImpl_CanvasImpl *new_ASSlidingTabIndicatorImpl_CanvasImpl_initWithASIWidget_(id<ASIWidget> widget) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASSlidingTabIndicatorImpl_CanvasImpl *create_ASSlidingTabIndicatorImpl_CanvasImpl_initWithASIWidget_(id<ASIWidget> widget);

J2OBJC_TYPE_LITERAL_HEADER(ASSlidingTabIndicatorImpl_CanvasImpl)


@interface ASSlidingTabIndicatorImpl_CanvasImpl_$Lambda$1 : NSObject < ADDrawable_AttributeChangeListener > {
 @public
  id val$imageView_;
}

- (void)onAttributeChangeWithNSString:(NSString *)name
                               withId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(ASSlidingTabIndicatorImpl_CanvasImpl_$Lambda$1)

__attribute__((unused)) static void ASSlidingTabIndicatorImpl_CanvasImpl_$Lambda$1_initWithId_(ASSlidingTabIndicatorImpl_CanvasImpl_$Lambda$1 *self, id capture$0);

__attribute__((unused)) static ASSlidingTabIndicatorImpl_CanvasImpl_$Lambda$1 *new_ASSlidingTabIndicatorImpl_CanvasImpl_$Lambda$1_initWithId_(id capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASSlidingTabIndicatorImpl_CanvasImpl_$Lambda$1 *create_ASSlidingTabIndicatorImpl_CanvasImpl_$Lambda$1_initWithId_(id capture$0);


@interface ASSlidingTabIndicatorImpl_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  id<ASIWidget> val$widget_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASSlidingTabIndicatorImpl_$Lambda$1)

__attribute__((unused)) static void ASSlidingTabIndicatorImpl_$Lambda$1_initWithASIWidget_(ASSlidingTabIndicatorImpl_$Lambda$1 *self, id<ASIWidget> capture$0);

__attribute__((unused)) static ASSlidingTabIndicatorImpl_$Lambda$1 *new_ASSlidingTabIndicatorImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASSlidingTabIndicatorImpl_$Lambda$1 *create_ASSlidingTabIndicatorImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0);


J2OBJC_INITIALIZED_DEFN(ASSlidingTabIndicatorImpl)

NSString *ASSlidingTabIndicatorImpl_LOCAL_NAME = @"com.google.android.material.tabs.TabLayout.SlidingTabIndicator";
NSString *ASSlidingTabIndicatorImpl_GROUP_NAME = @"com.google.android.material.tabs.TabLayout.SlidingTabIndicator";

@implementation ASSlidingTabIndicatorImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)localName {
  ASViewGroupImpl_register__WithNSString_(localName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"baselineAligned"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"baselineAlignedChildIndex"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"divider"])) withTypeWithNSString:@"drawable"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"gravity"])) withTypeWithNSString:@"gravity"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"measureWithLargestChild"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"weightSum"])) withTypeWithNSString:@"float"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"com.google.android.material.tabs.TabLayout.SlidingTabIndicator.divider", new_ASSlidingTabIndicatorImpl_Divider_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"showDividers"])) withTypeWithNSString:@"com.google.android.material.tabs.TabLayout.SlidingTabIndicator.divider"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"dividerPadding"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_gravity"])) withTypeWithNSString:@"gravity"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_weight"])) withTypeWithNSString:@"float"])) forChild]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASSlidingTabIndicatorImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASSlidingTabIndicatorImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASSlidingTabIndicatorImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (id<ASIWidget>)newInstance {
  return new_ASSlidingTabIndicatorImpl_initWithNSString_withNSString_(groupName_, localName_);
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  slidingTabIndicator_ = new_ASSlidingTabIndicatorImpl_SlidingTabIndicatorExt_initWithASSlidingTabIndicatorImpl_withADMTabLayout_(self, (ADMTabLayout *) cast_chk([((id<ASHasWidgets>) nil_chk([self getParent])) asWidget], [ADMTabLayout class]));
  [self nativeCreateWithJavaUtilMap:params];
  ASSlidingTabIndicatorImpl_createCanvas(self);
  ASViewGroupImpl_registerCommandConveterWithASIWidget_(self);
  ASSlidingTabIndicatorImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASSlidingTabIndicatorImpl_setWidgetOnNativeClass(self);
}

- (id)asWidget {
  return slidingTabIndicator_;
}

- (bool)removeWithASIWidget:(id<ASIWidget>)w {
  bool remove = [super removeWithASIWidget:w];
  [((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) removeViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])];
  ASSlidingTabIndicatorImpl_nativeRemoveViewWithASIWidget_(self, w);
  return remove;
}

- (bool)removeWithInt:(int32_t)index {
  [((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) removeViewAtWithInt:index];
  return true;
}

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget {
  ASSlidingTabIndicatorImpl_nativeRemoveViewWithASIWidget_(self, widget);
}

- (void)addWithASIWidget:(id<ASIWidget>)w
                 withInt:(int32_t)index {
  if (index != -2) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ASSlidingTabIndicatorImpl_createLayoutParamsWithADView_(self, view);
    if (index == -1) {
      [((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) addViewWithADView:view];
    }
    else {
      [((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) addViewWithADView:view withInt:index];
    }
  }
  ASViewGroupImpl_nativeAddViewWithId_withId_([self asNativeWidget], [((id<ASIWidget>) nil_chk(w)) asNativeWidget]);
  [super addWithASIWidget:w withInt:index];
}

- (void)createLayoutParamsWithADView:(ADView *)view {
  ASSlidingTabIndicatorImpl_createLayoutParamsWithADView_(self, view);
}

- (ADLinearLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view {
  return ASSlidingTabIndicatorImpl_getLayoutParamsWithADView_(self, view);
}

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)w
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADLinearLayout_LayoutParams *layoutParams = ASSlidingTabIndicatorImpl_getLayoutParamsWithADView_(self, view);
  ASViewGroupImpl_setChildAttributeWithASIWidget_withASWidgetAttribute_withId_withId_(w, key, objValue, layoutParams);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height", @"layout_gravity", @"layout_weight" }, 4)) {
    case 0:
    ((ADLinearLayout_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 1:
    ((ADLinearLayout_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 2:
    {
      ((ADLinearLayout_LayoutParams *) nil_chk(layoutParams))->gravity_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 3:
    {
      ((ADLinearLayout_LayoutParams *) nil_chk(layoutParams))->weight_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue];
    }
    break;
    default:
    break;
  }
  [((ADView *) nil_chk(view)) setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
}

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  id attributeValue = ASViewGroupImpl_getChildAttributeWithASIWidget_withASWidgetAttribute_(w, key);
  if (attributeValue != nil) {
    return attributeValue;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADLinearLayout_LayoutParams *layoutParams = ASSlidingTabIndicatorImpl_getLayoutParamsWithADView_(self, view);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height", @"layout_gravity", @"layout_weight" }, 4)) {
    case 0:
    return JavaLangInteger_valueOfWithInt_(((ADLinearLayout_LayoutParams *) nil_chk(layoutParams))->width_);
    case 1:
    return JavaLangInteger_valueOfWithInt_(((ADLinearLayout_LayoutParams *) nil_chk(layoutParams))->height_);
    case 2:
    {
      return JavaLangInteger_valueOfWithInt_(((ADLinearLayout_LayoutParams *) nil_chk(layoutParams))->gravity_);
    }
    case 3:
    {
      return JavaLangFloat_valueOfWithFloat_(((ADLinearLayout_LayoutParams *) nil_chk(layoutParams))->weight_);
    }
  }
  return nil;
}

- (IOSClass *)getViewClass {
  return ASSlidingTabIndicatorImpl_SlidingTabIndicatorExt_class_();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewGroupImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"baselineAligned", @"baselineAlignedChildIndex", @"divider", @"gravity", @"measureWithLargestChild", @"weightSum", @"showDividers", @"dividerPadding" }, 8)) {
    case 0:
    {
      [((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) setBaselineAlignedWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    }
    break;
    case 1:
    {
      [((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) setBaselineAlignedChildIndexWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 2:
    {
      {
        [((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) setDividerDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
      }
    }
    break;
    case 3:
    {
      [((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) setGravityWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 4:
    {
      {
        [((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) setMeasureWithLargestChildEnabledWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
      }
    }
    break;
    case 5:
    {
      [((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) setWeightSumWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 6:
    {
      ASSlidingTabIndicatorImpl_setShowDividersWithId_(self, objValue);
    }
    break;
    case 7:
    {
      ASSlidingTabIndicatorImpl_setDividerPaddingWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id attributeValue = ASViewGroupImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"baselineAligned", @"baselineAlignedChildIndex", @"divider", @"gravity", @"measureWithLargestChild", @"weightSum", @"showDividers", @"dividerPadding" }, 8)) {
    case 0:
    {
      return JavaLangBoolean_valueOfWithBoolean_([((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) isBaselineAligned]);
    }
    case 1:
    {
      return JavaLangInteger_valueOfWithInt_([((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) getBaselineAlignedChildIndex]);
    }
    case 2:
    {
      {
        return [((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) getDividerDrawable];
      }
    }
    case 3:
    {
      {
        return JavaLangInteger_valueOfWithInt_([((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) getGravity]);
      }
    }
    case 4:
    {
      {
        return JavaLangBoolean_valueOfWithBoolean_([((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) isMeasureWithLargestChildEnabled]);
      }
    }
    case 5:
    {
      return JavaLangFloat_valueOfWithFloat_([((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) getWeightSum]);
    }
    case 6:
    {
      return ASSlidingTabIndicatorImpl_getShowDividers(self);
    }
    case 7:
    {
      return ASSlidingTabIndicatorImpl_getDividerPadding(self);
    }
  }
  return nil;
}

- (id)asNativeWidget {
  return uiView_;
}

- (bool)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASUIView* uiView = [ASUIView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView_ = uiView;
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)setDividerPaddingWithId:(id)objValue {
  ASSlidingTabIndicatorImpl_setDividerPaddingWithId_(self, objValue);
}

- (void)setShowDividersWithId:(id)objValue {
  ASSlidingTabIndicatorImpl_setShowDividersWithId_(self, objValue);
}

- (id)getDividerPadding {
  return ASSlidingTabIndicatorImpl_getDividerPadding(self);
}

- (id)getShowDividers {
  return ASSlidingTabIndicatorImpl_getShowDividers(self);
}

- (void)createCanvas {
  ASSlidingTabIndicatorImpl_createCanvas(self);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) setIdWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:id_ withNSString:@"id"], [JavaLangInteger class]))) intValue]];
  }
}

- (void)setVisibleWithBoolean:(bool)b {
  [((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) setVisibilityWithInt:b ? ADView_VISIBLE : ADView_GONE];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "LADLinearLayout_LayoutParams;", 0x2, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 23, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 24, 25, -1, 26, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 28, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 32, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:);
  methods[4].selector = @selector(newInstance);
  methods[5].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[6].selector = @selector(setWidgetOnNativeClass);
  methods[7].selector = @selector(asWidget);
  methods[8].selector = @selector(removeWithASIWidget:);
  methods[9].selector = @selector(removeWithInt:);
  methods[10].selector = @selector(nativeRemoveViewWithASIWidget:);
  methods[11].selector = @selector(addWithASIWidget:withInt:);
  methods[12].selector = @selector(createLayoutParamsWithADView:);
  methods[13].selector = @selector(getLayoutParamsWithADView:);
  methods[14].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[15].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[16].selector = @selector(getViewClass);
  methods[17].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[18].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[19].selector = @selector(asNativeWidget);
  methods[20].selector = @selector(checkIosVersionWithNSString:);
  methods[21].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[22].selector = @selector(requestLayout);
  methods[23].selector = @selector(invalidate);
  methods[24].selector = @selector(setDividerPaddingWithId:);
  methods[25].selector = @selector(setShowDividersWithId:);
  methods[26].selector = @selector(getDividerPadding);
  methods[27].selector = @selector(getShowDividers);
  methods[28].selector = @selector(createCanvas);
  methods[29].selector = @selector(setIdWithNSString:);
  methods[30].selector = @selector(setVisibleWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "canvas_", "LADCanvas;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 33, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 34, -1, -1 },
    { "slidingTabIndicator_", "LADMTabLayout_SlidingTabIndicator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "remove", "LASIWidget;", "I", "nativeRemoveView", "add", "LASIWidget;I", "createLayoutParams", "LADView;", "getLayoutParams", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "checkIosVersion", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setDividerPadding", "LNSObject;", "setShowDividers", "setId", "setVisible", "Z", &ASSlidingTabIndicatorImpl_LOCAL_NAME, &ASSlidingTabIndicatorImpl_GROUP_NAME, "LASSlidingTabIndicatorImpl_Divider;LASSlidingTabIndicatorImpl_SlidingTabIndicatorExt;LASSlidingTabIndicatorImpl_CanvasImpl;" };
  static const J2ObjcClassInfo _ASSlidingTabIndicatorImpl = { "SlidingTabIndicatorImpl", "com.ashera.tablayout", ptrTable, methods, fields, 7, 0x1, 31, 5, -1, 35, -1, -1, -1 };
  return &_ASSlidingTabIndicatorImpl;
}

+ (void)initialize {
  if (self == [ASSlidingTabIndicatorImpl class]) {
    ASSlidingTabIndicatorImpl_super$_removeWithInt_ = (bool (*)(id, SEL, int32_t))[ASBaseHasWidgets instanceMethodForSelector:@selector(removeWithInt:)];
    J2OBJC_SET_INITIALIZED(ASSlidingTabIndicatorImpl)
  }
}

@end

void ASSlidingTabIndicatorImpl_init(ASSlidingTabIndicatorImpl *self) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASSlidingTabIndicatorImpl_GROUP_NAME, ASSlidingTabIndicatorImpl_LOCAL_NAME);
}

ASSlidingTabIndicatorImpl *new_ASSlidingTabIndicatorImpl_init() {
  J2OBJC_NEW_IMPL(ASSlidingTabIndicatorImpl, init)
}

ASSlidingTabIndicatorImpl *create_ASSlidingTabIndicatorImpl_init() {
  J2OBJC_CREATE_IMPL(ASSlidingTabIndicatorImpl, init)
}

void ASSlidingTabIndicatorImpl_initWithNSString_(ASSlidingTabIndicatorImpl *self, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASSlidingTabIndicatorImpl_GROUP_NAME, localname);
}

ASSlidingTabIndicatorImpl *new_ASSlidingTabIndicatorImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASSlidingTabIndicatorImpl, initWithNSString_, localname)
}

ASSlidingTabIndicatorImpl *create_ASSlidingTabIndicatorImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASSlidingTabIndicatorImpl, initWithNSString_, localname)
}

void ASSlidingTabIndicatorImpl_initWithNSString_withNSString_(ASSlidingTabIndicatorImpl *self, NSString *groupName, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, groupName, localname);
}

ASSlidingTabIndicatorImpl *new_ASSlidingTabIndicatorImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASSlidingTabIndicatorImpl, initWithNSString_withNSString_, groupName, localname)
}

ASSlidingTabIndicatorImpl *create_ASSlidingTabIndicatorImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASSlidingTabIndicatorImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASSlidingTabIndicatorImpl_setWidgetOnNativeClass(ASSlidingTabIndicatorImpl *self) {
  ((ASUIView*) [self asNativeWidget]).widget = self;
}

void ASSlidingTabIndicatorImpl_nativeRemoveViewWithASIWidget_(ASSlidingTabIndicatorImpl *self, id<ASIWidget> widget) {
  ADLayoutTransition *layoutTransition = [((ADMTabLayout_SlidingTabIndicator *) nil_chk(self->slidingTabIndicator_)) getLayoutTransition];
  if (layoutTransition != nil && ([layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_CHANGE_DISAPPEARING] || [layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_DISAPPEARING])) {
    [self addToBufferedRunnablesWithJavaLangRunnable:new_ASSlidingTabIndicatorImpl_$Lambda$1_initWithASIWidget_(widget)];
  }
  else {
    ASViewGroupImpl_nativeRemoveViewWithASIWidget_(widget);
  }
}

void ASSlidingTabIndicatorImpl_createLayoutParamsWithADView_(ASSlidingTabIndicatorImpl *self, ADView *view) {
  ADLinearLayout_LayoutParams *layoutParams = (ADLinearLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADLinearLayout_LayoutParams class]);
  layoutParams = (ADLinearLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADLinearLayout_LayoutParams class]);
  if (layoutParams == nil) {
    layoutParams = new_ADLinearLayout_LayoutParams_initWithInt_withInt_(-2, -2);
    [view setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
  }
  else {
    layoutParams->height_ = -2;
    layoutParams->width_ = -2;
  }
}

ADLinearLayout_LayoutParams *ASSlidingTabIndicatorImpl_getLayoutParamsWithADView_(ASSlidingTabIndicatorImpl *self, ADView *view) {
  return (ADLinearLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADLinearLayout_LayoutParams class]);
}

void ASSlidingTabIndicatorImpl_setDividerPaddingWithId_(ASSlidingTabIndicatorImpl *self, id objValue) {
  {
    [((ADMTabLayout_SlidingTabIndicator *) nil_chk(self->slidingTabIndicator_)) setDividerPaddingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  }
}

void ASSlidingTabIndicatorImpl_setShowDividersWithId_(ASSlidingTabIndicatorImpl *self, id objValue) {
  {
    [((ADMTabLayout_SlidingTabIndicator *) nil_chk(self->slidingTabIndicator_)) setShowDividersWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  }
}

id ASSlidingTabIndicatorImpl_getDividerPadding(ASSlidingTabIndicatorImpl *self) {
  {
    return JavaLangInteger_valueOfWithInt_([((ADMTabLayout_SlidingTabIndicator *) nil_chk(self->slidingTabIndicator_)) getDividerPadding]);
  }
}

id ASSlidingTabIndicatorImpl_getShowDividers(ASSlidingTabIndicatorImpl *self) {
  {
    return JavaLangInteger_valueOfWithInt_([((ADMTabLayout_SlidingTabIndicator *) nil_chk(self->slidingTabIndicator_)) getShowDividers]);
  }
}

void ASSlidingTabIndicatorImpl_createCanvas(ASSlidingTabIndicatorImpl *self) {
  self->canvas_ = new_ASSlidingTabIndicatorImpl_CanvasImpl_initWithASIWidget_(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASSlidingTabIndicatorImpl)

J2OBJC_NAME_MAPPING(ASSlidingTabIndicatorImpl, "com.ashera.tablayout", "AS")

@implementation ASSlidingTabIndicatorImpl_Divider

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASSlidingTabIndicatorImpl_Divider_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASSlidingTabIndicatorImpl;" };
  static const J2ObjcClassInfo _ASSlidingTabIndicatorImpl_Divider = { "Divider", "com.ashera.tablayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASSlidingTabIndicatorImpl_Divider;
}

@end

void ASSlidingTabIndicatorImpl_Divider_init(ASSlidingTabIndicatorImpl_Divider *self) {
  ASAbstractBitFlagConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"beginning" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"end" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x4)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"middle" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x2)];
  }
}

ASSlidingTabIndicatorImpl_Divider *new_ASSlidingTabIndicatorImpl_Divider_init() {
  J2OBJC_NEW_IMPL(ASSlidingTabIndicatorImpl_Divider, init)
}

ASSlidingTabIndicatorImpl_Divider *create_ASSlidingTabIndicatorImpl_Divider_init() {
  J2OBJC_CREATE_IMPL(ASSlidingTabIndicatorImpl_Divider, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASSlidingTabIndicatorImpl_Divider)

@implementation ASSlidingTabIndicatorImpl_SlidingTabIndicatorExt

- (id<ASIWidget>)getWidget {
  return this$1_;
}

- (void)setMaxWidthWithInt:(int32_t)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(int32_t)height {
  mMaxHeight_ = height;
}

- (int32_t)getMaxWidth {
  return mMaxWidth_;
}

- (int32_t)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASSlidingTabIndicatorImpl:(ASSlidingTabIndicatorImpl *)outer$
                                 withADMTabLayout:(ADMTabLayout *)tablayout {
  ASSlidingTabIndicatorImpl_SlidingTabIndicatorExt_initWithASSlidingTabIndicatorImpl_withADMTabLayout_(self, outer$, tablayout);
  return self;
}

- (void)onMeasureWithInt:(int32_t)widthMeasureSpec
                 withInt:(int32_t)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$1_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(bool)changed
                    withInt:(int32_t)l
                    withInt:(int32_t)t
                    withInt:(int32_t)r
                    withInt:(int32_t)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$1_, l, t, r, b);
  if (![self isOverlay]) {
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$1_ asNativeWidget], l, t, r, b);
  }
  [this$1_ replayBufferedEvents];
  [((id<ADCanvas>) nil_chk(this$1_->canvas_)) reset];
  [self onDrawWithADCanvas:this$1_->canvas_];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$1_);
  overlays_ = ASViewImpl_drawOverlayWithASIWidget_withJavaUtilList_(this$1_, overlays_);
  id<ASIWidgetLifeCycleListener> listener = [this$1_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$1_ isInvalidateOnFrameChange] && [this$1_ isInitialised]) {
    [this$1_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(int32_t)width
                               withInt:(int32_t)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  if (![this$1_ isWidgetDisposed]) {
    ASViewImpl_drawableStateChangedWithASIWidget_(this$1_);
  }
}

- (ADView *)inflateViewWithNSString:(NSString *)layout {
  if (templates_ == nil) {
    templates_ = new_JavaUtilHashMap_init();
  }
  id<ASIWidget> template_ = [templates_ getWithId:layout];
  if (template_ == nil) {
    template_ = (id<ASIWidget>) cast_check([this$1_ quickConvertWithId:layout withNSString:@"template"], ASIWidget_class_());
    (void) [((id<JavaUtilMap>) nil_chk(templates_)) putWithId:layout withId:template_];
  }
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(template_)) loadLazyWidgetsWithASHasWidgets:this$1_];
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
}

- (void)remeasure {
  if ([this$1_ getFragment] != nil) {
    [((id<ASIFragment>) nil_chk([this$1_ getFragment])) remeasure];
  }
}

- (void)removeFromParent {
  [((id<ASHasWidgets>) nil_chk([this$1_ getParent])) removeWithASIWidget:this$1_];
}

- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)appScreenLocation {
  *IOSIntArray_GetRef(nil_chk(appScreenLocation), 0) = ASViewImpl_getLocationXOnScreenWithId_([this$1_ asNativeWidget]);
  *IOSIntArray_GetRef(appScreenLocation, 1) = ASViewImpl_getLocationYOnScreenWithId_([this$1_ asNativeWidget]);
}

- (void)getWindowVisibleDisplayFrameWithADRect:(ADRect *)displayFrame {
  ((ADRect *) nil_chk(displayFrame))->left_ = ASViewImpl_getLocationXOnScreenWithId_([this$1_ asNativeWidget]);
  displayFrame->top_ = ASViewImpl_getLocationYOnScreenWithId_([this$1_ asNativeWidget]);
  displayFrame->right_ = displayFrame->left_ + [self getWidth];
  displayFrame->bottom_ = displayFrame->top_ + [self getHeight];
}

- (void)offsetTopAndBottomWithInt:(int32_t)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$1_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(int32_t)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$1_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setMyAttributeWithNSString:(NSString *)name
                            withId:(id)value {
  if ([((NSString *) nil_chk(name)) isEqual:@"state0"]) {
    [self setState0WithId:value];
    return;
  }
  if ([name isEqual:@"state1"]) {
    [self setState1WithId:value];
    return;
  }
  if ([name isEqual:@"state2"]) {
    [self setState2WithId:value];
    return;
  }
  if ([name isEqual:@"state3"]) {
    [self setState3WithId:value];
    return;
  }
  if ([name isEqual:@"state4"]) {
    [self setState4WithId:value];
    return;
  }
  [this$1_ setAttributeWithNSString:name withId:value withBoolean:!([value isKindOfClass:[NSString class]])];
}

- (void)setVisibilityWithInt:(int32_t)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$1_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)setState0WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$1_, 0, value);
}

- (void)setState1WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$1_, 1, value);
}

- (void)setState2WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$1_, 2, value);
}

- (void)setState3WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$1_, 3, value);
}

- (void)setState4WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$1_, 4, value);
}

- (void)state0 {
  ASViewImpl_stateWithASIWidget_withInt_(this$1_, 0);
}

- (void)state1 {
  ASViewImpl_stateWithASIWidget_withInt_(this$1_, 1);
}

- (void)state2 {
  ASViewImpl_stateWithASIWidget_withInt_(this$1_, 2);
}

- (void)state3 {
  ASViewImpl_stateWithASIWidget_withInt_(this$1_, 3);
}

- (void)state4 {
  ASViewImpl_stateWithASIWidget_withInt_(this$1_, 4);
}

- (void)stateYes {
  ASViewImpl_stateYesWithASIWidget_(this$1_);
}

- (void)stateNo {
  ASViewImpl_stateNoWithASIWidget_(this$1_);
}

- (void)endViewTransitionWithADView:(ADView *)view {
  [super endViewTransitionWithADView:view];
  [this$1_ runBufferedRunnables];
}

- (void)removeViewAtWithInt:(int32_t)index {
  [super removeViewAtWithInt:index];
  id<ASIWidget> widget = [((id<JavaUtilList>) nil_chk(this$1_->widgets_)) getWithInt:index];
  ASSlidingTabIndicatorImpl_super$_removeWithInt_(this$1_, @selector(removeWithInt:), index);
  if (index + 1 <= [((ADMTabLayout_SlidingTabIndicator *) nil_chk(this$1_->slidingTabIndicator_)) getChildCount]) {
    ASSlidingTabIndicatorImpl_nativeRemoveViewWithASIWidget_(this$1_, widget);
  }
}

- (void)__javaClone:(ASSlidingTabIndicatorImpl_SlidingTabIndicatorExt *)original {
  [super __javaClone:original];
  JreRelease(this$1_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWidget);
  methods[1].selector = @selector(setMaxWidthWithInt:);
  methods[2].selector = @selector(setMaxHeightWithInt:);
  methods[3].selector = @selector(getMaxWidth);
  methods[4].selector = @selector(getMaxHeight);
  methods[5].selector = @selector(initWithASSlidingTabIndicatorImpl:withADMTabLayout:);
  methods[6].selector = @selector(onMeasureWithInt:withInt:);
  methods[7].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[8].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[9].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[10].selector = @selector(newInstanceWithASIWidget:);
  methods[11].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[12].selector = @selector(getMethods);
  methods[13].selector = @selector(initialized);
  methods[14].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[15].selector = @selector(drawableStateChanged);
  methods[16].selector = @selector(inflateViewWithNSString:);
  methods[17].selector = @selector(remeasure);
  methods[18].selector = @selector(removeFromParent);
  methods[19].selector = @selector(getLocationOnScreenWithIntArray:);
  methods[20].selector = @selector(getWindowVisibleDisplayFrameWithADRect:);
  methods[21].selector = @selector(offsetTopAndBottomWithInt:);
  methods[22].selector = @selector(offsetLeftAndRightWithInt:);
  methods[23].selector = @selector(setMyAttributeWithNSString:withId:);
  methods[24].selector = @selector(setVisibilityWithInt:);
  methods[25].selector = @selector(setState0WithId:);
  methods[26].selector = @selector(setState1WithId:);
  methods[27].selector = @selector(setState2WithId:);
  methods[28].selector = @selector(setState3WithId:);
  methods[29].selector = @selector(setState4WithId:);
  methods[30].selector = @selector(state0);
  methods[31].selector = @selector(state1);
  methods[32].selector = @selector(state2);
  methods[33].selector = @selector(state3);
  methods[34].selector = @selector(state4);
  methods[35].selector = @selector(stateYes);
  methods[36].selector = @selector(stateNo);
  methods[37].selector = @selector(endViewTransitionWithADView:);
  methods[38].selector = @selector(removeViewAtWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$1_", "LASSlidingTabIndicatorImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "overlays_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 38, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "templates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 39, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASSlidingTabIndicatorImpl;LADMTabLayout;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "inflateView", "LNSString;", "getLocationOnScreen", "[I", "getWindowVisibleDisplayFrame", "LADRect;", "offsetTopAndBottom", "offsetLeftAndRight", "setMyAttribute", "LNSString;LNSObject;", "setVisibility", "setState0", "LNSObject;", "setState1", "setState2", "setState3", "setState4", "endViewTransition", "LADView;", "removeViewAt", "Ljava/util/List<Lcom/ashera/widget/IWidget;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/IWidget;>;", "LASSlidingTabIndicatorImpl;" };
  static const J2ObjcClassInfo _ASSlidingTabIndicatorImpl_SlidingTabIndicatorExt = { "SlidingTabIndicatorExt", "com.ashera.tablayout", ptrTable, methods, fields, 7, 0x1, 39, 7, 40, -1, -1, -1, -1 };
  return &_ASSlidingTabIndicatorImpl_SlidingTabIndicatorExt;
}

@end

void ASSlidingTabIndicatorImpl_SlidingTabIndicatorExt_initWithASSlidingTabIndicatorImpl_withADMTabLayout_(ASSlidingTabIndicatorImpl_SlidingTabIndicatorExt *self, ASSlidingTabIndicatorImpl *outer$, ADMTabLayout *tablayout) {
  self->this$1_ = outer$;
  ADMTabLayout_SlidingTabIndicator_initWithADMTabLayout_withADContext_(self, nil_chk(tablayout), [tablayout getContext]);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASSlidingTabIndicatorImpl_SlidingTabIndicatorExt *new_ASSlidingTabIndicatorImpl_SlidingTabIndicatorExt_initWithASSlidingTabIndicatorImpl_withADMTabLayout_(ASSlidingTabIndicatorImpl *outer$, ADMTabLayout *tablayout) {
  J2OBJC_NEW_IMPL(ASSlidingTabIndicatorImpl_SlidingTabIndicatorExt, initWithASSlidingTabIndicatorImpl_withADMTabLayout_, outer$, tablayout)
}

ASSlidingTabIndicatorImpl_SlidingTabIndicatorExt *create_ASSlidingTabIndicatorImpl_SlidingTabIndicatorExt_initWithASSlidingTabIndicatorImpl_withADMTabLayout_(ASSlidingTabIndicatorImpl *outer$, ADMTabLayout *tablayout) {
  J2OBJC_CREATE_IMPL(ASSlidingTabIndicatorImpl_SlidingTabIndicatorExt, initWithASSlidingTabIndicatorImpl_withADMTabLayout_, outer$, tablayout)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASSlidingTabIndicatorImpl_SlidingTabIndicatorExt)

@implementation ASSlidingTabIndicatorImpl_CanvasImpl

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget {
  ASSlidingTabIndicatorImpl_CanvasImpl_initWithASIWidget_(self, widget);
  return self;
}

- (void)drawWithADDrawable:(ADDrawable *)mDivider {
  for (id __strong divider in nil_chk(imageViews_)) {
    if (ASViewImpl_getXWithId_(divider) == [((ADDrawable *) nil_chk(mDivider)) getLeft] && ASViewImpl_getYWithId_(divider) == [mDivider getTop]) {
      return;
    }
  }
  id image = [((ADDrawable *) nil_chk(mDivider)) getDrawable];
  if (image != nil) {
    if ([image isKindOfClass:[JavaLangInteger class]]) {
      image = ASViewImpl_getColorWithId_(image);
    }
    id imageView = [self nativeCreateImageViewWithId:image];
    if (requiresAttrChangeListener_) {
      [mDivider setAttributeChangeListenerWithADDrawable_AttributeChangeListener:new_ASSlidingTabIndicatorImpl_CanvasImpl_$Lambda$1_initWithId_(imageView)];
    }
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_(imageView, [mDivider getLeft], [mDivider getTop], [mDivider getRight], [mDivider getBottom]);
    [((id<JavaUtilList>) nil_chk(imageViews_)) addWithId:imageView];
    ASViewGroupImpl_nativeAddViewWithId_withId_([((id<ASIWidget>) nil_chk(widget_)) asNativeWidget], imageView);
  }
}

- (void)reset {
  if (canvasReset_) {
    for (id __strong imageView in nil_chk(imageViews_)) {
      ASViewGroupImpl_removeViewWithId_(imageView);
    }
    [imageViews_ clear];
  }
}

- (id)nativeCreateImageViewWithId:(id)image {
  ASUIImageView* imageView = [ASUIImageView new];
  if ([image isKindOfClass:[UIImage class]]) {
    imageView.image = image;
    imageView.backgroundColor = nil;
  }else if ([image isKindOfClass:[UIColor class]]) {
    imageView.backgroundColor = image;
    imageView.image = nil;
  }
  return imageView;
}

- (void)translateWithInt:(int32_t)arg0
                 withInt:(int32_t)arg1 {
  ADCanvas_translateWithInt_withInt_(self, arg0, arg1);
}

- (void)__javaClone:(ASSlidingTabIndicatorImpl_CanvasImpl *)original {
  [super __javaClone:original];
  JreRelease(widget_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASIWidget:);
  methods[1].selector = @selector(drawWithADDrawable:);
  methods[2].selector = @selector(reset);
  methods[3].selector = @selector(nativeCreateImageViewWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "canvasReset_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "requiresAttrChangeListener_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "imageViews_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 5, -1 },
    { "widget_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;", "draw", "LADDrawable;", "nativeCreateImageView", "LNSObject;", "Ljava/util/List<Ljava/lang/Object;>;", "LASSlidingTabIndicatorImpl;" };
  static const J2ObjcClassInfo _ASSlidingTabIndicatorImpl_CanvasImpl = { "CanvasImpl", "com.ashera.tablayout", ptrTable, methods, fields, 7, 0x1a, 4, 4, 6, -1, -1, -1, -1 };
  return &_ASSlidingTabIndicatorImpl_CanvasImpl;
}

@end

void ASSlidingTabIndicatorImpl_CanvasImpl_initWithASIWidget_(ASSlidingTabIndicatorImpl_CanvasImpl *self, id<ASIWidget> widget) {
  NSObject_init(self);
  self->canvasReset_ = true;
  self->requiresAttrChangeListener_ = true;
  self->imageViews_ = new_JavaUtilArrayList_init();
  self->widget_ = widget;
}

ASSlidingTabIndicatorImpl_CanvasImpl *new_ASSlidingTabIndicatorImpl_CanvasImpl_initWithASIWidget_(id<ASIWidget> widget) {
  J2OBJC_NEW_IMPL(ASSlidingTabIndicatorImpl_CanvasImpl, initWithASIWidget_, widget)
}

ASSlidingTabIndicatorImpl_CanvasImpl *create_ASSlidingTabIndicatorImpl_CanvasImpl_initWithASIWidget_(id<ASIWidget> widget) {
  J2OBJC_CREATE_IMPL(ASSlidingTabIndicatorImpl_CanvasImpl, initWithASIWidget_, widget)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASSlidingTabIndicatorImpl_CanvasImpl)

@implementation ASSlidingTabIndicatorImpl_CanvasImpl_$Lambda$1

- (void)onAttributeChangeWithNSString:(NSString *)name
                               withId:(id)value {
  {
    ADRect *rect;
    int32_t alpha;
    switch (JreIndexOfStr(name, (id[]){ @"bounds", @"alpha" }, 2)) {
      case 0:
      rect = (ADRect *) cast_chk(value, [ADRect class]);
      ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_(val$imageView_, ((ADRect *) nil_chk(rect))->left_, rect->top_, rect->right_, rect->bottom_);
      break;
      case 1:
      alpha = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(value, [JavaLangInteger class]))) intValue];
      ASViewImpl_setAlphaWithId_withId_(val$imageView_, JavaLangFloat_valueOfWithFloat_(alpha / 255.0f));
      break;
      default:
      break;
    }
  }
}

@end

void ASSlidingTabIndicatorImpl_CanvasImpl_$Lambda$1_initWithId_(ASSlidingTabIndicatorImpl_CanvasImpl_$Lambda$1 *self, id capture$0) {
  self->val$imageView_ = capture$0;
  NSObject_init(self);
}

ASSlidingTabIndicatorImpl_CanvasImpl_$Lambda$1 *new_ASSlidingTabIndicatorImpl_CanvasImpl_$Lambda$1_initWithId_(id capture$0) {
  J2OBJC_NEW_IMPL(ASSlidingTabIndicatorImpl_CanvasImpl_$Lambda$1, initWithId_, capture$0)
}

ASSlidingTabIndicatorImpl_CanvasImpl_$Lambda$1 *create_ASSlidingTabIndicatorImpl_CanvasImpl_$Lambda$1_initWithId_(id capture$0) {
  J2OBJC_CREATE_IMPL(ASSlidingTabIndicatorImpl_CanvasImpl_$Lambda$1, initWithId_, capture$0)
}

@implementation ASSlidingTabIndicatorImpl_$Lambda$1

- (void)run {
  ASViewGroupImpl_nativeRemoveViewWithASIWidget_(val$widget_);
}

@end

void ASSlidingTabIndicatorImpl_$Lambda$1_initWithASIWidget_(ASSlidingTabIndicatorImpl_$Lambda$1 *self, id<ASIWidget> capture$0) {
  self->val$widget_ = capture$0;
  NSObject_init(self);
}

ASSlidingTabIndicatorImpl_$Lambda$1 *new_ASSlidingTabIndicatorImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_NEW_IMPL(ASSlidingTabIndicatorImpl_$Lambda$1, initWithASIWidget_, capture$0)
}

ASSlidingTabIndicatorImpl_$Lambda$1 *create_ASSlidingTabIndicatorImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_CREATE_IMPL(ASSlidingTabIndicatorImpl_$Lambda$1, initWithASIWidget_, capture$0)
}
