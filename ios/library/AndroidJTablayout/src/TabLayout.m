//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\AndroidJTablayout\src\main\java\com\google\android\material\tabs\TabLayout.java
//

#include "BadgeDrawable.h"
#include "BadgeUtils.h"
#include "Canvas.h"
#include "Color.h"
#include "ColorStateList.h"
#include "Context.h"
#include "DataSetObserver.h"
#include "Drawable.h"
#include "ElasticTabIndicatorInterpolator.h"
#include "FadeTabIndicatorInterpolator.h"
#include "FastOutLinearInInterpolator.h"
#include "FrameLayout.h"
#include "Gravity.h"
#include "GravityCompat.h"
#include "HorizontalScrollView.h"
#include "ILifeCycleDecorator.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IViewStub.h"
#include "IWidget.h"
#include "IdGenerator.h"
#include "ImageView.h"
#include "J2ObjC_source.h"
#include "LayoutInflater.h"
#include "LinearLayout.h"
#include "Log.h"
#include "MarginLayoutParamsCompat.h"
#include "PagerAdapter.h"
#include "PluginInvoker.h"
#include "Pools.h"
#include "Rect.h"
#include "TabIndicatorInterpolator.h"
#include "TabLayout.h"
#include "TextUtils.h"
#include "TextView.h"
#include "TimeInterpolator.h"
#include "ValueAnimator.h"
#include "View.h"
#include "ViewCompat.h"
#include "ViewGroup.h"
#include "ViewPager.h"
#include "ViewParent.h"
#include "java/lang/Boolean.h"
#include "java/lang/CharSequence.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/ref/WeakReference.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"

@class ADMTabLayout_AdapterChangeListener;
@class JavaLangRefWeakReference;
@class JavaUtilArrayList;
@protocol JavaLangCharSequence;


@interface ADMTabLayout () {
 @public
  JavaUtilArrayList *tabs_;
  ADMTabLayout_Tab *selectedTab_;
  NSString *defaultTabTextAppearance_;
  NSString *tabTextAppearance_;
  NSString *selectedTabTextAppearance_;
  jint tabSelectedIndicatorColor_;
  jint requestedTabMinWidth_;
  jint requestedTabMaxWidth_;
  jint scrollableTabMinWidth_;
  jint contentInsetStart_;
  ADMTabIndicatorInterpolator *tabIndicatorInterpolator_;
  id<ADTimeInterpolator> tabIndicatorTimeInterpolator_;
  id<ADMTabLayout_BaseOnTabSelectedListener> selectedListener_;
  JavaUtilArrayList *selectedListeners_;
  id<ADMTabLayout_BaseOnTabSelectedListener> currentVpSelectedListener_;
  ADValueAnimator *scrollAnimator_;
  ADXPagerAdapter *pagerAdapter_;
  ADDataSetObserver *pagerAdapterObserver_;
  ADMTabLayout_TabLayoutOnPageChangeListener *pageChangeListener_;
  ADMTabLayout_AdapterChangeListener *adapterChangeListener_;
  jboolean setupViewPagerImplicitly_;
  jint viewPagerScrollState_;
  id<ADPools_Pool> tabViewPool_;
}

- (void)setupWithViewPagerWithADXViewPager:(ADXViewPager *)viewPager
                               withBoolean:(jboolean)autoRefresh
                               withBoolean:(jboolean)implicitSetup;

- (ADMTabLayout_TabView *)createTabViewWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab;

- (void)configureTabWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab
                                 withInt:(jint)position;

- (ADLinearLayout_LayoutParams *)createLayoutParamsForTabs;

- (void)updateTabViewLayoutParamsWithADLinearLayout_LayoutParams:(ADLinearLayout_LayoutParams *)lp;

- (void)removeTabViewAtWithInt:(jint)position;

- (void)ensureScrollAnimator;

- (void)dispatchTabSelectedWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab;

- (void)dispatchTabUnselectedWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab;

- (void)dispatchTabReselectedWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab;

- (jint)calculateScrollXForTabWithInt:(jint)position
                            withFloat:(jfloat)positionOffset;

- (void)applyGravityForModeScrollableWithInt:(jint)tabGravity;

+ (ADColorStateList *)createColorStateListWithInt:(jint)defaultColor
                                          withInt:(jint)selectedColor;

- (jint)getDefaultHeight;

- (jint)getTabMinWidth;

- (jint)getChildTabItemCount;

@end

J2OBJC_FIELD_SETTER(ADMTabLayout, tabs_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADMTabLayout, selectedTab_, ADMTabLayout_Tab *)
J2OBJC_FIELD_SETTER(ADMTabLayout, defaultTabTextAppearance_, NSString *)
J2OBJC_FIELD_SETTER(ADMTabLayout, tabTextAppearance_, NSString *)
J2OBJC_FIELD_SETTER(ADMTabLayout, selectedTabTextAppearance_, NSString *)
J2OBJC_FIELD_SETTER(ADMTabLayout, tabIndicatorInterpolator_, ADMTabIndicatorInterpolator *)
J2OBJC_FIELD_SETTER(ADMTabLayout, tabIndicatorTimeInterpolator_, id<ADTimeInterpolator>)
J2OBJC_FIELD_SETTER(ADMTabLayout, selectedListener_, id<ADMTabLayout_BaseOnTabSelectedListener>)
J2OBJC_FIELD_SETTER(ADMTabLayout, selectedListeners_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADMTabLayout, currentVpSelectedListener_, id<ADMTabLayout_BaseOnTabSelectedListener>)
J2OBJC_FIELD_SETTER(ADMTabLayout, scrollAnimator_, ADValueAnimator *)
J2OBJC_FIELD_SETTER(ADMTabLayout, pagerAdapter_, ADXPagerAdapter *)
J2OBJC_FIELD_SETTER(ADMTabLayout, pagerAdapterObserver_, ADDataSetObserver *)
J2OBJC_FIELD_SETTER(ADMTabLayout, pageChangeListener_, ADMTabLayout_TabLayoutOnPageChangeListener *)
J2OBJC_FIELD_SETTER(ADMTabLayout, adapterChangeListener_, ADMTabLayout_AdapterChangeListener *)
J2OBJC_FIELD_SETTER(ADMTabLayout, tabViewPool_, id<ADPools_Pool>)

inline jint ADMTabLayout_get_DEFAULT_HEIGHT_WITH_TEXT_ICON(void);
#define ADMTabLayout_DEFAULT_HEIGHT_WITH_TEXT_ICON 72
J2OBJC_STATIC_FIELD_CONSTANT(ADMTabLayout, DEFAULT_HEIGHT_WITH_TEXT_ICON, jint)

inline jint ADMTabLayout_get_DEFAULT_HEIGHT(void);
#define ADMTabLayout_DEFAULT_HEIGHT 48
J2OBJC_STATIC_FIELD_CONSTANT(ADMTabLayout, DEFAULT_HEIGHT, jint)

inline jint ADMTabLayout_get_TAB_MIN_WIDTH_MARGIN(void);
#define ADMTabLayout_TAB_MIN_WIDTH_MARGIN 56
J2OBJC_STATIC_FIELD_CONSTANT(ADMTabLayout, TAB_MIN_WIDTH_MARGIN, jint)

inline jint ADMTabLayout_get_INVALID_WIDTH(void);
#define ADMTabLayout_INVALID_WIDTH -1
J2OBJC_STATIC_FIELD_CONSTANT(ADMTabLayout, INVALID_WIDTH, jint)

inline jint ADMTabLayout_get_ANIMATION_DURATION(void);
#define ADMTabLayout_ANIMATION_DURATION 300
J2OBJC_STATIC_FIELD_CONSTANT(ADMTabLayout, ANIMATION_DURATION, jint)

inline jint ADMTabLayout_get_SELECTED_INDICATOR_HEIGHT_DEFAULT(void);
#define ADMTabLayout_SELECTED_INDICATOR_HEIGHT_DEFAULT -1
J2OBJC_STATIC_FIELD_CONSTANT(ADMTabLayout, SELECTED_INDICATOR_HEIGHT_DEFAULT, jint)

inline id<ADPools_Pool> ADMTabLayout_get_tabPool(void);
static id<ADPools_Pool> ADMTabLayout_tabPool;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADMTabLayout, tabPool, id<ADPools_Pool>)

inline NSString *ADMTabLayout_get_LOG_TAG(void);
static NSString *ADMTabLayout_LOG_TAG = @"TabLayout";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADMTabLayout, LOG_TAG, NSString *)

inline jint ADMTabLayout_get_tintColor(void);
static jint ADMTabLayout_tintColor;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(ADMTabLayout, tintColor, jint)

__attribute__((unused)) static void ADMTabLayout_setupWithViewPagerWithADXViewPager_withBoolean_withBoolean_(ADMTabLayout *self, ADXViewPager *viewPager, jboolean autoRefresh, jboolean implicitSetup);

__attribute__((unused)) static ADMTabLayout_TabView *ADMTabLayout_createTabViewWithADMTabLayout_Tab_(ADMTabLayout *self, ADMTabLayout_Tab *tab);

__attribute__((unused)) static void ADMTabLayout_configureTabWithADMTabLayout_Tab_withInt_(ADMTabLayout *self, ADMTabLayout_Tab *tab, jint position);

__attribute__((unused)) static ADLinearLayout_LayoutParams *ADMTabLayout_createLayoutParamsForTabs(ADMTabLayout *self);

__attribute__((unused)) static void ADMTabLayout_updateTabViewLayoutParamsWithADLinearLayout_LayoutParams_(ADMTabLayout *self, ADLinearLayout_LayoutParams *lp);

__attribute__((unused)) static void ADMTabLayout_removeTabViewAtWithInt_(ADMTabLayout *self, jint position);

__attribute__((unused)) static void ADMTabLayout_ensureScrollAnimator(ADMTabLayout *self);

__attribute__((unused)) static void ADMTabLayout_dispatchTabSelectedWithADMTabLayout_Tab_(ADMTabLayout *self, ADMTabLayout_Tab *tab);

__attribute__((unused)) static void ADMTabLayout_dispatchTabUnselectedWithADMTabLayout_Tab_(ADMTabLayout *self, ADMTabLayout_Tab *tab);

__attribute__((unused)) static void ADMTabLayout_dispatchTabReselectedWithADMTabLayout_Tab_(ADMTabLayout *self, ADMTabLayout_Tab *tab);

__attribute__((unused)) static jint ADMTabLayout_calculateScrollXForTabWithInt_withFloat_(ADMTabLayout *self, jint position, jfloat positionOffset);

__attribute__((unused)) static void ADMTabLayout_applyGravityForModeScrollableWithInt_(ADMTabLayout *self, jint tabGravity);

__attribute__((unused)) static ADColorStateList *ADMTabLayout_createColorStateListWithInt_withInt_(jint defaultColor, jint selectedColor);

__attribute__((unused)) static jint ADMTabLayout_getDefaultHeight(ADMTabLayout *self);

__attribute__((unused)) static jint ADMTabLayout_getTabMinWidth(ADMTabLayout *self);

__attribute__((unused)) static jint ADMTabLayout_getChildTabItemCount(ADMTabLayout *self);

@interface ADMTabLayout_BaseOnTabSelectedListener : NSObject

@end

@interface ADMTabLayout_OnTabSelectedListener : NSObject

@end

@interface ADMTabLayout_1 : NSObject < ADValueAnimator_AnimatorUpdateListener > {
 @public
  ADMTabLayout *this$0_;
}

- (instancetype)initWithADMTabLayout:(ADMTabLayout *)outer$;

- (void)onAnimationUpdateWithADValueAnimator:(ADValueAnimator *)animator;

@end

J2OBJC_EMPTY_STATIC_INIT(ADMTabLayout_1)

__attribute__((unused)) static void ADMTabLayout_1_initWithADMTabLayout_(ADMTabLayout_1 *self, ADMTabLayout *outer$);

__attribute__((unused)) static ADMTabLayout_1 *new_ADMTabLayout_1_initWithADMTabLayout_(ADMTabLayout *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADMTabLayout_1 *create_ADMTabLayout_1_initWithADMTabLayout_(ADMTabLayout *outer$);

@interface ADMTabLayout_Tab () {
 @public
  id tag_;
  ADDrawable *icon_;
  id<JavaLangCharSequence> text_;
  id<JavaLangCharSequence> contentDesc_;
  jint position_;
  ADView *customView_;
  jint labelVisibilityMode_;
  jint id__;
}

@end

J2OBJC_FIELD_SETTER(ADMTabLayout_Tab, tag_, id)
J2OBJC_FIELD_SETTER(ADMTabLayout_Tab, icon_, ADDrawable *)
J2OBJC_FIELD_SETTER(ADMTabLayout_Tab, text_, id<JavaLangCharSequence>)
J2OBJC_FIELD_SETTER(ADMTabLayout_Tab, contentDesc_, id<JavaLangCharSequence>)
J2OBJC_FIELD_SETTER(ADMTabLayout_Tab, customView_, ADView *)

@interface ADMTabLayout_TabView () {
 @public
  ADMTabLayout *this$0_;
  ADMTabLayout_Tab *tab_;
  ADTextView *textView_;
  ADImageView *iconView_;
  ADView *badgeAnchorView_;
  ADXBadgeDrawable *badgeDrawable_;
  ADView *customView_;
  ADTextView *customTextView_;
  ADImageView *customIconView_;
  ADDrawable *baseBackgroundDrawable_;
  jint defaultMaxLines_;
}

- (void)updateBackgroundDrawableWithADContext:(ADContext *)context;

- (void)inflateAndAddDefaultIconView;

- (void)inflateAndAddDefaultTextView;

- (ADFrameLayout *)createPreApi18BadgeAnchorRoot;

- (ADXBadgeDrawable *)getOrCreateBadge;

- (ADXBadgeDrawable *)getBadge;

- (void)removeBadge;

- (void)addOnLayoutChangeListenerWithADView:(ADView *)view;

- (void)tryUpdateBadgeAnchor;

- (void)tryAttachBadgeToAnchorWithADView:(ADView *)anchorView;

- (void)tryRemoveBadgeFromAnchor;

- (void)clipViewToPaddingForBadgeWithBoolean:(jboolean)flag;

- (void)updateTextAndIconWithADTextView:(ADTextView *)textView
                        withADImageView:(ADImageView *)iconView
                            withBoolean:(jboolean)addDefaultMargins;

- (void)tryUpdateBadgeDrawableBoundsWithADView:(ADView *)anchor;

- (jboolean)hasBadgeDrawable;

- (ADFrameLayout *)getCustomParentForBadgeWithADView:(ADView *)anchor;

- (jfloat)approximateLineWidthWithADMTabLayout_Layout:(ADMTabLayout_Layout *)layout
                                              withInt:(jint)line
                                            withFloat:(jfloat)textSize;

@end

J2OBJC_FIELD_SETTER(ADMTabLayout_TabView, tab_, ADMTabLayout_Tab *)
J2OBJC_FIELD_SETTER(ADMTabLayout_TabView, textView_, ADTextView *)
J2OBJC_FIELD_SETTER(ADMTabLayout_TabView, iconView_, ADImageView *)
J2OBJC_FIELD_SETTER(ADMTabLayout_TabView, badgeAnchorView_, ADView *)
J2OBJC_FIELD_SETTER(ADMTabLayout_TabView, badgeDrawable_, ADXBadgeDrawable *)
J2OBJC_FIELD_SETTER(ADMTabLayout_TabView, customView_, ADView *)
J2OBJC_FIELD_SETTER(ADMTabLayout_TabView, customTextView_, ADTextView *)
J2OBJC_FIELD_SETTER(ADMTabLayout_TabView, customIconView_, ADImageView *)
J2OBJC_FIELD_SETTER(ADMTabLayout_TabView, baseBackgroundDrawable_, ADDrawable *)

__attribute__((unused)) static void ADMTabLayout_TabView_updateBackgroundDrawableWithADContext_(ADMTabLayout_TabView *self, ADContext *context);

__attribute__((unused)) static void ADMTabLayout_TabView_updateTab(ADMTabLayout_TabView *self);

__attribute__((unused)) static void ADMTabLayout_TabView_update(ADMTabLayout_TabView *self);

__attribute__((unused)) static void ADMTabLayout_TabView_inflateAndAddDefaultIconView(ADMTabLayout_TabView *self);

__attribute__((unused)) static void ADMTabLayout_TabView_inflateAndAddDefaultTextView(ADMTabLayout_TabView *self);

__attribute__((unused)) static ADFrameLayout *ADMTabLayout_TabView_createPreApi18BadgeAnchorRoot(ADMTabLayout_TabView *self);

__attribute__((unused)) static ADXBadgeDrawable *ADMTabLayout_TabView_getOrCreateBadge(ADMTabLayout_TabView *self);

__attribute__((unused)) static ADXBadgeDrawable *ADMTabLayout_TabView_getBadge(ADMTabLayout_TabView *self);

__attribute__((unused)) static void ADMTabLayout_TabView_removeBadge(ADMTabLayout_TabView *self);

__attribute__((unused)) static void ADMTabLayout_TabView_addOnLayoutChangeListenerWithADView_(ADMTabLayout_TabView *self, ADView *view);

__attribute__((unused)) static void ADMTabLayout_TabView_tryUpdateBadgeAnchor(ADMTabLayout_TabView *self);

__attribute__((unused)) static void ADMTabLayout_TabView_tryAttachBadgeToAnchorWithADView_(ADMTabLayout_TabView *self, ADView *anchorView);

__attribute__((unused)) static void ADMTabLayout_TabView_tryRemoveBadgeFromAnchor(ADMTabLayout_TabView *self);

__attribute__((unused)) static void ADMTabLayout_TabView_clipViewToPaddingForBadgeWithBoolean_(ADMTabLayout_TabView *self, jboolean flag);

__attribute__((unused)) static void ADMTabLayout_TabView_updateOrientation(ADMTabLayout_TabView *self);

__attribute__((unused)) static void ADMTabLayout_TabView_updateTextAndIconWithADTextView_withADImageView_withBoolean_(ADMTabLayout_TabView *self, ADTextView *textView, ADImageView *iconView, jboolean addDefaultMargins);

__attribute__((unused)) static void ADMTabLayout_TabView_tryUpdateBadgeDrawableBoundsWithADView_(ADMTabLayout_TabView *self, ADView *anchor);

__attribute__((unused)) static jboolean ADMTabLayout_TabView_hasBadgeDrawable(ADMTabLayout_TabView *self);

__attribute__((unused)) static ADFrameLayout *ADMTabLayout_TabView_getCustomParentForBadgeWithADView_(ADMTabLayout_TabView *self, ADView *anchor);

__attribute__((unused)) static jfloat ADMTabLayout_TabView_approximateLineWidthWithADMTabLayout_Layout_withInt_withFloat_(ADMTabLayout_TabView *self, ADMTabLayout_Layout *layout, jint line, jfloat textSize);

@interface ADMTabLayout_TabView_1 : NSObject < ADView_OnClickListener > {
 @public
  ADMTabLayout_TabView *this$0_;
}

- (instancetype)initWithADMTabLayout_TabView:(ADMTabLayout_TabView *)outer$;

- (void)onClickWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ADMTabLayout_TabView_1)

__attribute__((unused)) static void ADMTabLayout_TabView_1_initWithADMTabLayout_TabView_(ADMTabLayout_TabView_1 *self, ADMTabLayout_TabView *outer$);

__attribute__((unused)) static ADMTabLayout_TabView_1 *new_ADMTabLayout_TabView_1_initWithADMTabLayout_TabView_(ADMTabLayout_TabView *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADMTabLayout_TabView_1 *create_ADMTabLayout_TabView_1_initWithADMTabLayout_TabView_(ADMTabLayout_TabView *outer$);

@interface ADMTabLayout_TabView_2 : NSObject < ADView_OnLayoutChangeListener > {
 @public
  ADMTabLayout_TabView *this$0_;
  ADView *val$view_;
}

- (instancetype)initWithADMTabLayout_TabView:(ADMTabLayout_TabView *)outer$
                                  withADView:(ADView *)capture$0;

- (void)onLayoutChangeWithADView:(ADView *)v
                         withInt:(jint)left
                         withInt:(jint)top
                         withInt:(jint)right
                         withInt:(jint)bottom
                         withInt:(jint)oldLeft
                         withInt:(jint)oldTop
                         withInt:(jint)oldRight
                         withInt:(jint)oldBottom;

@end

J2OBJC_EMPTY_STATIC_INIT(ADMTabLayout_TabView_2)

__attribute__((unused)) static void ADMTabLayout_TabView_2_initWithADMTabLayout_TabView_withADView_(ADMTabLayout_TabView_2 *self, ADMTabLayout_TabView *outer$, ADView *capture$0);

__attribute__((unused)) static ADMTabLayout_TabView_2 *new_ADMTabLayout_TabView_2_initWithADMTabLayout_TabView_withADView_(ADMTabLayout_TabView *outer$, ADView *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADMTabLayout_TabView_2 *create_ADMTabLayout_TabView_2_initWithADMTabLayout_TabView_withADView_(ADMTabLayout_TabView *outer$, ADView *capture$0);

@interface ADMTabLayout_SlidingTabIndicator () {
 @public
  ADMTabLayout *this$0_;
  jint layoutDirection_;
}

- (void)jumpIndicatorToPositionWithInt:(jint)position;

- (void)jumpIndicatorToSelectedPosition;

- (void)jumpIndicatorToIndicatorPosition;

- (void)tweenIndicatorPositionWithADView:(ADView *)startTitle
                              withADView:(ADView *)endTitle
                               withFloat:(jfloat)fraction;

- (void)updateOrRecreateIndicatorAnimationWithBoolean:(jboolean)recreateAnimation
                                              withInt:(jint)position
                                              withInt:(jint)duration;

@end

__attribute__((unused)) static void ADMTabLayout_SlidingTabIndicator_jumpIndicatorToPositionWithInt_(ADMTabLayout_SlidingTabIndicator *self, jint position);

__attribute__((unused)) static void ADMTabLayout_SlidingTabIndicator_jumpIndicatorToSelectedPosition(ADMTabLayout_SlidingTabIndicator *self);

__attribute__((unused)) static void ADMTabLayout_SlidingTabIndicator_jumpIndicatorToIndicatorPosition(ADMTabLayout_SlidingTabIndicator *self);

__attribute__((unused)) static void ADMTabLayout_SlidingTabIndicator_tweenIndicatorPositionWithADView_withADView_withFloat_(ADMTabLayout_SlidingTabIndicator *self, ADView *startTitle, ADView *endTitle, jfloat fraction);

__attribute__((unused)) static void ADMTabLayout_SlidingTabIndicator_updateOrRecreateIndicatorAnimationWithBoolean_withInt_withInt_(ADMTabLayout_SlidingTabIndicator *self, jboolean recreateAnimation, jint position, jint duration);

@interface ADMTabLayout_SlidingTabIndicator_1 : NSObject < ADValueAnimator_AnimatorUpdateListener > {
 @public
  ADMTabLayout_SlidingTabIndicator *this$0_;
  ADView *val$currentView_;
  ADView *val$targetView_;
}

- (instancetype)initWithADMTabLayout_SlidingTabIndicator:(ADMTabLayout_SlidingTabIndicator *)outer$
                                              withADView:(ADView *)capture$0
                                              withADView:(ADView *)capture$1;

- (void)onAnimationUpdateWithADValueAnimator:(ADValueAnimator *)valueAnimator;

@end

J2OBJC_EMPTY_STATIC_INIT(ADMTabLayout_SlidingTabIndicator_1)

__attribute__((unused)) static void ADMTabLayout_SlidingTabIndicator_1_initWithADMTabLayout_SlidingTabIndicator_withADView_withADView_(ADMTabLayout_SlidingTabIndicator_1 *self, ADMTabLayout_SlidingTabIndicator *outer$, ADView *capture$0, ADView *capture$1);

__attribute__((unused)) static ADMTabLayout_SlidingTabIndicator_1 *new_ADMTabLayout_SlidingTabIndicator_1_initWithADMTabLayout_SlidingTabIndicator_withADView_withADView_(ADMTabLayout_SlidingTabIndicator *outer$, ADView *capture$0, ADView *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADMTabLayout_SlidingTabIndicator_1 *create_ADMTabLayout_SlidingTabIndicator_1_initWithADMTabLayout_SlidingTabIndicator_withADView_withADView_(ADMTabLayout_SlidingTabIndicator *outer$, ADView *capture$0, ADView *capture$1);

@interface ADMTabLayout_TabLayoutOnPageChangeListener () {
 @public
  JavaLangRefWeakReference *tabLayoutRef_;
  jint previousScrollState_;
  jint scrollState_;
}

@end

J2OBJC_FIELD_SETTER(ADMTabLayout_TabLayoutOnPageChangeListener, tabLayoutRef_, JavaLangRefWeakReference *)

@interface ADMTabLayout_ViewPagerOnTabSelectedListener () {
 @public
  ADXViewPager *viewPager_;
}

@end

J2OBJC_FIELD_SETTER(ADMTabLayout_ViewPagerOnTabSelectedListener, viewPager_, ADXViewPager *)

@interface ADMTabLayout_PagerAdapterObserver : ADDataSetObserver {
 @public
  ADMTabLayout *this$0_;
}

- (instancetype)initWithADMTabLayout:(ADMTabLayout *)outer$;

- (void)onChanged;

- (void)onInvalidated;

@end

J2OBJC_EMPTY_STATIC_INIT(ADMTabLayout_PagerAdapterObserver)

__attribute__((unused)) static void ADMTabLayout_PagerAdapterObserver_initWithADMTabLayout_(ADMTabLayout_PagerAdapterObserver *self, ADMTabLayout *outer$);

__attribute__((unused)) static ADMTabLayout_PagerAdapterObserver *new_ADMTabLayout_PagerAdapterObserver_initWithADMTabLayout_(ADMTabLayout *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADMTabLayout_PagerAdapterObserver *create_ADMTabLayout_PagerAdapterObserver_initWithADMTabLayout_(ADMTabLayout *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ADMTabLayout_PagerAdapterObserver)

@interface ADMTabLayout_AdapterChangeListener : NSObject < ADXViewPager_OnAdapterChangeListener > {
 @public
  ADMTabLayout *this$0_;
  jboolean autoRefresh_;
}

- (instancetype)initWithADMTabLayout:(ADMTabLayout *)outer$;

- (void)onAdapterChangedWithADXViewPager:(ADXViewPager *)viewPager
                     withADXPagerAdapter:(ADXPagerAdapter *)oldAdapter
                     withADXPagerAdapter:(ADXPagerAdapter *)newAdapter;

- (void)setAutoRefreshWithBoolean:(jboolean)autoRefresh;

@end

J2OBJC_EMPTY_STATIC_INIT(ADMTabLayout_AdapterChangeListener)

__attribute__((unused)) static void ADMTabLayout_AdapterChangeListener_initWithADMTabLayout_(ADMTabLayout_AdapterChangeListener *self, ADMTabLayout *outer$);

__attribute__((unused)) static ADMTabLayout_AdapterChangeListener *new_ADMTabLayout_AdapterChangeListener_initWithADMTabLayout_(ADMTabLayout *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADMTabLayout_AdapterChangeListener *create_ADMTabLayout_AdapterChangeListener_initWithADMTabLayout_(ADMTabLayout *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ADMTabLayout_AdapterChangeListener)

J2OBJC_INITIALIZED_DEFN(ADMTabLayout)

@implementation ADMTabLayout

- (void)setSelectedTabIndicatorColorWithInt:(jint)color {
  self->tabSelectedIndicatorColor_ = color;
  [((ADDrawable *) nil_chk(tabSelectedIndicator_)) setDrawableWithId:JavaLangInteger_valueOfWithInt_(tabSelectedIndicatorColor_)];
  [self updateTabViewsWithBoolean:false];
}

- (void)setSelectedTabIndicatorHeightWithInt:(jint)height {
  tabIndicatorHeight_ = height;
  [((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) setSelectedIndicatorHeightWithInt:height];
}

- (void)setScrollPositionWithInt:(jint)position
                       withFloat:(jfloat)positionOffset
                     withBoolean:(jboolean)updateSelectedTabView {
  [self setScrollPositionWithInt:position withFloat:positionOffset withBoolean:updateSelectedTabView withBoolean:true];
}

- (void)setScrollPositionWithInt:(jint)position
                       withFloat:(jfloat)positionOffset
                     withBoolean:(jboolean)updateSelectedTabView
                     withBoolean:(jboolean)updateIndicatorPosition {
  [self setScrollPositionWithInt:position withFloat:positionOffset withBoolean:updateSelectedTabView withBoolean:updateIndicatorPosition withBoolean:true];
}

- (void)setScrollPositionWithInt:(jint)position
                       withFloat:(jfloat)positionOffset
                     withBoolean:(jboolean)updateSelectedTabView
                     withBoolean:(jboolean)updateIndicatorPosition
                     withBoolean:(jboolean)alwaysScroll {
  jint roundedPosition = JavaLangMath_roundWithFloat_(position + positionOffset);
  if (roundedPosition < 0 || roundedPosition >= [((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) getChildCount]) {
    return;
  }
  if (updateIndicatorPosition) {
    [((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) setIndicatorPositionFromTabPositionWithInt:position withFloat:positionOffset];
  }
  if (scrollAnimator_ != nil && [scrollAnimator_ isRunning]) {
    [scrollAnimator_ cancel];
  }
  jint scrollXForPosition = ADMTabLayout_calculateScrollXForTabWithInt_withFloat_(self, position, positionOffset);
  jint scrollX = [self getScrollX];
  jboolean toMove = (position < [self getSelectedTabPosition] && scrollXForPosition >= scrollX) || (position > [self getSelectedTabPosition] && scrollXForPosition <= scrollX) || (position == [self getSelectedTabPosition]);
  if (ADXViewCompat_getLayoutDirectionWithADView_(self) == ADXViewCompat_LAYOUT_DIRECTION_RTL) {
    toMove = ((position < [self getSelectedTabPosition] && scrollXForPosition <= scrollX) || (position > [self getSelectedTabPosition] && scrollXForPosition >= scrollX) || (position == [self getSelectedTabPosition]));
  }
  if (toMove || viewPagerScrollState_ == ADXViewPager_SCROLL_STATE_DRAGGING || alwaysScroll) {
    [self scrollToWithInt:position < 0 ? 0 : scrollXForPosition withInt:0];
  }
  if (updateSelectedTabView) {
    [self setSelectedTabViewWithInt:roundedPosition];
  }
}

- (void)addTabWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab {
  [self addTabWithADMTabLayout_Tab:tab withBoolean:[((JavaUtilArrayList *) nil_chk(tabs_)) isEmpty]];
}

- (void)addTabWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab
                           withInt:(jint)position {
  [self addTabWithADMTabLayout_Tab:tab withInt:position withBoolean:[((JavaUtilArrayList *) nil_chk(tabs_)) isEmpty]];
}

- (void)addTabWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab
                       withBoolean:(jboolean)setSelected {
  [self addTabWithADMTabLayout_Tab:tab withInt:[((JavaUtilArrayList *) nil_chk(tabs_)) size] withBoolean:setSelected];
}

- (void)addTabWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab
                           withInt:(jint)position
                       withBoolean:(jboolean)setSelected {
  if (((ADMTabLayout_Tab *) nil_chk(tab))->parent_ != self) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Tab belongs to a different TabLayout.");
  }
  ADMTabLayout_configureTabWithADMTabLayout_Tab_withInt_(self, tab, position);
  [self addTabViewWithADMTabLayout_Tab:tab];
  if (setSelected) {
    [tab select];
  }
}

- (void)setOnTabSelectedListenerWithADMTabLayout_OnTabSelectedListener:(id<ADMTabLayout_OnTabSelectedListener>)listener {
  [self setOnTabSelectedListenerWithADMTabLayout_BaseOnTabSelectedListener:listener];
}

- (void)setOnTabSelectedListenerWithADMTabLayout_BaseOnTabSelectedListener:(id<ADMTabLayout_BaseOnTabSelectedListener>)listener {
  if (selectedListener_ != nil) {
    [self removeOnTabSelectedListenerWithADMTabLayout_BaseOnTabSelectedListener:selectedListener_];
  }
  JreStrongAssign(&selectedListener_, listener);
  if (listener != nil) {
    [self addOnTabSelectedListenerWithADMTabLayout_BaseOnTabSelectedListener:listener];
  }
}

- (void)addOnTabSelectedListenerWithADMTabLayout_OnTabSelectedListener:(id<ADMTabLayout_OnTabSelectedListener>)listener {
  [self addOnTabSelectedListenerWithADMTabLayout_BaseOnTabSelectedListener:listener];
}

- (void)addOnTabSelectedListenerWithADMTabLayout_BaseOnTabSelectedListener:(id<ADMTabLayout_BaseOnTabSelectedListener>)listener {
  if (![((JavaUtilArrayList *) nil_chk(selectedListeners_)) containsWithId:listener]) {
    [selectedListeners_ addWithId:listener];
  }
}

- (void)removeOnTabSelectedListenerWithADMTabLayout_OnTabSelectedListener:(id<ADMTabLayout_OnTabSelectedListener>)listener {
  [self removeOnTabSelectedListenerWithADMTabLayout_BaseOnTabSelectedListener:listener];
}

- (void)removeOnTabSelectedListenerWithADMTabLayout_BaseOnTabSelectedListener:(id<ADMTabLayout_BaseOnTabSelectedListener>)listener {
  [((JavaUtilArrayList *) nil_chk(selectedListeners_)) removeWithId:listener];
}

- (ADMTabLayout_Tab *)newTab {
  ADMTabLayout_Tab *tab = JreRetainedLocalValue([self createTabFromPool]);
  JreStrongAssign(&((ADMTabLayout_Tab *) nil_chk(tab))->parent_, self);
  JreStrongAssign(&tab->view_, ADMTabLayout_createTabViewWithADMTabLayout_Tab_(self, tab));
  if (tab->id__ != ADView_NO_ID) {
    [((ADMTabLayout_TabView *) nil_chk(tab->view_)) setIdWithInt:tab->id__];
  }
  return tab;
}

- (ADMTabLayout_Tab *)createTabFromPool {
  ADMTabLayout_Tab *tab = JreRetainedLocalValue([((id<ADPools_Pool>) nil_chk(ADMTabLayout_tabPool)) acquire]);
  if (tab == nil) {
    tab = create_ADMTabLayout_Tab_init();
  }
  return tab;
}

- (jboolean)releaseFromTabPoolWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab {
  return [((id<ADPools_Pool>) nil_chk(ADMTabLayout_tabPool)) release__WithId:tab];
}

- (jint)getTabCount {
  return [((JavaUtilArrayList *) nil_chk(tabs_)) size];
}

- (ADMTabLayout_Tab *)getTabAtWithInt:(jint)index {
  return (index < 0 || index >= [self getTabCount]) ? nil : [((JavaUtilArrayList *) nil_chk(tabs_)) getWithInt:index];
}

- (jint)getSelectedTabPosition {
  return selectedTab_ != nil ? [selectedTab_ getPosition] : -1;
}

- (void)removeTabWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab {
  if (((ADMTabLayout_Tab *) nil_chk(tab))->parent_ != self) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Tab does not belong to this TabLayout.");
  }
  [self removeTabAtWithInt:[tab getPosition]];
}

- (void)removeTabAtWithInt:(jint)position {
  jint selectedTabPosition = selectedTab_ != nil ? [selectedTab_ getPosition] : 0;
  ADMTabLayout_removeTabViewAtWithInt_(self, position);
  ADMTabLayout_Tab *removedTab = [((JavaUtilArrayList *) nil_chk(tabs_)) removeWithInt:position];
  if (removedTab != nil) {
    [removedTab reset];
    [self releaseFromTabPoolWithADMTabLayout_Tab:removedTab];
  }
  jint newTabCount = [tabs_ size];
  jint newIndicatorPosition = -1;
  for (jint i = position; i < newTabCount; i++) {
    if ([((ADMTabLayout_Tab *) nil_chk([tabs_ getWithInt:i])) getPosition] == indicatorPosition_) {
      newIndicatorPosition = i;
    }
    [((ADMTabLayout_Tab *) nil_chk([tabs_ getWithInt:i])) setPositionWithInt:i];
  }
  indicatorPosition_ = newIndicatorPosition;
  if (selectedTabPosition == position) {
    [self selectTabWithADMTabLayout_Tab:[tabs_ isEmpty] ? nil : [tabs_ getWithInt:JavaLangMath_maxWithInt_withInt_(0, position - 1)]];
  }
}

- (void)removeAllTabs {
  for (jint i = [((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) getChildCount] - 1; i >= 0; i--) {
    ADMTabLayout_removeTabViewAtWithInt_(self, i);
  }
  for (id<JavaUtilIterator> i = [((JavaUtilArrayList *) nil_chk(tabs_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ADMTabLayout_Tab *tab = [i next];
    [i remove];
    [((ADMTabLayout_Tab *) nil_chk(tab)) reset];
    [self releaseFromTabPoolWithADMTabLayout_Tab:tab];
  }
  JreStrongAssign(&selectedTab_, nil);
}

- (void)setTabModeWithInt:(jint)mode {
  if (mode != self->mode_) {
    self->mode_ = mode;
    [self applyModeAndGravity];
  }
}

- (void)setTabGravityWithInt:(jint)gravity {
  if (tabGravity_ != gravity) {
    tabGravity_ = gravity;
    [self applyModeAndGravity];
  }
}

- (void)setSelectedTabIndicatorGravityWithInt:(jint)indicatorGravity {
  if (tabIndicatorGravity_ != indicatorGravity) {
    tabIndicatorGravity_ = indicatorGravity;
  }
}

- (void)setTabIndicatorAnimationModeWithInt:(jint)tabIndicatorAnimationMode {
  self->tabIndicatorAnimationMode_ = tabIndicatorAnimationMode;
  switch (tabIndicatorAnimationMode) {
    case ADMTabLayout_INDICATOR_ANIMATION_MODE_LINEAR:
    JreStrongAssignAndConsume(&self->tabIndicatorInterpolator_, new_ADMTabIndicatorInterpolator_initPackagePrivate());
    break;
    case ADMTabLayout_INDICATOR_ANIMATION_MODE_ELASTIC:
    JreStrongAssignAndConsume(&self->tabIndicatorInterpolator_, new_ADMElasticTabIndicatorInterpolator_initPackagePrivate());
    break;
    case ADMTabLayout_INDICATOR_ANIMATION_MODE_FADE:
    JreStrongAssignAndConsume(&self->tabIndicatorInterpolator_, new_ADMFadeTabIndicatorInterpolator_initPackagePrivate());
    break;
    default:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("I$", tabIndicatorAnimationMode, @" is not a valid TabIndicatorAnimationMode"));
  }
}

- (jint)getTabIndicatorAnimationMode {
  return tabIndicatorAnimationMode_;
}

- (void)setTabIndicatorFullWidthWithBoolean:(jboolean)tabIndicatorFullWidth {
  self->tabIndicatorFullWidth_ = tabIndicatorFullWidth;
  ADMTabLayout_SlidingTabIndicator_jumpIndicatorToSelectedPosition(nil_chk(slidingTabIndicator_));
}

- (jboolean)isTabIndicatorFullWidth {
  return tabIndicatorFullWidth_;
}

- (void)setInlineLabelWithBoolean:(jboolean)inline_ {
  if (inlineLabel_ != inline_) {
    inlineLabel_ = inline_;
    for (jint i = 0; i < [((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) getChildCount]; i++) {
      ADView *child = JreRetainedLocalValue([((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) getChildAtWithInt:i]);
      if ([child isKindOfClass:[ADMTabLayout_TabView class]]) {
        ADMTabLayout_TabView_updateOrientation(nil_chk(((ADMTabLayout_TabView *) child)));
      }
    }
    [self applyModeAndGravity];
  }
}

- (void)setTabTextColorsWithADColorStateList:(ADColorStateList *)textColor {
  if (tabTextColors_ != textColor) {
    JreStrongAssign(&tabTextColors_, textColor);
    [self updateAllTabs];
  }
}

- (ADColorStateList *)getTabTextColors {
  return tabTextColors_;
}

- (void)setTabTextColorsWithInt:(jint)normalColor
                        withInt:(jint)selectedColor {
  [self setTabTextColorsWithADColorStateList:ADMTabLayout_createColorStateListWithInt_withInt_(normalColor, selectedColor)];
}

- (void)setTabIconTintWithADColorStateList:(ADColorStateList *)iconTint {
  if (tabIconTint_ != iconTint) {
    JreStrongAssign(&tabIconTint_, iconTint);
    [self updateAllTabs];
  }
}

- (ADDrawable *)getTabSelectedIndicator {
  return tabSelectedIndicator_;
}

- (void)setupWithViewPagerWithADXViewPager:(ADXViewPager *)viewPager {
  [self setupWithViewPagerWithADXViewPager:viewPager withBoolean:true];
}

- (void)setupWithViewPagerWithADXViewPager:(ADXViewPager *)viewPager
                               withBoolean:(jboolean)autoRefresh {
  ADMTabLayout_setupWithViewPagerWithADXViewPager_withBoolean_withBoolean_(self, viewPager, autoRefresh, false);
}

- (void)setupWithViewPagerWithADXViewPager:(ADXViewPager *)viewPager
                               withBoolean:(jboolean)autoRefresh
                               withBoolean:(jboolean)implicitSetup {
  ADMTabLayout_setupWithViewPagerWithADXViewPager_withBoolean_withBoolean_(self, viewPager, autoRefresh, implicitSetup);
}

- (void)updateViewPagerScrollStateWithInt:(jint)scrollState {
  self->viewPagerScrollState_ = scrollState;
}

- (void)setPagerAdapterWithADXPagerAdapter:(ADXPagerAdapter *)adapter
                               withBoolean:(jboolean)addObserver {
  if (pagerAdapter_ != nil && pagerAdapterObserver_ != nil) {
    [pagerAdapter_ unregisterDataSetObserverWithADDataSetObserver:pagerAdapterObserver_];
  }
  JreStrongAssign(&pagerAdapter_, adapter);
  if (addObserver && adapter != nil) {
    if (pagerAdapterObserver_ == nil) {
      JreStrongAssignAndConsume(&pagerAdapterObserver_, new_ADMTabLayout_PagerAdapterObserver_initWithADMTabLayout_(self));
    }
    [adapter registerDataSetObserverWithADDataSetObserver:pagerAdapterObserver_];
  }
  [self populateFromPagerAdapter];
}

- (void)populateFromPagerAdapter {
  [self removeAllTabs];
  if (pagerAdapter_ != nil) {
    jint adapterCount = [pagerAdapter_ getCount];
    for (jint i = 0; i < adapterCount; i++) {
      [self addTabWithADMTabLayout_Tab:[((ADMTabLayout_Tab *) nil_chk([self newTab])) setTextWithJavaLangCharSequence:[((ADXPagerAdapter *) nil_chk(pagerAdapter_)) getPageTitleWithInt:i]] withBoolean:false];
    }
    if (viewPager_ != nil && adapterCount > 0) {
      jint curItem = [viewPager_ getCurrentItem];
      if (curItem != [self getSelectedTabPosition] && curItem < [self getTabCount]) {
        [self selectTabWithADMTabLayout_Tab:[self getTabAtWithInt:curItem]];
      }
    }
  }
}

- (void)updateAllTabs {
  for (jint i = 0, z = [((JavaUtilArrayList *) nil_chk(tabs_)) size]; i < z; i++) {
    [((ADMTabLayout_Tab *) nil_chk([tabs_ getWithInt:i])) updateView];
  }
}

- (ADMTabLayout_TabView *)createTabViewWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab {
  return ADMTabLayout_createTabViewWithADMTabLayout_Tab_(self, tab);
}

- (void)configureTabWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab
                                 withInt:(jint)position {
  ADMTabLayout_configureTabWithADMTabLayout_Tab_withInt_(self, tab, position);
}

- (void)addTabViewWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab {
  ADMTabLayout_TabView *tabView = ((ADMTabLayout_Tab *) nil_chk(tab))->view_;
  [((ADMTabLayout_TabView *) nil_chk(tabView)) setSelectedWithBoolean:false];
  [tabView setActivatedWithBoolean:false];
  [((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) addViewWithADView:tabView withInt:[tab getPosition] withADViewGroup_LayoutParams:ADMTabLayout_createLayoutParamsForTabs(self)];
}

- (ADLinearLayout_LayoutParams *)createLayoutParamsForTabs {
  return ADMTabLayout_createLayoutParamsForTabs(self);
}

- (void)updateTabViewLayoutParamsWithADLinearLayout_LayoutParams:(ADLinearLayout_LayoutParams *)lp {
  ADMTabLayout_updateTabViewLayoutParamsWithADLinearLayout_LayoutParams_(self, lp);
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  jint idealHeight = JavaLangMath_roundWithFloat_(ASPluginInvoker_convertDpToPixelWithNSString_(JreStrcat("I$", ADMTabLayout_getDefaultHeight(self), @"dp")));
  switch (ADView_MeasureSpec_getModeWithInt_(heightMeasureSpec)) {
    case ADView_MeasureSpec_AT_MOST:
    if ([self getChildCount] == 1 && ADView_MeasureSpec_getSizeWithInt_(heightMeasureSpec) >= idealHeight) {
      [((ADView *) nil_chk([self getChildAtWithInt:0])) setMinimumHeightWithInt:idealHeight];
    }
    break;
    case ADView_MeasureSpec_UNSPECIFIED:
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(idealHeight + [self getPaddingTop] + [self getPaddingBottom], ADView_MeasureSpec_EXACTLY);
    break;
    default:
    break;
  }
  jint specWidth = ADView_MeasureSpec_getSizeWithInt_(widthMeasureSpec);
  if (ADView_MeasureSpec_getModeWithInt_(widthMeasureSpec) != ADView_MeasureSpec_UNSPECIFIED) {
    tabMaxWidth_ = requestedTabMaxWidth_ > 0 ? requestedTabMaxWidth_ : JreFpToInt((specWidth - ASPluginInvoker_convertDpToPixelWithNSString_(JreStrcat("I$", ADMTabLayout_TAB_MIN_WIDTH_MARGIN, @"dp"))));
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  if ([self getChildCount] - ADMTabLayout_getChildTabItemCount(self) == 1) {
    ADView *child = [self getChildAtWithInt:0];
    jboolean remeasure = false;
    switch (mode_) {
      case ADMTabLayout_MODE_AUTO:
      case ADMTabLayout_MODE_SCROLLABLE:
      remeasure = ([((ADView *) nil_chk(child)) getMeasuredWidth] < [self getMeasuredWidth]);
      break;
      case ADMTabLayout_MODE_FIXED:
      remeasure = ([((ADView *) nil_chk(child)) getMeasuredWidth] != [self getMeasuredWidth]);
      break;
    }
    if (remeasure) {
      jint childHeightMeasureSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(heightMeasureSpec, [self getPaddingTop] + [self getPaddingBottom], ((ADViewGroup_LayoutParams *) nil_chk([((ADView *) nil_chk(child)) getLayoutParams]))->height_);
      jint childWidthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_([self getMeasuredWidth], ADView_MeasureSpec_EXACTLY);
      [child measureWithInt:childWidthMeasureSpec withInt:childHeightMeasureSpec];
    }
  }
}

- (void)removeTabViewAtWithInt:(jint)position {
  ADMTabLayout_removeTabViewAtWithInt_(self, position);
}

- (void)animateToTabWithInt:(jint)newPosition {
  if (newPosition == ADMTabLayout_Tab_INVALID_POSITION) {
    return;
  }
  if (!ADXViewCompat_isLaidOutWithADView_(self) || [((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) childrenNeedLayout]) {
    [self setScrollPositionWithInt:newPosition withFloat:0.0f withBoolean:true];
    return;
  }
  jint startScrollX = [self getScrollX];
  jint targetScrollX = ADMTabLayout_calculateScrollXForTabWithInt_withFloat_(self, newPosition, 0);
  if (startScrollX != targetScrollX) {
    ADMTabLayout_ensureScrollAnimator(self);
    [((ADValueAnimator *) nil_chk(scrollAnimator_)) setIntValuesWithIntArray:[IOSIntArray arrayWithInts:(jint[]){ startScrollX, targetScrollX } count:2]];
    [((ADValueAnimator *) nil_chk(scrollAnimator_)) start];
  }
  [((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) animateIndicatorToPositionWithInt:newPosition withInt:tabIndicatorAnimationDuration_];
}

- (void)ensureScrollAnimator {
  ADMTabLayout_ensureScrollAnimator(self);
}

- (void)setSelectedTabViewWithInt:(jint)position {
  jint tabCount = [((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) getChildCount];
  if (position < tabCount) {
    for (jint i = 0; i < tabCount; i++) {
      ADView *child = [((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) getChildAtWithInt:i];
      if ((i == position && ![((ADView *) nil_chk(child)) isSelected]) || (i != position && [((ADView *) nil_chk(child)) isSelected])) {
        [((ADView *) nil_chk(child)) setSelectedWithBoolean:i == position];
        [child setActivatedWithBoolean:i == position];
        if ([child isKindOfClass:[ADMTabLayout_TabView class]]) {
          ADMTabLayout_TabView_updateTab(((ADMTabLayout_TabView *) child));
        }
        continue;
      }
      [((ADView *) nil_chk(child)) setSelectedWithBoolean:i == position];
      [child setActivatedWithBoolean:i == position];
    }
  }
}

- (void)selectTabWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab {
  [self selectTabWithADMTabLayout_Tab:tab withBoolean:true];
}

- (void)selectTabWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab
                          withBoolean:(jboolean)updateIndicator {
  ADMTabLayout_Tab *currentTab = selectedTab_;
  if (currentTab == tab) {
    if (currentTab != nil) {
      ADMTabLayout_dispatchTabReselectedWithADMTabLayout_Tab_(self, tab);
      [self animateToTabWithInt:[((ADMTabLayout_Tab *) nil_chk(tab)) getPosition]];
    }
  }
  else {
    jint newPosition = tab != nil ? [tab getPosition] : ADMTabLayout_Tab_INVALID_POSITION;
    if (updateIndicator) {
      if ((currentTab == nil || [currentTab getPosition] == ADMTabLayout_Tab_INVALID_POSITION) && newPosition != ADMTabLayout_Tab_INVALID_POSITION) {
        [self setScrollPositionWithInt:newPosition withFloat:0.0f withBoolean:true];
      }
      else {
        [self animateToTabWithInt:newPosition];
      }
      if (newPosition != ADMTabLayout_Tab_INVALID_POSITION) {
        [self setSelectedTabViewWithInt:newPosition];
      }
    }
    JreStrongAssign(&selectedTab_, tab);
    if (currentTab != nil && currentTab->parent_ != nil) {
      ADMTabLayout_dispatchTabUnselectedWithADMTabLayout_Tab_(self, currentTab);
    }
    if (tab != nil) {
      ADMTabLayout_dispatchTabSelectedWithADMTabLayout_Tab_(self, tab);
    }
  }
}

- (void)dispatchTabSelectedWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab {
  ADMTabLayout_dispatchTabSelectedWithADMTabLayout_Tab_(self, tab);
}

- (void)dispatchTabUnselectedWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab {
  ADMTabLayout_dispatchTabUnselectedWithADMTabLayout_Tab_(self, tab);
}

- (void)dispatchTabReselectedWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab {
  ADMTabLayout_dispatchTabReselectedWithADMTabLayout_Tab_(self, tab);
}

- (jint)calculateScrollXForTabWithInt:(jint)position
                            withFloat:(jfloat)positionOffset {
  return ADMTabLayout_calculateScrollXForTabWithInt_withFloat_(self, position, positionOffset);
}

- (void)applyModeAndGravity {
  jint paddingStart = 0;
  if (mode_ == ADMTabLayout_MODE_SCROLLABLE || mode_ == ADMTabLayout_MODE_AUTO) {
    paddingStart = JavaLangMath_maxWithInt_withInt_(0, contentInsetStart_ - tabPaddingStart_);
  }
  ADXViewCompat_setPaddingRelativeWithADView_withInt_withInt_withInt_withInt_(slidingTabIndicator_, paddingStart, 0, 0, 0);
  switch (mode_) {
    case ADMTabLayout_MODE_AUTO:
    case ADMTabLayout_MODE_FIXED:
    if (tabGravity_ == ADMTabLayout_GRAVITY_START) {
      ADLog_wWithNSString_withNSString_(ADMTabLayout_LOG_TAG, @"GRAVITY_START is not supported with the current tab mode, GRAVITY_CENTER will be used instead");
    }
    [((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) setGravityWithInt:ADGravity_CENTER_HORIZONTAL];
    break;
    case ADMTabLayout_MODE_SCROLLABLE:
    ADMTabLayout_applyGravityForModeScrollableWithInt_(self, tabGravity_);
    break;
  }
  [self updateTabViewsWithBoolean:true];
}

- (void)applyGravityForModeScrollableWithInt:(jint)tabGravity {
  ADMTabLayout_applyGravityForModeScrollableWithInt_(self, tabGravity);
}

- (void)updateTabViewsWithBoolean:(jboolean)requestLayout {
  for (jint i = 0; i < [((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) getChildCount]; i++) {
    ADView *child = JreRetainedLocalValue([((ADMTabLayout_SlidingTabIndicator *) nil_chk(slidingTabIndicator_)) getChildAtWithInt:i]);
    [((ADView *) nil_chk(child)) setMinimumWidthWithInt:ADMTabLayout_getTabMinWidth(self)];
    ADMTabLayout_updateTabViewLayoutParamsWithADLinearLayout_LayoutParams_(self, (ADLinearLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADLinearLayout_LayoutParams class]));
    if (requestLayout) {
      [child requestLayout];
    }
  }
}

+ (ADColorStateList *)createColorStateListWithInt:(jint)defaultColor
                                          withInt:(jint)selectedColor {
  return ADMTabLayout_createColorStateListWithInt_withInt_(defaultColor, selectedColor);
}

- (jint)getDefaultHeight {
  return ADMTabLayout_getDefaultHeight(self);
}

- (jint)getTabMinWidth {
  return ADMTabLayout_getTabMinWidth(self);
}

- (jint)getTabMaxWidth {
  return tabMaxWidth_;
}

- (jint)getScrollX {
  jint scrollX = [((NSNumber *) nil_chk(((NSNumber *) cast_chk([((id<ASIWidget>) nil_chk([((id<ASILifeCycleDecorator>) cast_check(self, ASILifeCycleDecorator_class_())) getWidget])) getAttributeWithNSString:@"scrollX" withBoolean:true], [NSNumber class])))) intValue];
  return scrollX;
}

- (ADColorStateList *)getTabIconTint {
  return tabIconTint_;
}

- (void)setTabTextAppearanceWithNSString:(NSString *)tabTextAppearance {
  JreStrongAssign(&self->tabTextAppearance_, tabTextAppearance);
}

- (void)setRequestedTabMinWidthWithInt:(jint)requestedTabMinWidth {
  self->requestedTabMinWidth_ = requestedTabMinWidth;
}

- (void)setRequestedTabMaxWidthWithInt:(jint)requestedTabMaxWidth {
  self->requestedTabMaxWidth_ = requestedTabMaxWidth;
}

- (void)setContentInsetStartWithInt:(jint)contentInsetStart {
  self->contentInsetStart_ = contentInsetStart;
}

- (jint)getTabPaddingStart {
  return tabPaddingStart_;
}

- (void)setTabPaddingStartWithInt:(jint)tabPaddingStart {
  self->tabPaddingStart_ = tabPaddingStart;
}

- (jint)getTabPaddingTop {
  return tabPaddingTop_;
}

- (void)setTabPaddingTopWithInt:(jint)tabPaddingTop {
  self->tabPaddingTop_ = tabPaddingTop;
}

- (jint)getTabPaddingEnd {
  return tabPaddingEnd_;
}

- (void)setTabPaddingEndWithInt:(jint)tabPaddingEnd {
  self->tabPaddingEnd_ = tabPaddingEnd;
}

- (jint)getTabPaddingBottom {
  return tabPaddingBottom_;
}

- (void)setTabPaddingBottomWithInt:(jint)tabPaddingBottom {
  self->tabPaddingBottom_ = tabPaddingBottom;
}

- (jint)getChildTabItemCount {
  return ADMTabLayout_getChildTabItemCount(self);
}

- (void)initTabLayout {
  JreStrongAssign(&slidingTabIndicator_, (ADMTabLayout_SlidingTabIndicator *) cast_chk([((ADLayoutInflater *) nil_chk(ADLayoutInflater_fromWithADContext_(mContext_))) inflateWithNSString:@"@layout/design_sliding_tab_indicator" withADViewGroup:self withBoolean:true], [ADMTabLayout_SlidingTabIndicator class]));
  [self setTabTextColorsWithInt:ADColor_BLACK withInt:ADMTabLayout_tintColor];
  JreStrongAssign(&tabIconTint_, ADMTabLayout_createColorStateListWithInt_withInt_(ADColor_BLACK, ADMTabLayout_tintColor));
  [self setSelectedTabIndicatorHeightWithInt:JreFpToInt(ASPluginInvoker_convertDpToPixelWithNSString_(@"4dp"))];
  [self applyModeAndGravity];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADMTabLayout_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)requestLayout {
  [super requestLayout];
  for (jint i = 0; i < [self getTabCount]; i++) {
    ADMTabLayout_Tab *tab = JreRetainedLocalValue([self getTabAtWithInt:i]);
    if (tab != nil && tab->view_ != nil) {
      if (tab->view_->iconView_ != nil) {
        [tab->view_->iconView_ requestLayout];
      }
      if (((ADMTabLayout_TabView *) nil_chk(tab->view_))->textView_ != nil) {
        [tab->view_->textView_ requestLayout];
      }
      if (((ADMTabLayout_TabView *) nil_chk(tab->view_))->customView_ != nil) {
        [tab->view_->customView_ requestLayout];
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(tabs_);
  RELEASE_(selectedTab_);
  RELEASE_(slidingTabIndicator_);
  RELEASE_(defaultTabTextAppearance_);
  RELEASE_(tabTextAppearance_);
  RELEASE_(selectedTabTextAppearance_);
  RELEASE_(tabTextColors_);
  RELEASE_(tabIconTint_);
  RELEASE_(tabSelectedIndicator_);
  RELEASE_(tabIndicatorInterpolator_);
  RELEASE_(tabIndicatorTimeInterpolator_);
  RELEASE_(selectedListener_);
  RELEASE_(selectedListeners_);
  RELEASE_(currentVpSelectedListener_);
  RELEASE_(scrollAnimator_);
  RELEASE_(viewPager_);
  RELEASE_(pagerAdapter_);
  RELEASE_(pagerAdapterObserver_);
  RELEASE_(pageChangeListener_);
  RELEASE_(adapterChangeListener_);
  RELEASE_(tabViewPool_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 14, -1, -1, -1, -1 },
    { NULL, "LADMTabLayout_Tab;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADMTabLayout_Tab;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 17, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADMTabLayout_Tab;", 0x1, 18, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "LADColorStateList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 29, -1, -1, -1, -1 },
    { NULL, "LADDrawable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 32, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 36, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 37, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADMTabLayout_TabView;", 0x2, 39, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 8, -1, -1, -1, -1 },
    { NULL, "LADLinearLayout_LayoutParams;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 42, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 44, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 45, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 48, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 48, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 49, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 50, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 51, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 52, 53, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 54, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 55, 26, -1, -1, -1, -1 },
    { NULL, "LADColorStateList;", 0xa, 56, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADColorStateList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 57, 58, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 59, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 60, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 61, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 62, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 63, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 64, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 65, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setSelectedTabIndicatorColorWithInt:);
  methods[1].selector = @selector(setSelectedTabIndicatorHeightWithInt:);
  methods[2].selector = @selector(setScrollPositionWithInt:withFloat:withBoolean:);
  methods[3].selector = @selector(setScrollPositionWithInt:withFloat:withBoolean:withBoolean:);
  methods[4].selector = @selector(setScrollPositionWithInt:withFloat:withBoolean:withBoolean:withBoolean:);
  methods[5].selector = @selector(addTabWithADMTabLayout_Tab:);
  methods[6].selector = @selector(addTabWithADMTabLayout_Tab:withInt:);
  methods[7].selector = @selector(addTabWithADMTabLayout_Tab:withBoolean:);
  methods[8].selector = @selector(addTabWithADMTabLayout_Tab:withInt:withBoolean:);
  methods[9].selector = @selector(setOnTabSelectedListenerWithADMTabLayout_OnTabSelectedListener:);
  methods[10].selector = @selector(setOnTabSelectedListenerWithADMTabLayout_BaseOnTabSelectedListener:);
  methods[11].selector = @selector(addOnTabSelectedListenerWithADMTabLayout_OnTabSelectedListener:);
  methods[12].selector = @selector(addOnTabSelectedListenerWithADMTabLayout_BaseOnTabSelectedListener:);
  methods[13].selector = @selector(removeOnTabSelectedListenerWithADMTabLayout_OnTabSelectedListener:);
  methods[14].selector = @selector(removeOnTabSelectedListenerWithADMTabLayout_BaseOnTabSelectedListener:);
  methods[15].selector = @selector(newTab);
  methods[16].selector = @selector(createTabFromPool);
  methods[17].selector = @selector(releaseFromTabPoolWithADMTabLayout_Tab:);
  methods[18].selector = @selector(getTabCount);
  methods[19].selector = @selector(getTabAtWithInt:);
  methods[20].selector = @selector(getSelectedTabPosition);
  methods[21].selector = @selector(removeTabWithADMTabLayout_Tab:);
  methods[22].selector = @selector(removeTabAtWithInt:);
  methods[23].selector = @selector(removeAllTabs);
  methods[24].selector = @selector(setTabModeWithInt:);
  methods[25].selector = @selector(setTabGravityWithInt:);
  methods[26].selector = @selector(setSelectedTabIndicatorGravityWithInt:);
  methods[27].selector = @selector(setTabIndicatorAnimationModeWithInt:);
  methods[28].selector = @selector(getTabIndicatorAnimationMode);
  methods[29].selector = @selector(setTabIndicatorFullWidthWithBoolean:);
  methods[30].selector = @selector(isTabIndicatorFullWidth);
  methods[31].selector = @selector(setInlineLabelWithBoolean:);
  methods[32].selector = @selector(setTabTextColorsWithADColorStateList:);
  methods[33].selector = @selector(getTabTextColors);
  methods[34].selector = @selector(setTabTextColorsWithInt:withInt:);
  methods[35].selector = @selector(setTabIconTintWithADColorStateList:);
  methods[36].selector = @selector(getTabSelectedIndicator);
  methods[37].selector = @selector(setupWithViewPagerWithADXViewPager:);
  methods[38].selector = @selector(setupWithViewPagerWithADXViewPager:withBoolean:);
  methods[39].selector = @selector(setupWithViewPagerWithADXViewPager:withBoolean:withBoolean:);
  methods[40].selector = @selector(updateViewPagerScrollStateWithInt:);
  methods[41].selector = @selector(setPagerAdapterWithADXPagerAdapter:withBoolean:);
  methods[42].selector = @selector(populateFromPagerAdapter);
  methods[43].selector = @selector(updateAllTabs);
  methods[44].selector = @selector(createTabViewWithADMTabLayout_Tab:);
  methods[45].selector = @selector(configureTabWithADMTabLayout_Tab:withInt:);
  methods[46].selector = @selector(addTabViewWithADMTabLayout_Tab:);
  methods[47].selector = @selector(createLayoutParamsForTabs);
  methods[48].selector = @selector(updateTabViewLayoutParamsWithADLinearLayout_LayoutParams:);
  methods[49].selector = @selector(onMeasureWithInt:withInt:);
  methods[50].selector = @selector(removeTabViewAtWithInt:);
  methods[51].selector = @selector(animateToTabWithInt:);
  methods[52].selector = @selector(ensureScrollAnimator);
  methods[53].selector = @selector(setSelectedTabViewWithInt:);
  methods[54].selector = @selector(selectTabWithADMTabLayout_Tab:);
  methods[55].selector = @selector(selectTabWithADMTabLayout_Tab:withBoolean:);
  methods[56].selector = @selector(dispatchTabSelectedWithADMTabLayout_Tab:);
  methods[57].selector = @selector(dispatchTabUnselectedWithADMTabLayout_Tab:);
  methods[58].selector = @selector(dispatchTabReselectedWithADMTabLayout_Tab:);
  methods[59].selector = @selector(calculateScrollXForTabWithInt:withFloat:);
  methods[60].selector = @selector(applyModeAndGravity);
  methods[61].selector = @selector(applyGravityForModeScrollableWithInt:);
  methods[62].selector = @selector(updateTabViewsWithBoolean:);
  methods[63].selector = @selector(createColorStateListWithInt:withInt:);
  methods[64].selector = @selector(getDefaultHeight);
  methods[65].selector = @selector(getTabMinWidth);
  methods[66].selector = @selector(getTabMaxWidth);
  methods[67].selector = @selector(getScrollX);
  methods[68].selector = @selector(getTabIconTint);
  methods[69].selector = @selector(setTabTextAppearanceWithNSString:);
  methods[70].selector = @selector(setRequestedTabMinWidthWithInt:);
  methods[71].selector = @selector(setRequestedTabMaxWidthWithInt:);
  methods[72].selector = @selector(setContentInsetStartWithInt:);
  methods[73].selector = @selector(getTabPaddingStart);
  methods[74].selector = @selector(setTabPaddingStartWithInt:);
  methods[75].selector = @selector(getTabPaddingTop);
  methods[76].selector = @selector(setTabPaddingTopWithInt:);
  methods[77].selector = @selector(getTabPaddingEnd);
  methods[78].selector = @selector(setTabPaddingEndWithInt:);
  methods[79].selector = @selector(getTabPaddingBottom);
  methods[80].selector = @selector(setTabPaddingBottomWithInt:);
  methods[81].selector = @selector(getChildTabItemCount);
  methods[82].selector = @selector(initTabLayout);
  methods[83].selector = @selector(init);
  methods[84].selector = @selector(requestLayout);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_HEIGHT_WITH_TEXT_ICON", "I", .constantValue.asInt = ADMTabLayout_DEFAULT_HEIGHT_WITH_TEXT_ICON, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_GAP_TEXT_ICON", "I", .constantValue.asInt = ADMTabLayout_DEFAULT_GAP_TEXT_ICON, 0x18, -1, -1, -1, -1 },
    { "DEFAULT_HEIGHT", "I", .constantValue.asInt = ADMTabLayout_DEFAULT_HEIGHT, 0x1a, -1, -1, -1, -1 },
    { "TAB_MIN_WIDTH_MARGIN", "I", .constantValue.asInt = ADMTabLayout_TAB_MIN_WIDTH_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "FIXED_WRAP_GUTTER_MIN", "I", .constantValue.asInt = ADMTabLayout_FIXED_WRAP_GUTTER_MIN, 0x18, -1, -1, -1, -1 },
    { "INVALID_WIDTH", "I", .constantValue.asInt = ADMTabLayout_INVALID_WIDTH, 0x1a, -1, -1, -1, -1 },
    { "ANIMATION_DURATION", "I", .constantValue.asInt = ADMTabLayout_ANIMATION_DURATION, 0x1a, -1, -1, -1, -1 },
    { "SELECTED_INDICATOR_HEIGHT_DEFAULT", "I", .constantValue.asInt = ADMTabLayout_SELECTED_INDICATOR_HEIGHT_DEFAULT, 0x1a, -1, -1, -1, -1 },
    { "tabPool", "LADPools_Pool;", .constantValue.asLong = 0, 0x1a, -1, 66, 67, -1 },
    { "LOG_TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 68, -1, -1 },
    { "MODE_SCROLLABLE", "I", .constantValue.asInt = ADMTabLayout_MODE_SCROLLABLE, 0x19, -1, -1, -1, -1 },
    { "MODE_FIXED", "I", .constantValue.asInt = ADMTabLayout_MODE_FIXED, 0x19, -1, -1, -1, -1 },
    { "MODE_AUTO", "I", .constantValue.asInt = ADMTabLayout_MODE_AUTO, 0x19, -1, -1, -1, -1 },
    { "TAB_LABEL_VISIBILITY_UNLABELED", "I", .constantValue.asInt = ADMTabLayout_TAB_LABEL_VISIBILITY_UNLABELED, 0x19, -1, -1, -1, -1 },
    { "TAB_LABEL_VISIBILITY_LABELED", "I", .constantValue.asInt = ADMTabLayout_TAB_LABEL_VISIBILITY_LABELED, 0x19, -1, -1, -1, -1 },
    { "GRAVITY_FILL", "I", .constantValue.asInt = ADMTabLayout_GRAVITY_FILL, 0x19, -1, -1, -1, -1 },
    { "GRAVITY_CENTER", "I", .constantValue.asInt = ADMTabLayout_GRAVITY_CENTER, 0x19, -1, -1, -1, -1 },
    { "GRAVITY_START", "I", .constantValue.asInt = ADMTabLayout_GRAVITY_START, 0x19, -1, -1, -1, -1 },
    { "indicatorPosition_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "INDICATOR_GRAVITY_BOTTOM", "I", .constantValue.asInt = ADMTabLayout_INDICATOR_GRAVITY_BOTTOM, 0x19, -1, -1, -1, -1 },
    { "INDICATOR_GRAVITY_CENTER", "I", .constantValue.asInt = ADMTabLayout_INDICATOR_GRAVITY_CENTER, 0x19, -1, -1, -1, -1 },
    { "INDICATOR_GRAVITY_TOP", "I", .constantValue.asInt = ADMTabLayout_INDICATOR_GRAVITY_TOP, 0x19, -1, -1, -1, -1 },
    { "INDICATOR_GRAVITY_STRETCH", "I", .constantValue.asInt = ADMTabLayout_INDICATOR_GRAVITY_STRETCH, 0x19, -1, -1, -1, -1 },
    { "INDICATOR_ANIMATION_MODE_LINEAR", "I", .constantValue.asInt = ADMTabLayout_INDICATOR_ANIMATION_MODE_LINEAR, 0x19, -1, -1, -1, -1 },
    { "INDICATOR_ANIMATION_MODE_ELASTIC", "I", .constantValue.asInt = ADMTabLayout_INDICATOR_ANIMATION_MODE_ELASTIC, 0x19, -1, -1, -1, -1 },
    { "INDICATOR_ANIMATION_MODE_FADE", "I", .constantValue.asInt = ADMTabLayout_INDICATOR_ANIMATION_MODE_FADE, 0x19, -1, -1, -1, -1 },
    { "tabs_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, 69, -1 },
    { "selectedTab_", "LADMTabLayout_Tab;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "slidingTabIndicator_", "LADMTabLayout_SlidingTabIndicator;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tabPaddingStart_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tabPaddingTop_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tabPaddingEnd_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tabPaddingBottom_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "defaultTabTextAppearance_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tabTextAppearance_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "selectedTabTextAppearance_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tabTextColors_", "LADColorStateList;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tabIconTint_", "LADColorStateList;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tabSelectedIndicator_", "LADDrawable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tabSelectedIndicatorColor_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tabTextSize_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tabTextMultiLineSize_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tabBackgroundResId_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tabMaxWidth_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "requestedTabMinWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "requestedTabMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "scrollableTabMinWidth_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "contentInsetStart_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tabGravity_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tabIndicatorAnimationDuration_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tabIndicatorGravity_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mode_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "inlineLabel_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tabIndicatorFullWidth_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tabIndicatorHeight_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tabIndicatorAnimationMode_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tabIndicatorInterpolator_", "LADMTabIndicatorInterpolator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tabIndicatorTimeInterpolator_", "LADTimeInterpolator;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "selectedListener_", "LADMTabLayout_BaseOnTabSelectedListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "selectedListeners_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, 70, -1 },
    { "currentVpSelectedListener_", "LADMTabLayout_BaseOnTabSelectedListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "scrollAnimator_", "LADValueAnimator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "viewPager_", "LADXViewPager;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "pagerAdapter_", "LADXPagerAdapter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pagerAdapterObserver_", "LADDataSetObserver;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pageChangeListener_", "LADMTabLayout_TabLayoutOnPageChangeListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "adapterChangeListener_", "LADMTabLayout_AdapterChangeListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "setupViewPagerImplicitly_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "viewPagerScrollState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tabViewPool_", "LADPools_Pool;", .constantValue.asLong = 0, 0x12, -1, -1, 71, -1 },
    { "tintColor", "I", .constantValue.asLong = 0, 0x1a, -1, 72, -1, -1 },
  };
  static const void *ptrTable[] = { "setSelectedTabIndicatorColor", "I", "setSelectedTabIndicatorHeight", "setScrollPosition", "IFZ", "IFZZ", "IFZZZ", "addTab", "LADMTabLayout_Tab;", "LADMTabLayout_Tab;I", "LADMTabLayout_Tab;Z", "LADMTabLayout_Tab;IZ", "setOnTabSelectedListener", "LADMTabLayout_OnTabSelectedListener;", "LADMTabLayout_BaseOnTabSelectedListener;", "addOnTabSelectedListener", "removeOnTabSelectedListener", "releaseFromTabPool", "getTabAt", "removeTab", "removeTabAt", "setTabMode", "setTabGravity", "setSelectedTabIndicatorGravity", "setTabIndicatorAnimationMode", "setTabIndicatorFullWidth", "Z", "setInlineLabel", "setTabTextColors", "LADColorStateList;", "II", "setTabIconTint", "setupWithViewPager", "LADXViewPager;", "LADXViewPager;Z", "LADXViewPager;ZZ", "updateViewPagerScrollState", "setPagerAdapter", "LADXPagerAdapter;Z", "createTabView", "configureTab", "addTabView", "updateTabViewLayoutParams", "LADLinearLayout_LayoutParams;", "onMeasure", "removeTabViewAt", "animateToTab", "setSelectedTabView", "selectTab", "dispatchTabSelected", "dispatchTabUnselected", "dispatchTabReselected", "calculateScrollXForTab", "IF", "applyGravityForModeScrollable", "updateTabViews", "createColorStateList", "setTabTextAppearance", "LNSString;", "setRequestedTabMinWidth", "setRequestedTabMaxWidth", "setContentInsetStart", "setTabPaddingStart", "setTabPaddingTop", "setTabPaddingEnd", "setTabPaddingBottom", &ADMTabLayout_tabPool, "Lr/android/util/Pools$Pool<Lcom/google/android/material/tabs/TabLayout$Tab;>;", &ADMTabLayout_LOG_TAG, "Ljava/util/ArrayList<Lcom/google/android/material/tabs/TabLayout$Tab;>;", "Ljava/util/ArrayList<Lcom/google/android/material/tabs/TabLayout$BaseOnTabSelectedListener;>;", "Lr/android/util/Pools$Pool<Lcom/google/android/material/tabs/TabLayout$TabView;>;", &ADMTabLayout_tintColor, "LADMTabLayout_OnTabSelectedListener;LADMTabLayout_BaseOnTabSelectedListener;LADMTabLayout_Tab;LADMTabLayout_TabView;LADMTabLayout_SlidingTabIndicator;LADMTabLayout_TabLayoutOnPageChangeListener;LADMTabLayout_ViewPagerOnTabSelectedListener;LADMTabLayout_PagerAdapterObserver;LADMTabLayout_AdapterChangeListener;LADMTabLayout_TextViewCompat;LADMTabLayout_Paint;LADMTabLayout_Layout;" };
  static const J2ObjcClassInfo _ADMTabLayout = { "TabLayout", "com.google.android.material.tabs", ptrTable, methods, fields, 7, 0x1, 85, 71, -1, 73, -1, -1, -1 };
  return &_ADMTabLayout;
}

+ (void)initialize {
  if (self == [ADMTabLayout class]) {
    JreStrongAssignAndConsume(&ADMTabLayout_tabPool, new_ADPools_SynchronizedPool_initWithInt_(16));
    ADMTabLayout_tintColor = ADColor_parseColorWithNSString_(@"#0000ff");
    J2OBJC_SET_INITIALIZED(ADMTabLayout)
  }
}

@end

void ADMTabLayout_setupWithViewPagerWithADXViewPager_withBoolean_withBoolean_(ADMTabLayout *self, ADXViewPager *viewPager, jboolean autoRefresh, jboolean implicitSetup) {
  if (self->viewPager_ != nil) {
    if (self->pageChangeListener_ != nil) {
      [self->viewPager_ removeOnPageChangeListenerWithADXViewPager_OnPageChangeListener:self->pageChangeListener_];
    }
    if (self->adapterChangeListener_ != nil) {
      [((ADXViewPager *) nil_chk(self->viewPager_)) removeOnAdapterChangeListenerWithADXViewPager_OnAdapterChangeListener:self->adapterChangeListener_];
    }
  }
  if (self->currentVpSelectedListener_ != nil) {
    [self removeOnTabSelectedListenerWithADMTabLayout_BaseOnTabSelectedListener:self->currentVpSelectedListener_];
    JreStrongAssign(&self->currentVpSelectedListener_, nil);
  }
  if (viewPager != nil) {
    JreStrongAssign(&self->viewPager_, viewPager);
    if (self->pageChangeListener_ == nil) {
      JreStrongAssignAndConsume(&self->pageChangeListener_, new_ADMTabLayout_TabLayoutOnPageChangeListener_initWithADMTabLayout_(self));
    }
    [self->pageChangeListener_ reset];
    [viewPager addOnPageChangeListenerWithADXViewPager_OnPageChangeListener:self->pageChangeListener_];
    JreStrongAssignAndConsume(&self->currentVpSelectedListener_, new_ADMTabLayout_ViewPagerOnTabSelectedListener_initWithADXViewPager_(viewPager));
    [self addOnTabSelectedListenerWithADMTabLayout_BaseOnTabSelectedListener:self->currentVpSelectedListener_];
    ADXPagerAdapter *adapter = [viewPager getAdapter];
    if (adapter != nil) {
      [self setPagerAdapterWithADXPagerAdapter:adapter withBoolean:autoRefresh];
    }
    if (self->adapterChangeListener_ == nil) {
      JreStrongAssignAndConsume(&self->adapterChangeListener_, new_ADMTabLayout_AdapterChangeListener_initWithADMTabLayout_(self));
    }
    [self->adapterChangeListener_ setAutoRefreshWithBoolean:autoRefresh];
    [viewPager addOnAdapterChangeListenerWithADXViewPager_OnAdapterChangeListener:self->adapterChangeListener_];
    [self setScrollPositionWithInt:[viewPager getCurrentItem] withFloat:0.0f withBoolean:true];
  }
  else {
    JreStrongAssign(&self->viewPager_, nil);
    [self setPagerAdapterWithADXPagerAdapter:nil withBoolean:false];
  }
  self->setupViewPagerImplicitly_ = implicitSetup;
}

ADMTabLayout_TabView *ADMTabLayout_createTabViewWithADMTabLayout_Tab_(ADMTabLayout *self, ADMTabLayout_Tab *tab) {
  ADMTabLayout_TabView *tabView = self->tabViewPool_ != nil ? [self->tabViewPool_ acquire] : nil;
  if (tabView == nil) {
    tabView = (ADMTabLayout_TabView *) cast_chk([((ADLayoutInflater *) nil_chk(ADLayoutInflater_fromWithADContext_(self->mContext_))) inflateWithNSString:@"@layout/design_tab_view" withADViewGroup:self->slidingTabIndicator_ withBoolean:true], [ADMTabLayout_TabView class]);
    
    ;
  }
  [((ADMTabLayout_TabView *) nil_chk(tabView)) setTabWithADMTabLayout_Tab:tab];
  [tabView setFocusableWithBoolean:true];
  [tabView setMinimumWidthWithInt:ADMTabLayout_getTabMinWidth(self)];
  if (ADTextUtils_isEmptyWithJavaLangCharSequence_(((ADMTabLayout_Tab *) nil_chk(tab))->contentDesc_)) {
  }
  else {
  }
  return tabView;
}

void ADMTabLayout_configureTabWithADMTabLayout_Tab_withInt_(ADMTabLayout *self, ADMTabLayout_Tab *tab, jint position) {
  [((ADMTabLayout_Tab *) nil_chk(tab)) setPositionWithInt:position];
  [((JavaUtilArrayList *) nil_chk(self->tabs_)) addWithInt:position withId:tab];
  jint count = [self->tabs_ size];
  jint newIndicatorPosition = -1;
  for (jint i = position + 1; i < count; i++) {
    if ([((ADMTabLayout_Tab *) nil_chk([self->tabs_ getWithInt:i])) getPosition] == self->indicatorPosition_) {
      newIndicatorPosition = i;
    }
    [((ADMTabLayout_Tab *) nil_chk([self->tabs_ getWithInt:i])) setPositionWithInt:i];
  }
  self->indicatorPosition_ = newIndicatorPosition;
}

ADLinearLayout_LayoutParams *ADMTabLayout_createLayoutParamsForTabs(ADMTabLayout *self) {
  ADLinearLayout_LayoutParams *lp = create_ADLinearLayout_LayoutParams_initWithInt_withInt_(ADViewGroup_LayoutParams_WRAP_CONTENT, ADViewGroup_LayoutParams_MATCH_PARENT);
  ADMTabLayout_updateTabViewLayoutParamsWithADLinearLayout_LayoutParams_(self, lp);
  return lp;
}

void ADMTabLayout_updateTabViewLayoutParamsWithADLinearLayout_LayoutParams_(ADMTabLayout *self, ADLinearLayout_LayoutParams *lp) {
  if (self->mode_ == ADMTabLayout_MODE_FIXED && self->tabGravity_ == ADMTabLayout_GRAVITY_FILL) {
    ((ADLinearLayout_LayoutParams *) nil_chk(lp))->width_ = 0;
    lp->weight_ = 1;
  }
  else {
    ((ADLinearLayout_LayoutParams *) nil_chk(lp))->width_ = ADViewGroup_LayoutParams_WRAP_CONTENT;
    lp->weight_ = 0;
  }
}

void ADMTabLayout_removeTabViewAtWithInt_(ADMTabLayout *self, jint position) {
  ADMTabLayout_TabView *view = (ADMTabLayout_TabView *) cast_chk([((ADMTabLayout_SlidingTabIndicator *) nil_chk(self->slidingTabIndicator_)) getChildAtWithInt:position], [ADMTabLayout_TabView class]);
  [((ADMTabLayout_SlidingTabIndicator *) nil_chk(self->slidingTabIndicator_)) removeViewAtWithInt:position];
  if (view != nil) {
    [view reset];
    [((id<ADPools_Pool>) nil_chk(self->tabViewPool_)) release__WithId:view];
  }
  [self requestLayout];
}

void ADMTabLayout_ensureScrollAnimator(ADMTabLayout *self) {
  if (self->scrollAnimator_ == nil) {
    JreStrongAssignAndConsume(&self->scrollAnimator_, new_ADValueAnimator_init());
    [self->scrollAnimator_ setInterpolatorWithADTimeInterpolator:self->tabIndicatorTimeInterpolator_];
    [((ADValueAnimator *) nil_chk(self->scrollAnimator_)) setDurationWithLong:self->tabIndicatorAnimationDuration_];
    [((ADValueAnimator *) nil_chk(self->scrollAnimator_)) addUpdateListenerWithADValueAnimator_AnimatorUpdateListener:create_ADMTabLayout_1_initWithADMTabLayout_(self)];
  }
}

void ADMTabLayout_dispatchTabSelectedWithADMTabLayout_Tab_(ADMTabLayout *self, ADMTabLayout_Tab *tab) {
  for (jint i = [((JavaUtilArrayList *) nil_chk(self->selectedListeners_)) size] - 1; i >= 0; i--) {
    [((id<ADMTabLayout_BaseOnTabSelectedListener>) nil_chk([self->selectedListeners_ getWithInt:i])) onTabSelectedWithADMTabLayout_Tab:tab];
  }
}

void ADMTabLayout_dispatchTabUnselectedWithADMTabLayout_Tab_(ADMTabLayout *self, ADMTabLayout_Tab *tab) {
  for (jint i = [((JavaUtilArrayList *) nil_chk(self->selectedListeners_)) size] - 1; i >= 0; i--) {
    [((id<ADMTabLayout_BaseOnTabSelectedListener>) nil_chk([self->selectedListeners_ getWithInt:i])) onTabUnselectedWithADMTabLayout_Tab:tab];
  }
}

void ADMTabLayout_dispatchTabReselectedWithADMTabLayout_Tab_(ADMTabLayout *self, ADMTabLayout_Tab *tab) {
  for (jint i = [((JavaUtilArrayList *) nil_chk(self->selectedListeners_)) size] - 1; i >= 0; i--) {
    [((id<ADMTabLayout_BaseOnTabSelectedListener>) nil_chk([self->selectedListeners_ getWithInt:i])) onTabReselectedWithADMTabLayout_Tab:tab];
  }
}

jint ADMTabLayout_calculateScrollXForTabWithInt_withFloat_(ADMTabLayout *self, jint position, jfloat positionOffset) {
  if (self->mode_ == ADMTabLayout_MODE_SCROLLABLE || self->mode_ == ADMTabLayout_MODE_AUTO) {
    ADView *selectedChild = [((ADMTabLayout_SlidingTabIndicator *) nil_chk(self->slidingTabIndicator_)) getChildAtWithInt:position];
    if (selectedChild == nil) {
      return 0;
    }
    ADView *nextChild = position + 1 < [((ADMTabLayout_SlidingTabIndicator *) nil_chk(self->slidingTabIndicator_)) getChildCount] ? [((ADMTabLayout_SlidingTabIndicator *) nil_chk(self->slidingTabIndicator_)) getChildAtWithInt:position + 1] : nil;
    jint selectedWidth = [selectedChild getWidth];
    jint nextWidth = nextChild != nil ? [nextChild getWidth] : 0;
    jint scrollBase = [selectedChild getLeft] + (JreIntDiv(selectedWidth, 2)) - (JreIntDiv([self getWidth], 2));
    jint scrollOffset = JreFpToInt(((selectedWidth + nextWidth) * 0.5f * positionOffset));
    return (ADXViewCompat_getLayoutDirectionWithADView_(self) == ADXViewCompat_LAYOUT_DIRECTION_LTR) ? scrollBase + scrollOffset : scrollBase - scrollOffset;
  }
  return 0;
}

void ADMTabLayout_applyGravityForModeScrollableWithInt_(ADMTabLayout *self, jint tabGravity) {
  switch (tabGravity) {
    case ADMTabLayout_GRAVITY_CENTER:
    [((ADMTabLayout_SlidingTabIndicator *) nil_chk(self->slidingTabIndicator_)) setGravityWithInt:ADGravity_CENTER_HORIZONTAL];
    break;
    case ADMTabLayout_GRAVITY_FILL:
    ADLog_wWithNSString_withNSString_(ADMTabLayout_LOG_TAG, @"MODE_SCROLLABLE + GRAVITY_FILL is not supported, GRAVITY_START will be used instead");
    case ADMTabLayout_GRAVITY_START:
    [((ADMTabLayout_SlidingTabIndicator *) nil_chk(self->slidingTabIndicator_)) setGravityWithInt:ADXGravityCompat_START];
    break;
    default:
    break;
  }
}

ADColorStateList *ADMTabLayout_createColorStateListWithInt_withInt_(jint defaultColor, jint selectedColor) {
  ADMTabLayout_initialize();
  IOSObjectArray *states = [IOSObjectArray arrayWithLength:2 type:IOSClass_intArray(1)];
  IOSIntArray *colors = [IOSIntArray arrayWithLength:2];
  jint i = 0;
  IOSObjectArray_Set(states, i, JreLoadStatic(ADView, SELECTED_STATE_SET));
  *IOSIntArray_GetRef(colors, i) = selectedColor;
  i++;
  IOSObjectArray_Set(states, i, JreLoadStatic(ADView, EMPTY_STATE_SET));
  *IOSIntArray_GetRef(colors, i) = defaultColor;
  i++;
  return create_ADColorStateList_initWithIntArray2_withIntArray_(states, colors);
}

jint ADMTabLayout_getDefaultHeight(ADMTabLayout *self) {
  jboolean hasIconAndText = false;
  for (jint i = 0, count = [((JavaUtilArrayList *) nil_chk(self->tabs_)) size]; i < count; i++) {
    ADMTabLayout_Tab *tab = JreRetainedLocalValue([self->tabs_ getWithInt:i]);
    if (tab != nil && [tab getIcon] != nil && !ADTextUtils_isEmptyWithJavaLangCharSequence_([tab getText])) {
      hasIconAndText = true;
      break;
    }
  }
  return (hasIconAndText && !self->inlineLabel_) ? ADMTabLayout_DEFAULT_HEIGHT_WITH_TEXT_ICON : ADMTabLayout_DEFAULT_HEIGHT;
}

jint ADMTabLayout_getTabMinWidth(ADMTabLayout *self) {
  if (self->requestedTabMinWidth_ != ADMTabLayout_INVALID_WIDTH) {
    return self->requestedTabMinWidth_;
  }
  return (self->mode_ == ADMTabLayout_MODE_SCROLLABLE || self->mode_ == ADMTabLayout_MODE_AUTO) ? self->scrollableTabMinWidth_ : 0;
}

jint ADMTabLayout_getChildTabItemCount(ADMTabLayout *self) {
  jint count = 0;
  for (jint i = 0; i < [self getChildCount]; i++) {
    ADView *view = JreRetainedLocalValue([self getChildAtWithInt:i]);
    if ([ASIViewStub_class_() isInstance:view]) {
      count++;
    }
  }
  return count;
}

void ADMTabLayout_init(ADMTabLayout *self) {
  ADHorizontalScrollView_init(self);
  self->indicatorPosition_ = -1;
  JreStrongAssignAndConsume(&self->tabs_, new_JavaUtilArrayList_init());
  self->tabSelectedIndicatorColor_ = ADColor_TRANSPARENT;
  self->tabMaxWidth_ = JavaLangInteger_MAX_VALUE;
  self->tabIndicatorHeight_ = ADMTabLayout_SELECTED_INDICATOR_HEIGHT_DEFAULT;
  JreStrongAssignAndConsume(&self->selectedListeners_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->tabViewPool_, new_ADPools_SimplePool_initWithInt_(12));
  self->scrollableTabMinWidth_ = 0;
  self->requestedTabMaxWidth_ = JavaLangInteger_MAX_VALUE;
  self->requestedTabMinWidth_ = 0;
  self->tabBackgroundResId_ = 0;
  JreStrongAssign(&self->tabTextAppearance_, nil);
  JreStrongAssign(&self->defaultTabTextAppearance_, nil);
  JreStrongAssignAndConsume(&self->tabIndicatorTimeInterpolator_, new_ADXFastOutLinearInInterpolator_init());
  JreStrongAssignAndConsume(&self->tabIndicatorInterpolator_, new_ADMTabIndicatorInterpolator_initPackagePrivate());
  JreStrongAssignAndConsume(&self->tabSelectedIndicator_, new_ADDrawable_init());
  [self->tabSelectedIndicator_ setDrawableWithId:JavaLangInteger_valueOfWithInt_(ADMTabLayout_tintColor)];
  self->mode_ = ADMTabLayout_MODE_FIXED;
  self->tabPaddingStart_ = self->tabPaddingEnd_ = JreFpToInt(ASPluginInvoker_convertDpToPixelWithNSString_(@"12dp"));
  self->requestedTabMinWidth_ = JreFpToInt(ASPluginInvoker_convertDpToPixelWithNSString_(@"60dp"));
  self->tabIndicatorFullWidth_ = true;
  self->tabIndicatorAnimationDuration_ = ADMTabLayout_ANIMATION_DURATION;
}

ADMTabLayout *new_ADMTabLayout_init() {
  J2OBJC_NEW_IMPL(ADMTabLayout, init)
}

ADMTabLayout *create_ADMTabLayout_init() {
  J2OBJC_CREATE_IMPL(ADMTabLayout, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADMTabLayout)

@implementation ADMTabLayout_BaseOnTabSelectedListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x401, 3, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x401, 4, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onTabSelectedWithADMTabLayout_Tab:);
  methods[1].selector = @selector(onTabUnselectedWithADMTabLayout_Tab:);
  methods[2].selector = @selector(onTabReselectedWithADMTabLayout_Tab:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onTabSelected", "LADMTabLayout_Tab;", "(TT;)V", "onTabUnselected", "onTabReselected", "LADMTabLayout;", "<T:Lcom/google/android/material/tabs/TabLayout$Tab;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _ADMTabLayout_BaseOnTabSelectedListener = { "BaseOnTabSelectedListener", "com.google.android.material.tabs", ptrTable, methods, NULL, 7, 0x609, 3, 0, 5, -1, -1, 6, -1 };
  return &_ADMTabLayout_BaseOnTabSelectedListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADMTabLayout_BaseOnTabSelectedListener)

@implementation ADMTabLayout_OnTabSelectedListener

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { "LADMTabLayout;", "Ljava/lang/Object;Lcom/google/android/material/tabs/TabLayout$BaseOnTabSelectedListener<Lcom/google/android/material/tabs/TabLayout$Tab;>;" };
  static const J2ObjcClassInfo _ADMTabLayout_OnTabSelectedListener = { "OnTabSelectedListener", "com.google.android.material.tabs", ptrTable, NULL, NULL, 7, 0x609, 0, 0, 0, -1, -1, 1, -1 };
  return &_ADMTabLayout_OnTabSelectedListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADMTabLayout_OnTabSelectedListener)

@implementation ADMTabLayout_1

- (instancetype)initWithADMTabLayout:(ADMTabLayout *)outer$ {
  ADMTabLayout_1_initWithADMTabLayout_(self, outer$);
  return self;
}

- (void)onAnimationUpdateWithADValueAnimator:(ADValueAnimator *)animator {
  [this$0_ scrollToWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((ADValueAnimator *) nil_chk(animator)) getAnimatedValue], [JavaLangInteger class]))) intValue] withInt:0];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADMTabLayout:);
  methods[1].selector = @selector(onAnimationUpdateWithADValueAnimator:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADMTabLayout;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADMTabLayout;", "onAnimationUpdate", "LADValueAnimator;", "ensureScrollAnimator" };
  static const J2ObjcClassInfo _ADMTabLayout_1 = { "", "com.google.android.material.tabs", ptrTable, methods, fields, 7, 0x8010, 2, 1, 0, -1, 3, -1, -1 };
  return &_ADMTabLayout_1;
}

@end

void ADMTabLayout_1_initWithADMTabLayout_(ADMTabLayout_1 *self, ADMTabLayout *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADMTabLayout_1 *new_ADMTabLayout_1_initWithADMTabLayout_(ADMTabLayout *outer$) {
  J2OBJC_NEW_IMPL(ADMTabLayout_1, initWithADMTabLayout_, outer$)
}

ADMTabLayout_1 *create_ADMTabLayout_1_initWithADMTabLayout_(ADMTabLayout *outer$) {
  J2OBJC_CREATE_IMPL(ADMTabLayout_1, initWithADMTabLayout_, outer$)
}

@implementation ADMTabLayout_Tab

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADMTabLayout_Tab_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)getTag {
  return tag_;
}

- (ADMTabLayout_Tab *)setTagWithId:(id)tag {
  JreStrongAssign(&self->tag_, tag);
  return self;
}

- (ADMTabLayout_Tab *)setIdWithInt:(jint)id_ {
  self->id__ = id_;
  if (view_ != nil) {
    [view_ setIdWithInt:id_];
  }
  return self;
}

- (jint)getId {
  return id__;
}

- (ADView *)getCustomView {
  return customView_;
}

- (ADMTabLayout_Tab *)setCustomViewWithADView:(ADView *)view {
  JreStrongAssign(&customView_, view);
  [((ADMTabLayout_TabView *) nil_chk(self->view_)) addClickListenerWithADView:customView_ withBoolean:false];
  [self updateView];
  return self;
}

- (ADDrawable *)getIcon {
  return icon_;
}

- (jint)getPosition {
  return position_;
}

- (void)setPositionWithInt:(jint)position {
  self->position_ = position;
}

- (id<JavaLangCharSequence>)getText {
  return text_;
}

- (ADMTabLayout_Tab *)setIconWithADDrawable:(ADDrawable *)icon {
  JreStrongAssign(&self->icon_, icon);
  if ((((ADMTabLayout *) nil_chk(parent_))->tabGravity_ == ADMTabLayout_GRAVITY_CENTER) || parent_->mode_ == ADMTabLayout_MODE_AUTO) {
    [parent_ updateTabViewsWithBoolean:true];
  }
  [self updateView];
  return self;
}

- (ADMTabLayout_Tab *)setTextWithJavaLangCharSequence:(id<JavaLangCharSequence>)text {
  if (ADTextUtils_isEmptyWithJavaLangCharSequence_(contentDesc_) && !ADTextUtils_isEmptyWithJavaLangCharSequence_(text)) {
  }
  JreStrongAssign(&self->text_, text);
  [self updateView];
  return self;
}

- (ADXBadgeDrawable *)getOrCreateBadge {
  return ADMTabLayout_TabView_getOrCreateBadge(nil_chk(view_));
}

- (void)removeBadge {
  ADMTabLayout_TabView_removeBadge(nil_chk(view_));
}

- (ADXBadgeDrawable *)getBadge {
  return ADMTabLayout_TabView_getBadge(nil_chk(view_));
}

- (ADMTabLayout_Tab *)setTabLabelVisibilityWithInt:(jint)mode {
  self->labelVisibilityMode_ = mode;
  if ((((ADMTabLayout *) nil_chk(parent_))->tabGravity_ == ADMTabLayout_GRAVITY_CENTER) || parent_->mode_ == ADMTabLayout_MODE_AUTO) {
    [parent_ updateTabViewsWithBoolean:true];
  }
  [self updateView];
  return self;
}

- (jint)getTabLabelVisibility {
  return self->labelVisibilityMode_;
}

- (void)select {
  if (parent_ == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Tab not attached to a TabLayout");
  }
  [parent_ selectTabWithADMTabLayout_Tab:self];
}

- (jboolean)isSelected {
  if (parent_ == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Tab not attached to a TabLayout");
  }
  jint selectedPosition = [parent_ getSelectedTabPosition];
  return selectedPosition != ADMTabLayout_Tab_INVALID_POSITION && selectedPosition == position_;
}

- (void)updateView {
  if (view_ != nil) {
    ADMTabLayout_TabView_update(view_);
  }
}

- (void)reset {
  JreStrongAssign(&parent_, nil);
  JreStrongAssign(&view_, nil);
  JreStrongAssign(&tag_, nil);
  JreStrongAssign(&icon_, nil);
  id__ = ADView_NO_ID;
  JreStrongAssign(&text_, nil);
  JreStrongAssign(&contentDesc_, nil);
  position_ = ADMTabLayout_Tab_INVALID_POSITION;
  JreStrongAssign(&customView_, nil);
}

- (void)dealloc {
  RELEASE_(tag_);
  RELEASE_(icon_);
  RELEASE_(text_);
  RELEASE_(contentDesc_);
  RELEASE_(customView_);
  RELEASE_(parent_);
  RELEASE_(view_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADMTabLayout_Tab;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LADMTabLayout_Tab;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADMTabLayout_Tab;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LADDrawable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 3, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADMTabLayout_Tab;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LADMTabLayout_Tab;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LADXBadgeDrawable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXBadgeDrawable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADMTabLayout_Tab;", 0x1, 11, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getTag);
  methods[2].selector = @selector(setTagWithId:);
  methods[3].selector = @selector(setIdWithInt:);
  methods[4].selector = @selector(getId);
  methods[5].selector = @selector(getCustomView);
  methods[6].selector = @selector(setCustomViewWithADView:);
  methods[7].selector = @selector(getIcon);
  methods[8].selector = @selector(getPosition);
  methods[9].selector = @selector(setPositionWithInt:);
  methods[10].selector = @selector(getText);
  methods[11].selector = @selector(setIconWithADDrawable:);
  methods[12].selector = @selector(setTextWithJavaLangCharSequence:);
  methods[13].selector = @selector(getOrCreateBadge);
  methods[14].selector = @selector(removeBadge);
  methods[15].selector = @selector(getBadge);
  methods[16].selector = @selector(setTabLabelVisibilityWithInt:);
  methods[17].selector = @selector(getTabLabelVisibility);
  methods[18].selector = @selector(select);
  methods[19].selector = @selector(isSelected);
  methods[20].selector = @selector(updateView);
  methods[21].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INVALID_POSITION", "I", .constantValue.asInt = ADMTabLayout_Tab_INVALID_POSITION, 0x19, -1, -1, -1, -1 },
    { "tag_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "icon_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "text_", "LJavaLangCharSequence;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "contentDesc_", "LJavaLangCharSequence;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "position_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "customView_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "labelVisibilityMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "parent_", "LADMTabLayout;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "view_", "LADMTabLayout_TabView;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "id__", "I", .constantValue.asLong = 0, 0x2, 12, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setTag", "LNSObject;", "setId", "I", "setCustomView", "LADView;", "setPosition", "setIcon", "LADDrawable;", "setText", "LJavaLangCharSequence;", "setTabLabelVisibility", "id", "LADMTabLayout;" };
  static const J2ObjcClassInfo _ADMTabLayout_Tab = { "Tab", "com.google.android.material.tabs", ptrTable, methods, fields, 7, 0x9, 22, 11, 13, -1, -1, -1, -1 };
  return &_ADMTabLayout_Tab;
}

@end

void ADMTabLayout_Tab_init(ADMTabLayout_Tab *self) {
  NSObject_init(self);
  self->position_ = ADMTabLayout_Tab_INVALID_POSITION;
  self->labelVisibilityMode_ = ADMTabLayout_TAB_LABEL_VISIBILITY_LABELED;
  self->id__ = ADView_NO_ID;
}

ADMTabLayout_Tab *new_ADMTabLayout_Tab_init() {
  J2OBJC_NEW_IMPL(ADMTabLayout_Tab, init)
}

ADMTabLayout_Tab *create_ADMTabLayout_Tab_init() {
  J2OBJC_CREATE_IMPL(ADMTabLayout_Tab, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADMTabLayout_Tab)

@implementation ADMTabLayout_TabView

- (instancetype)initWithADMTabLayout:(ADMTabLayout *)outer$
                       withADContext:(ADContext *)context {
  ADMTabLayout_TabView_initWithADMTabLayout_withADContext_(self, outer$, context);
  return self;
}

- (void)setBaseBackgroundDrawableWithADDrawable:(ADDrawable *)baseBackgroundDrawable {
  JreStrongAssign(&self->baseBackgroundDrawable_, baseBackgroundDrawable);
  this$0_->tabBackgroundResId_ = baseBackgroundDrawable == nil ? 0 : 1;
  ADMTabLayout_TabView_updateBackgroundDrawableWithADContext_(self, [self getContext]);
}

- (void)initTabView {
  [self addClickListenerWithADView:self withBoolean:true];
}

- (void)addClickListenerWithADView:(ADView *)view
                       withBoolean:(jboolean)allPlatforms {
  if (!allPlatforms && ![((NSString *) nil_chk(ASPluginInvoker_getOS())) java_equalsIgnoreCase:@"swt"]) {
    return;
  }
  id<ADView_OnClickListener> onClickListener = create_ADMTabLayout_TabView_1_initWithADMTabLayout_TabView_(self);
  [((ADView *) nil_chk(view)) setMyAttributeWithNSString:@"onClick" withId:onClickListener];
  if ([view isKindOfClass:[ADViewGroup class]]) {
    ADLayoutInflater_recurseSetWithADViewGroup_withADView_OnClickListener_((ADViewGroup *) view, onClickListener);
  }
}

- (void)updateBackgroundDrawableWithADContext:(ADContext *)context {
  ADMTabLayout_TabView_updateBackgroundDrawableWithADContext_(self, context);
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  jboolean changed = false;
  IOSIntArray *state = [self getDrawableState];
  if (baseBackgroundDrawable_ != nil && [baseBackgroundDrawable_ isStateful]) {
    changed |= [baseBackgroundDrawable_ setStateWithIntArray:state];
  }
  if (changed) {
    [self invalidate];
    [this$0_ invalidate];
  }
}

- (jboolean)performClick {
  jboolean handled = false;
  if (tab_ != nil) {
    {
    }
    [tab_ select];
    return true;
  }
  else {
    return handled;
  }
}

- (void)setSelectedWithBoolean:(jboolean)selected {
  jboolean changed = [self isSelected] != selected;
  [super setSelectedWithBoolean:selected];
  if (textView_ != nil) {
    [textView_ setSelectedWithBoolean:selected];
  }
  if (iconView_ != nil) {
    [iconView_ setSelectedWithBoolean:selected];
  }
  if (customView_ != nil) {
    [customView_ setSelectedWithBoolean:selected];
  }
}

- (void)onMeasureWithInt:(jint)origWidthMeasureSpec
                 withInt:(jint)origHeightMeasureSpec {
  jint specWidthSize = ADView_MeasureSpec_getSizeWithInt_(origWidthMeasureSpec);
  jint specWidthMode = ADView_MeasureSpec_getModeWithInt_(origWidthMeasureSpec);
  jint maxWidth = [this$0_ getTabMaxWidth];
  jint widthMeasureSpec;
  jint heightMeasureSpec = origHeightMeasureSpec;
  if (maxWidth > 0 && (specWidthMode == ADView_MeasureSpec_UNSPECIFIED || specWidthSize > maxWidth)) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(this$0_->tabMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  else {
    widthMeasureSpec = origWidthMeasureSpec;
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  if (textView_ != nil) {
    jfloat textSize = this$0_->tabTextSize_;
    jint maxLines = defaultMaxLines_;
    if (iconView_ != nil && [iconView_ getVisibility] == ADView_VISIBLE) {
      maxLines = 1;
    }
    else if (textView_ != nil && ADMTabLayout_TextViewCompat_getLineCountWithADTextView_(textView_) > 1) {
      textSize = this$0_->tabTextMultiLineSize_;
    }
    jfloat curTextSize = ADMTabLayout_TextViewCompat_getTextSizeWithADTextView_(textView_);
    jint curLineCount = ADMTabLayout_TextViewCompat_getLineCountWithADTextView_(textView_);
    jint curMaxLines = ADMTabLayout_TextViewCompat_getMaxLinesWithADTextView_(textView_);
    if (textSize != curTextSize || (curMaxLines >= 0 && maxLines != curMaxLines)) {
      jboolean updateTextView = true;
      if (this$0_->mode_ == ADMTabLayout_MODE_FIXED && textSize > curTextSize && curLineCount == 1) {
        ADMTabLayout_Layout *layout = ADMTabLayout_TextViewCompat_getLayoutWithADTextView_(textView_);
        if (layout == nil || ADMTabLayout_TabView_approximateLineWidthWithADMTabLayout_Layout_withInt_withFloat_(self, layout, 0, textSize) > [self getMeasuredWidth] - [self getPaddingLeft] - [self getPaddingRight]) {
          updateTextView = false;
        }
      }
      if (updateTextView) {
        ADMTabLayout_TextViewCompat_setTextSizeWithADTextView_withFloat_(textView_, textSize);
        [((ADTextView *) nil_chk(textView_)) setMaxLinesWithInt:maxLines];
        [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
      }
    }
  }
}

- (void)setTabWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab {
  if (tab != self->tab_) {
    JreStrongAssign(&self->tab_, tab);
    ADMTabLayout_TabView_update(self);
  }
}

- (void)reset {
  [self setTabWithADMTabLayout_Tab:nil];
  [self setSelectedWithBoolean:false];
}

- (void)updateTab {
  ADMTabLayout_TabView_updateTab(self);
}

- (void)update {
  ADMTabLayout_TabView_update(self);
}

- (void)inflateAndAddDefaultIconView {
  ADMTabLayout_TabView_inflateAndAddDefaultIconView(self);
}

- (void)inflateAndAddDefaultTextView {
  ADMTabLayout_TabView_inflateAndAddDefaultTextView(self);
}

- (ADFrameLayout *)createPreApi18BadgeAnchorRoot {
  return ADMTabLayout_TabView_createPreApi18BadgeAnchorRoot(self);
}

- (ADXBadgeDrawable *)getOrCreateBadge {
  return ADMTabLayout_TabView_getOrCreateBadge(self);
}

- (ADXBadgeDrawable *)getBadge {
  return ADMTabLayout_TabView_getBadge(self);
}

- (void)removeBadge {
  ADMTabLayout_TabView_removeBadge(self);
}

- (void)addOnLayoutChangeListenerWithADView:(ADView *)view {
  ADMTabLayout_TabView_addOnLayoutChangeListenerWithADView_(self, view);
}

- (void)tryUpdateBadgeAnchor {
  ADMTabLayout_TabView_tryUpdateBadgeAnchor(self);
}

- (void)tryAttachBadgeToAnchorWithADView:(ADView *)anchorView {
  ADMTabLayout_TabView_tryAttachBadgeToAnchorWithADView_(self, anchorView);
}

- (void)tryRemoveBadgeFromAnchor {
  ADMTabLayout_TabView_tryRemoveBadgeFromAnchor(self);
}

- (void)clipViewToPaddingForBadgeWithBoolean:(jboolean)flag {
  ADMTabLayout_TabView_clipViewToPaddingForBadgeWithBoolean_(self, flag);
}

- (void)updateOrientation {
  ADMTabLayout_TabView_updateOrientation(self);
}

- (void)updateTextAndIconWithADTextView:(ADTextView *)textView
                        withADImageView:(ADImageView *)iconView
                            withBoolean:(jboolean)addDefaultMargins {
  ADMTabLayout_TabView_updateTextAndIconWithADTextView_withADImageView_withBoolean_(self, textView, iconView, addDefaultMargins);
}

- (void)tryUpdateBadgeDrawableBoundsWithADView:(ADView *)anchor {
  ADMTabLayout_TabView_tryUpdateBadgeDrawableBoundsWithADView_(self, anchor);
}

- (jboolean)hasBadgeDrawable {
  return ADMTabLayout_TabView_hasBadgeDrawable(self);
}

- (ADFrameLayout *)getCustomParentForBadgeWithADView:(ADView *)anchor {
  return ADMTabLayout_TabView_getCustomParentForBadgeWithADView_(self, anchor);
}

- (jint)getContentWidth {
  jboolean initialized = false;
  jint left = 0;
  jint right = 0;
  {
    IOSObjectArray *a__ = [IOSObjectArray arrayWithObjects:(id[]){ textView_, iconView_, customView_ } count:3 type:ADView_class_()];
    ADView * const *b__ = a__->buffer_;
    ADView * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ADView *view = *b__++;
      if (view != nil && [view getVisibility] == ADView_VISIBLE) {
        left = initialized ? JavaLangMath_minWithInt_withInt_(left, [view getLeft]) : [view getLeft];
        right = initialized ? JavaLangMath_maxWithInt_withInt_(right, [view getRight]) : [view getRight];
        initialized = true;
      }
    }
  }
  return right - left;
}

- (jint)getContentHeight {
  jboolean initialized = false;
  jint top = 0;
  jint bottom = 0;
  {
    IOSObjectArray *a__ = [IOSObjectArray arrayWithObjects:(id[]){ textView_, iconView_, customView_ } count:3 type:ADView_class_()];
    ADView * const *b__ = a__->buffer_;
    ADView * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ADView *view = *b__++;
      if (view != nil && [view getVisibility] == ADView_VISIBLE) {
        top = initialized ? JavaLangMath_minWithInt_withInt_(top, [view getTop]) : [view getTop];
        bottom = initialized ? JavaLangMath_maxWithInt_withInt_(bottom, [view getBottom]) : [view getBottom];
        initialized = true;
      }
    }
  }
  return bottom - top;
}

- (ADMTabLayout_Tab *)getTab {
  return tab_;
}

- (jfloat)approximateLineWidthWithADMTabLayout_Layout:(ADMTabLayout_Layout *)layout
                                              withInt:(jint)line
                                            withFloat:(jfloat)textSize {
  return ADMTabLayout_TabView_approximateLineWidthWithADMTabLayout_Layout_withInt_withFloat_(self, layout, line, textSize);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(tab_);
  RELEASE_(textView_);
  RELEASE_(iconView_);
  RELEASE_(badgeAnchorView_);
  RELEASE_(badgeDrawable_);
  RELEASE_(customView_);
  RELEASE_(customTextView_);
  RELEASE_(customIconView_);
  RELEASE_(baseBackgroundDrawable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADFrameLayout;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXBadgeDrawable;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXBadgeDrawable;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADFrameLayout;", 0x2, 20, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADMTabLayout_Tab;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x2, 21, 22, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADMTabLayout:withADContext:);
  methods[1].selector = @selector(setBaseBackgroundDrawableWithADDrawable:);
  methods[2].selector = @selector(initTabView);
  methods[3].selector = @selector(addClickListenerWithADView:withBoolean:);
  methods[4].selector = @selector(updateBackgroundDrawableWithADContext:);
  methods[5].selector = @selector(drawableStateChanged);
  methods[6].selector = @selector(performClick);
  methods[7].selector = @selector(setSelectedWithBoolean:);
  methods[8].selector = @selector(onMeasureWithInt:withInt:);
  methods[9].selector = @selector(setTabWithADMTabLayout_Tab:);
  methods[10].selector = @selector(reset);
  methods[11].selector = @selector(updateTab);
  methods[12].selector = @selector(update);
  methods[13].selector = @selector(inflateAndAddDefaultIconView);
  methods[14].selector = @selector(inflateAndAddDefaultTextView);
  methods[15].selector = @selector(createPreApi18BadgeAnchorRoot);
  methods[16].selector = @selector(getOrCreateBadge);
  methods[17].selector = @selector(getBadge);
  methods[18].selector = @selector(removeBadge);
  methods[19].selector = @selector(addOnLayoutChangeListenerWithADView:);
  methods[20].selector = @selector(tryUpdateBadgeAnchor);
  methods[21].selector = @selector(tryAttachBadgeToAnchorWithADView:);
  methods[22].selector = @selector(tryRemoveBadgeFromAnchor);
  methods[23].selector = @selector(clipViewToPaddingForBadgeWithBoolean:);
  methods[24].selector = @selector(updateOrientation);
  methods[25].selector = @selector(updateTextAndIconWithADTextView:withADImageView:withBoolean:);
  methods[26].selector = @selector(tryUpdateBadgeDrawableBoundsWithADView:);
  methods[27].selector = @selector(hasBadgeDrawable);
  methods[28].selector = @selector(getCustomParentForBadgeWithADView:);
  methods[29].selector = @selector(getContentWidth);
  methods[30].selector = @selector(getContentHeight);
  methods[31].selector = @selector(getTab);
  methods[32].selector = @selector(approximateLineWidthWithADMTabLayout_Layout:withInt:withFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADMTabLayout;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "tab_", "LADMTabLayout_Tab;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "textView_", "LADTextView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "iconView_", "LADImageView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "badgeAnchorView_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "badgeDrawable_", "LADXBadgeDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "customView_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "customTextView_", "LADTextView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "customIconView_", "LADImageView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "baseBackgroundDrawable_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "defaultMaxLines_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADMTabLayout;LADContext;", "setBaseBackgroundDrawable", "LADDrawable;", "addClickListener", "LADView;Z", "updateBackgroundDrawable", "LADContext;", "setSelected", "Z", "onMeasure", "II", "setTab", "LADMTabLayout_Tab;", "addOnLayoutChangeListener", "LADView;", "tryAttachBadgeToAnchor", "clipViewToPaddingForBadge", "updateTextAndIcon", "LADTextView;LADImageView;Z", "tryUpdateBadgeDrawableBounds", "getCustomParentForBadge", "approximateLineWidth", "LADMTabLayout_Layout;IF", "LADMTabLayout;" };
  static const J2ObjcClassInfo _ADMTabLayout_TabView = { "TabView", "com.google.android.material.tabs", ptrTable, methods, fields, 7, 0x1, 33, 11, 23, -1, -1, -1, -1 };
  return &_ADMTabLayout_TabView;
}

@end

void ADMTabLayout_TabView_initWithADMTabLayout_withADContext_(ADMTabLayout_TabView *self, ADMTabLayout *outer$, ADContext *context) {
  JreStrongAssign(&self->this$0_, outer$);
  ADLinearLayout_initWithADContext_(self, context);
  self->defaultMaxLines_ = 2;
  ADXViewCompat_setPaddingRelativeWithADView_withInt_withInt_withInt_withInt_(self, outer$->tabPaddingStart_, outer$->tabPaddingTop_, outer$->tabPaddingEnd_, outer$->tabPaddingBottom_);
  [self setGravityWithInt:ADGravity_CENTER];
  [self setOrientationWithInt:outer$->inlineLabel_ ? ADLinearLayout_HORIZONTAL : ADLinearLayout_VERTICAL];
  [self setClickableWithBoolean:true];
}

ADMTabLayout_TabView *new_ADMTabLayout_TabView_initWithADMTabLayout_withADContext_(ADMTabLayout *outer$, ADContext *context) {
  J2OBJC_NEW_IMPL(ADMTabLayout_TabView, initWithADMTabLayout_withADContext_, outer$, context)
}

ADMTabLayout_TabView *create_ADMTabLayout_TabView_initWithADMTabLayout_withADContext_(ADMTabLayout *outer$, ADContext *context) {
  J2OBJC_CREATE_IMPL(ADMTabLayout_TabView, initWithADMTabLayout_withADContext_, outer$, context)
}

void ADMTabLayout_TabView_updateBackgroundDrawableWithADContext_(ADMTabLayout_TabView *self, ADContext *context) {
  if (self->this$0_->tabBackgroundResId_ != 0) {
    if (self->baseBackgroundDrawable_ != nil && [self->baseBackgroundDrawable_ isStateful]) {
      [self->baseBackgroundDrawable_ setStateWithIntArray:[self getDrawableState]];
    }
  }
  else {
    JreStrongAssign(&self->baseBackgroundDrawable_, nil);
  }
  ADDrawable *background;
  {
  }
  [self setMyAttributeWithNSString:@"background" withId:self->baseBackgroundDrawable_];
  [self->this$0_ invalidate];
}

void ADMTabLayout_TabView_updateTab(ADMTabLayout_TabView *self) {
  ADMTabLayout_Tab *tab = self->tab_;
  ADView *custom = tab != nil ? [tab getCustomView] : nil;
  if (custom != nil) {
    id<ADViewParent> customParent = [custom getParent];
    if (customParent != self) {
      if (customParent != nil) {
        [((ADViewGroup *) cast_chk(customParent, [ADViewGroup class])) removeViewWithADView:custom];
      }
      if (self->customView_ != nil) {
        id<ADViewParent> customViewParent = [self->customView_ getParent];
        if (customViewParent != nil) {
          [((ADViewGroup *) cast_chk(customViewParent, [ADViewGroup class])) removeViewWithADView:self->customView_];
        }
      }
      [self addViewWithADView:custom];
    }
    JreStrongAssign(&self->customView_, custom);
    if (self->textView_ != nil) {
      [self->textView_ setVisibilityWithInt:ADView_GONE];
    }
    if (self->iconView_ != nil) {
      [self->iconView_ setVisibilityWithInt:ADView_GONE];
      [((ADImageView *) nil_chk(self->iconView_)) setImageDrawableWithADDrawable:nil];
    }
    JreStrongAssign(&self->customTextView_, [custom findViewByIdWithInt:ASIdGenerator_getIdWithNSString_(@"@+id/text1")]);
    if (self->customTextView_ != nil) {
      self->defaultMaxLines_ = ADMTabLayout_TextViewCompat_getMaxLinesWithADTextView_(self->customTextView_);
    }
    JreStrongAssign(&self->customIconView_, [custom findViewByIdWithInt:ASIdGenerator_getIdWithNSString_(@"@+id/icon")]);
  }
  else {
    if (self->customView_ != nil) {
      [self removeViewWithADView:self->customView_];
      JreStrongAssign(&self->customView_, nil);
    }
    JreStrongAssign(&self->customTextView_, nil);
    JreStrongAssign(&self->customIconView_, nil);
  }
  if (self->customView_ == nil) {
    if (self->iconView_ == nil) {
      ADMTabLayout_TabView_inflateAndAddDefaultIconView(self);
    }
    if (self->textView_ == nil) {
      ADMTabLayout_TabView_inflateAndAddDefaultTextView(self);
      self->defaultMaxLines_ = ADMTabLayout_TextViewCompat_getMaxLinesWithADTextView_(self->textView_);
    }
    ADMTabLayout_TextViewCompat_setTextAppearanceWithADTextView_withNSString_(self->textView_, self->this$0_->defaultTabTextAppearance_);
    if ([self isSelected] && self->this$0_->selectedTabTextAppearance_ != nil) {
      ADMTabLayout_TextViewCompat_setTextAppearanceWithADTextView_withNSString_(self->textView_, self->this$0_->selectedTabTextAppearance_);
    }
    else {
      ADMTabLayout_TextViewCompat_setTextAppearanceWithADTextView_withNSString_(self->textView_, self->this$0_->tabTextAppearance_);
    }
    if (self->this$0_->tabTextColors_ != nil) {
      [((ADTextView *) nil_chk(self->textView_)) setMyAttributeWithNSString:@"textColor" withId:self->this$0_->tabTextColors_];
    }
    ADMTabLayout_TabView_updateTextAndIconWithADTextView_withADImageView_withBoolean_(self, self->textView_, self->iconView_, true);
    ADMTabLayout_TabView_tryUpdateBadgeAnchor(self);
    ADMTabLayout_TabView_addOnLayoutChangeListenerWithADView_(self, self->iconView_);
    ADMTabLayout_TabView_addOnLayoutChangeListenerWithADView_(self, self->textView_);
  }
  else {
    if (self->customTextView_ != nil || self->customIconView_ != nil) {
      ADMTabLayout_TabView_updateTextAndIconWithADTextView_withADImageView_withBoolean_(self, self->customTextView_, self->customIconView_, false);
    }
  }
}

void ADMTabLayout_TabView_update(ADMTabLayout_TabView *self) {
  ADMTabLayout_TabView_updateTab(self);
  [self setSelectedWithBoolean:self->tab_ != nil && [self->tab_ isSelected]];
}

void ADMTabLayout_TabView_inflateAndAddDefaultIconView(ADMTabLayout_TabView *self) {
  ADViewGroup *iconViewParent = JreRetainedLocalValue(self);
  JreStrongAssign(&self->iconView_, (ADImageView *) cast_chk([((ADLayoutInflater *) nil_chk(ADLayoutInflater_fromWithADContext_([self getContext]))) inflateWithNSString:@"@layout/design_layout_tab_icon_new" withADViewGroup:iconViewParent withBoolean:false], [ADImageView class]));
  [self addClickListenerWithADView:self->iconView_ withBoolean:false];
  [iconViewParent addViewWithADView:self->iconView_ withInt:0];
}

void ADMTabLayout_TabView_inflateAndAddDefaultTextView(ADMTabLayout_TabView *self) {
  ADViewGroup *textViewParent = JreRetainedLocalValue(self);
  JreStrongAssign(&self->textView_, (ADTextView *) cast_chk([((ADLayoutInflater *) nil_chk(ADLayoutInflater_fromWithADContext_([self getContext]))) inflateWithNSString:@"@layout/design_layout_tab_text_new" withADViewGroup:textViewParent withBoolean:false], [ADTextView class]));
  [self addClickListenerWithADView:self->textView_ withBoolean:false];
  [textViewParent addViewWithADView:self->textView_];
}

ADFrameLayout *ADMTabLayout_TabView_createPreApi18BadgeAnchorRoot(ADMTabLayout_TabView *self) {
  ADFrameLayout *frameLayout = create_ADFrameLayout_init();
  ADFrameLayout_LayoutParams *layoutparams = create_ADFrameLayout_LayoutParams_initWithInt_withInt_(ADViewGroup_LayoutParams_WRAP_CONTENT, ADViewGroup_LayoutParams_WRAP_CONTENT);
  [frameLayout setLayoutParamsWithADViewGroup_LayoutParams:layoutparams];
  return frameLayout;
}

ADXBadgeDrawable *ADMTabLayout_TabView_getOrCreateBadge(ADMTabLayout_TabView *self) {
  if (self->badgeDrawable_ == nil) {
    JreStrongAssign(&self->badgeDrawable_, ADXBadgeDrawable_createWithADContext_([self getContext]));
  }
  ADMTabLayout_TabView_tryUpdateBadgeAnchor(self);
  if (self->badgeDrawable_ == nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Unable to create badge");
  }
  return self->badgeDrawable_;
}

ADXBadgeDrawable *ADMTabLayout_TabView_getBadge(ADMTabLayout_TabView *self) {
  return self->badgeDrawable_;
}

void ADMTabLayout_TabView_removeBadge(ADMTabLayout_TabView *self) {
  if (self->badgeAnchorView_ != nil) {
    ADMTabLayout_TabView_tryRemoveBadgeFromAnchor(self);
  }
  JreStrongAssign(&self->badgeDrawable_, nil);
}

void ADMTabLayout_TabView_addOnLayoutChangeListenerWithADView_(ADMTabLayout_TabView *self, ADView *view) {
  if (view == nil) {
    return;
  }
  [view addOnLayoutChangeListenerWithADView_OnLayoutChangeListener:create_ADMTabLayout_TabView_2_initWithADMTabLayout_TabView_withADView_(self, view)];
}

void ADMTabLayout_TabView_tryUpdateBadgeAnchor(ADMTabLayout_TabView *self) {
  if (!ADMTabLayout_TabView_hasBadgeDrawable(self)) {
    return;
  }
  if (self->customView_ != nil) {
    ADMTabLayout_TabView_tryRemoveBadgeFromAnchor(self);
  }
  else {
    if (self->iconView_ != nil && self->tab_ != nil && [self->tab_ getIcon] != nil) {
      if (self->badgeAnchorView_ != self->iconView_) {
        ADMTabLayout_TabView_tryRemoveBadgeFromAnchor(self);
        ADMTabLayout_TabView_tryAttachBadgeToAnchorWithADView_(self, self->iconView_);
      }
      else {
        ADMTabLayout_TabView_tryUpdateBadgeDrawableBoundsWithADView_(self, self->iconView_);
      }
    }
    else if (self->textView_ != nil && self->tab_ != nil && [self->tab_ getTabLabelVisibility] == ADMTabLayout_TAB_LABEL_VISIBILITY_LABELED) {
      if (self->badgeAnchorView_ != self->textView_) {
        ADMTabLayout_TabView_tryRemoveBadgeFromAnchor(self);
        ADMTabLayout_TabView_tryAttachBadgeToAnchorWithADView_(self, self->textView_);
      }
      else {
        ADMTabLayout_TabView_tryUpdateBadgeDrawableBoundsWithADView_(self, self->textView_);
      }
    }
    else {
      ADMTabLayout_TabView_tryRemoveBadgeFromAnchor(self);
    }
  }
}

void ADMTabLayout_TabView_tryAttachBadgeToAnchorWithADView_(ADMTabLayout_TabView *self, ADView *anchorView) {
  if (!ADMTabLayout_TabView_hasBadgeDrawable(self)) {
    return;
  }
  if (anchorView != nil) {
    ADMTabLayout_TabView_clipViewToPaddingForBadgeWithBoolean_(self, false);
    ADXBadgeUtils_attachBadgeDrawableWithADXBadgeDrawable_withADView_withADFrameLayout_(self->badgeDrawable_, anchorView, ADMTabLayout_TabView_getCustomParentForBadgeWithADView_(self, anchorView));
    JreStrongAssign(&self->badgeAnchorView_, anchorView);
  }
}

void ADMTabLayout_TabView_tryRemoveBadgeFromAnchor(ADMTabLayout_TabView *self) {
  if (!ADMTabLayout_TabView_hasBadgeDrawable(self)) {
    return;
  }
  ADMTabLayout_TabView_clipViewToPaddingForBadgeWithBoolean_(self, true);
  if (self->badgeAnchorView_ != nil) {
    ADXBadgeUtils_detachBadgeDrawableWithADXBadgeDrawable_withADView_(self->badgeDrawable_, self->badgeAnchorView_);
    JreStrongAssign(&self->badgeAnchorView_, nil);
  }
}

void ADMTabLayout_TabView_clipViewToPaddingForBadgeWithBoolean_(ADMTabLayout_TabView *self, jboolean flag) {
  [self setMyAttributeWithNSString:@"clipChildren" withId:JavaLangBoolean_valueOfWithBoolean_(flag)];
  [self setClipToPaddingWithBoolean:flag];
  ADViewGroup *parent = (ADViewGroup *) cast_chk([self getParent], [ADViewGroup class]);
  if (parent != nil) {
    [parent setMyAttributeWithNSString:@"clipChildren" withId:JavaLangBoolean_valueOfWithBoolean_(flag)];
    [parent setClipToPaddingWithBoolean:flag];
  }
}

void ADMTabLayout_TabView_updateOrientation(ADMTabLayout_TabView *self) {
  [self setOrientationWithInt:self->this$0_->inlineLabel_ ? ADLinearLayout_HORIZONTAL : ADLinearLayout_VERTICAL];
  if (self->customTextView_ != nil || self->customIconView_ != nil) {
    ADMTabLayout_TabView_updateTextAndIconWithADTextView_withADImageView_withBoolean_(self, self->customTextView_, self->customIconView_, false);
  }
  else {
    ADMTabLayout_TabView_updateTextAndIconWithADTextView_withADImageView_withBoolean_(self, self->textView_, self->iconView_, true);
  }
}

void ADMTabLayout_TabView_updateTextAndIconWithADTextView_withADImageView_withBoolean_(ADMTabLayout_TabView *self, ADTextView *textView, ADImageView *iconView, jboolean addDefaultMargins) {
  ADDrawable *icon = (self->tab_ != nil && [self->tab_ getIcon] != nil) ? [((ADMTabLayout_Tab *) nil_chk(self->tab_)) getIcon] : nil;
  if (icon != nil) {
    [((ADImageView *) nil_chk(iconView)) setMyAttributeWithNSString:@"tint" withId:self->this$0_->tabIconTint_];
  }
  id<JavaLangCharSequence> text = self->tab_ != nil ? [self->tab_ getText] : nil;
  if (iconView != nil) {
    if (icon != nil) {
      [iconView setMyAttributeWithNSString:@"src" withId:icon];
      [iconView setVisibilityWithInt:ADView_VISIBLE];
      [self setVisibilityWithInt:ADView_VISIBLE];
    }
    else {
      [iconView setVisibilityWithInt:ADView_GONE];
      [iconView setImageDrawableWithADDrawable:nil];
    }
  }
  jboolean hasText = !ADTextUtils_isEmptyWithJavaLangCharSequence_(text);
  jboolean showingText;
  if (textView != nil) {
    showingText = (hasText && ((ADMTabLayout_Tab *) nil_chk(self->tab_))->labelVisibilityMode_ == ADMTabLayout_TAB_LABEL_VISIBILITY_LABELED);
    [textView setMyAttributeWithNSString:@"text" withId:hasText ? text : nil];
    [textView setVisibilityWithInt:showingText ? ADView_VISIBLE : ADView_GONE];
    if (hasText) {
      [self setVisibilityWithInt:ADView_VISIBLE];
    }
  }
  else {
    showingText = false;
  }
  if (addDefaultMargins && iconView != nil) {
    ADViewGroup_MarginLayoutParams *lp = ((ADViewGroup_MarginLayoutParams *) cast_chk([iconView getLayoutParams], [ADViewGroup_MarginLayoutParams class]));
    jint iconMargin = 0;
    if (showingText && [iconView getVisibility] == ADView_VISIBLE) {
      iconMargin = JreFpToInt(ASPluginInvoker_convertDpToPixelWithNSString_(JreStrcat("I$", ADMTabLayout_DEFAULT_GAP_TEXT_ICON, @"dp")));
    }
    if (self->this$0_->inlineLabel_) {
      if (iconMargin != ADXMarginLayoutParamsCompat_getMarginEndWithADViewGroup_MarginLayoutParams_(lp)) {
        ADXMarginLayoutParamsCompat_setMarginEndWithADViewGroup_MarginLayoutParams_withInt_(lp, iconMargin);
        ((ADViewGroup_MarginLayoutParams *) nil_chk(lp))->bottomMargin_ = 0;
        [iconView setLayoutParamsWithADViewGroup_LayoutParams:lp];
        [iconView requestLayout];
      }
    }
    else {
      if (iconMargin != ((ADViewGroup_MarginLayoutParams *) nil_chk(lp))->bottomMargin_) {
        lp->bottomMargin_ = iconMargin;
        ADXMarginLayoutParamsCompat_setMarginEndWithADViewGroup_MarginLayoutParams_withInt_(lp, 0);
        [iconView setLayoutParamsWithADViewGroup_LayoutParams:lp];
        [iconView requestLayout];
      }
    }
  }
  id<JavaLangCharSequence> contentDesc = self->tab_ != nil ? self->tab_->contentDesc_ : nil;
  {
  }
}

void ADMTabLayout_TabView_tryUpdateBadgeDrawableBoundsWithADView_(ADMTabLayout_TabView *self, ADView *anchor) {
  if (ADMTabLayout_TabView_hasBadgeDrawable(self) && anchor == self->badgeAnchorView_) {
    ADXBadgeUtils_setBadgeDrawableBoundsWithADXBadgeDrawable_withADView_withADFrameLayout_(self->badgeDrawable_, anchor, ADMTabLayout_TabView_getCustomParentForBadgeWithADView_(self, anchor));
  }
}

jboolean ADMTabLayout_TabView_hasBadgeDrawable(ADMTabLayout_TabView *self) {
  return self->badgeDrawable_ != nil;
}

ADFrameLayout *ADMTabLayout_TabView_getCustomParentForBadgeWithADView_(ADMTabLayout_TabView *self, ADView *anchor) {
  if (anchor != self->iconView_ && anchor != self->textView_) {
    return nil;
  }
  return nil;
}

jfloat ADMTabLayout_TabView_approximateLineWidthWithADMTabLayout_Layout_withInt_withFloat_(ADMTabLayout_TabView *self, ADMTabLayout_Layout *layout, jint line, jfloat textSize) {
  return [((ADMTabLayout_Layout *) nil_chk(layout)) getLineWidthWithInt:line] * (textSize / [((ADMTabLayout_Paint *) nil_chk([layout getPaint])) getTextSize]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADMTabLayout_TabView)

@implementation ADMTabLayout_TabView_1

- (instancetype)initWithADMTabLayout_TabView:(ADMTabLayout_TabView *)outer$ {
  ADMTabLayout_TabView_1_initWithADMTabLayout_TabView_(self, outer$);
  return self;
}

- (void)onClickWithADView:(ADView *)v {
  [this$0_ performClick];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADMTabLayout_TabView:);
  methods[1].selector = @selector(onClickWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADMTabLayout_TabView;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADMTabLayout_TabView;", "onClick", "LADView;", "addClickListenerWithADView:withBoolean:" };
  static const J2ObjcClassInfo _ADMTabLayout_TabView_1 = { "", "com.google.android.material.tabs", ptrTable, methods, fields, 7, 0x8010, 2, 1, 0, -1, 3, -1, -1 };
  return &_ADMTabLayout_TabView_1;
}

@end

void ADMTabLayout_TabView_1_initWithADMTabLayout_TabView_(ADMTabLayout_TabView_1 *self, ADMTabLayout_TabView *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADMTabLayout_TabView_1 *new_ADMTabLayout_TabView_1_initWithADMTabLayout_TabView_(ADMTabLayout_TabView *outer$) {
  J2OBJC_NEW_IMPL(ADMTabLayout_TabView_1, initWithADMTabLayout_TabView_, outer$)
}

ADMTabLayout_TabView_1 *create_ADMTabLayout_TabView_1_initWithADMTabLayout_TabView_(ADMTabLayout_TabView *outer$) {
  J2OBJC_CREATE_IMPL(ADMTabLayout_TabView_1, initWithADMTabLayout_TabView_, outer$)
}

@implementation ADMTabLayout_TabView_2

- (instancetype)initWithADMTabLayout_TabView:(ADMTabLayout_TabView *)outer$
                                  withADView:(ADView *)capture$0 {
  ADMTabLayout_TabView_2_initWithADMTabLayout_TabView_withADView_(self, outer$, capture$0);
  return self;
}

- (void)onLayoutChangeWithADView:(ADView *)v
                         withInt:(jint)left
                         withInt:(jint)top
                         withInt:(jint)right
                         withInt:(jint)bottom
                         withInt:(jint)oldLeft
                         withInt:(jint)oldTop
                         withInt:(jint)oldRight
                         withInt:(jint)oldBottom {
  if ([((ADView *) nil_chk(val$view_)) getVisibility] == ADView_VISIBLE) {
    ADMTabLayout_TabView_tryUpdateBadgeDrawableBoundsWithADView_(this$0_, val$view_);
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$view_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADMTabLayout_TabView:withADView:);
  methods[1].selector = @selector(onLayoutChangeWithADView:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADMTabLayout_TabView;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$view_", "LADView;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADMTabLayout_TabView;LADView;", "onLayoutChange", "LADView;IIIIIIII", "LADMTabLayout_TabView;", "addOnLayoutChangeListenerWithADView:" };
  static const J2ObjcClassInfo _ADMTabLayout_TabView_2 = { "", "com.google.android.material.tabs", ptrTable, methods, fields, 7, 0x8010, 2, 2, 3, -1, 4, -1, -1 };
  return &_ADMTabLayout_TabView_2;
}

@end

void ADMTabLayout_TabView_2_initWithADMTabLayout_TabView_withADView_(ADMTabLayout_TabView_2 *self, ADMTabLayout_TabView *outer$, ADView *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$view_, capture$0);
  NSObject_init(self);
}

ADMTabLayout_TabView_2 *new_ADMTabLayout_TabView_2_initWithADMTabLayout_TabView_withADView_(ADMTabLayout_TabView *outer$, ADView *capture$0) {
  J2OBJC_NEW_IMPL(ADMTabLayout_TabView_2, initWithADMTabLayout_TabView_withADView_, outer$, capture$0)
}

ADMTabLayout_TabView_2 *create_ADMTabLayout_TabView_2_initWithADMTabLayout_TabView_withADView_(ADMTabLayout_TabView *outer$, ADView *capture$0) {
  J2OBJC_CREATE_IMPL(ADMTabLayout_TabView_2, initWithADMTabLayout_TabView_withADView_, outer$, capture$0)
}

@implementation ADMTabLayout_SlidingTabIndicator

- (instancetype)initWithADMTabLayout:(ADMTabLayout *)outer$
                       withADContext:(ADContext *)context {
  ADMTabLayout_SlidingTabIndicator_initWithADMTabLayout_withADContext_(self, outer$, context);
  return self;
}

- (void)setSelectedIndicatorHeightWithInt:(jint)height {
  ADRect *bounds = JreRetainedLocalValue([((ADDrawable *) nil_chk(this$0_->tabSelectedIndicator_)) getBounds]);
  [((ADDrawable *) nil_chk(this$0_->tabSelectedIndicator_)) setBoundsWithInt:((ADRect *) nil_chk(bounds))->left_ withInt:0 withInt:bounds->right_ withInt:height];
  [self requestLayout];
}

- (jboolean)childrenNeedLayout {
  for (jint i = 0, z = [self getChildCount]; i < z; i++) {
    ADView *child = [self getChildAtWithInt:i];
    if ([((ADView *) nil_chk(child)) getWidth] <= 0) {
      return true;
    }
  }
  return false;
}

- (void)setIndicatorPositionFromTabPositionWithInt:(jint)position
                                         withFloat:(jfloat)positionOffset {
  this$0_->indicatorPosition_ = JavaLangMath_roundWithFloat_(position + positionOffset);
  if (indicatorAnimator_ != nil && [indicatorAnimator_ isRunning]) {
    [indicatorAnimator_ cancel];
  }
  ADView *firstTitle = [self getChildAtWithInt:position];
  ADView *nextTitle = [self getChildAtWithInt:position + 1];
  ADMTabLayout_SlidingTabIndicator_tweenIndicatorPositionWithADView_withADView_withFloat_(self, firstTitle, nextTitle, positionOffset);
}

- (void)onRtlPropertiesChangedWithInt:(jint)layoutDirection {
  [super onRtlPropertiesChangedWithInt:layoutDirection];
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  if (ADView_MeasureSpec_getModeWithInt_(widthMeasureSpec) != ADView_MeasureSpec_EXACTLY) {
    return;
  }
  if ((this$0_->tabGravity_ == ADMTabLayout_GRAVITY_CENTER) || this$0_->mode_ == ADMTabLayout_MODE_AUTO) {
    jint count = [self getChildCount];
    jint largestTabWidth = 0;
    for (jint i = 0, z = count; i < z; i++) {
      ADView *child = JreRetainedLocalValue([self getChildAtWithInt:i]);
      if ([((ADView *) nil_chk(child)) getVisibility] == ADView_VISIBLE) {
        largestTabWidth = JavaLangMath_maxWithInt_withInt_(largestTabWidth, [child getMeasuredWidth]);
      }
    }
    if (largestTabWidth <= 0) {
      return;
    }
    jint gutter = JreFpToInt(ASPluginInvoker_convertDpToPixelWithNSString_(JreStrcat("I$", ADMTabLayout_FIXED_WRAP_GUTTER_MIN, @"dp")));
    jboolean remeasure = false;
    if (largestTabWidth * count <= [self getMeasuredWidth] - gutter * 2) {
      for (jint i = 0; i < count; i++) {
        ADLinearLayout_LayoutParams *lp = (ADLinearLayout_LayoutParams *) cast_chk([((ADView *) nil_chk([self getChildAtWithInt:i])) getLayoutParams], [ADLinearLayout_LayoutParams class]);
        if (((ADLinearLayout_LayoutParams *) nil_chk(lp))->width_ != largestTabWidth || lp->weight_ != 0) {
          lp->width_ = largestTabWidth;
          lp->weight_ = 0;
          remeasure = true;
        }
      }
    }
    else {
      this$0_->tabGravity_ = ADMTabLayout_GRAVITY_FILL;
      [this$0_ updateTabViewsWithBoolean:false];
      remeasure = true;
    }
    if (remeasure) {
      [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
    }
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  if (indicatorAnimator_ != nil && [indicatorAnimator_ isRunning]) {
    ADMTabLayout_SlidingTabIndicator_updateOrRecreateIndicatorAnimationWithBoolean_withInt_withInt_(self, false, [this$0_ getSelectedTabPosition], -1);
  }
  else {
    ADMTabLayout_SlidingTabIndicator_jumpIndicatorToIndicatorPosition(self);
  }
}

- (void)jumpIndicatorToPositionWithInt:(jint)position {
  ADMTabLayout_SlidingTabIndicator_jumpIndicatorToPositionWithInt_(self, position);
}

- (void)jumpIndicatorToSelectedPosition {
  ADMTabLayout_SlidingTabIndicator_jumpIndicatorToSelectedPosition(self);
}

- (void)jumpIndicatorToIndicatorPosition {
  ADMTabLayout_SlidingTabIndicator_jumpIndicatorToIndicatorPosition(self);
}

- (void)tweenIndicatorPositionWithADView:(ADView *)startTitle
                              withADView:(ADView *)endTitle
                               withFloat:(jfloat)fraction {
  ADMTabLayout_SlidingTabIndicator_tweenIndicatorPositionWithADView_withADView_withFloat_(self, startTitle, endTitle, fraction);
}

- (void)animateIndicatorToPositionWithInt:(jint)position
                                  withInt:(jint)duration {
  if (indicatorAnimator_ != nil && [indicatorAnimator_ isRunning] && this$0_->indicatorPosition_ != position) {
    [indicatorAnimator_ cancel];
  }
  ADMTabLayout_SlidingTabIndicator_updateOrRecreateIndicatorAnimationWithBoolean_withInt_withInt_(self, true, position, duration);
}

- (void)updateOrRecreateIndicatorAnimationWithBoolean:(jboolean)recreateAnimation
                                              withInt:(jint)position
                                              withInt:(jint)duration {
  ADMTabLayout_SlidingTabIndicator_updateOrRecreateIndicatorAnimationWithBoolean_withInt_withInt_(self, recreateAnimation, position, duration);
}

- (void)onDrawWithADCanvas:(id<ADCanvas>)canvas {
  jint indicatorHeight = [((ADRect *) nil_chk([((ADDrawable *) nil_chk(this$0_->tabSelectedIndicator_)) getBounds])) height];
  if (indicatorHeight < 0) {
    indicatorHeight = [((ADDrawable *) nil_chk(this$0_->tabSelectedIndicator_)) getIntrinsicHeight];
  }
  jint indicatorTop = 0;
  jint indicatorBottom = 0;
  switch (this$0_->tabIndicatorGravity_) {
    case ADMTabLayout_INDICATOR_GRAVITY_BOTTOM:
    indicatorTop = [self getHeight] - indicatorHeight;
    indicatorBottom = [self getHeight];
    break;
    case ADMTabLayout_INDICATOR_GRAVITY_CENTER:
    indicatorTop = JreIntDiv(([self getHeight] - indicatorHeight), 2);
    indicatorBottom = JreIntDiv(([self getHeight] + indicatorHeight), 2);
    break;
    case ADMTabLayout_INDICATOR_GRAVITY_TOP:
    indicatorTop = 0;
    indicatorBottom = indicatorHeight;
    break;
    case ADMTabLayout_INDICATOR_GRAVITY_STRETCH:
    indicatorTop = 0;
    indicatorBottom = [self getHeight];
    break;
    default:
    break;
  }
  if ([((ADRect *) nil_chk([((ADDrawable *) nil_chk(this$0_->tabSelectedIndicator_)) getBounds])) width] > 0) {
    ADRect *indicatorBounds = JreRetainedLocalValue([((ADDrawable *) nil_chk(this$0_->tabSelectedIndicator_)) getBounds]);
    [((ADDrawable *) nil_chk(this$0_->tabSelectedIndicator_)) setBoundsWithInt:((ADRect *) nil_chk(indicatorBounds))->left_ withInt:indicatorTop withInt:indicatorBounds->right_ withInt:indicatorBottom];
    [((ADDrawable *) nil_chk(this$0_->tabSelectedIndicator_)) drawWithADCanvas:canvas];
  }
  [super onDrawWithADCanvas:canvas];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(indicatorAnimator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 13, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADMTabLayout:withADContext:);
  methods[1].selector = @selector(setSelectedIndicatorHeightWithInt:);
  methods[2].selector = @selector(childrenNeedLayout);
  methods[3].selector = @selector(setIndicatorPositionFromTabPositionWithInt:withFloat:);
  methods[4].selector = @selector(onRtlPropertiesChangedWithInt:);
  methods[5].selector = @selector(onMeasureWithInt:withInt:);
  methods[6].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[7].selector = @selector(jumpIndicatorToPositionWithInt:);
  methods[8].selector = @selector(jumpIndicatorToSelectedPosition);
  methods[9].selector = @selector(jumpIndicatorToIndicatorPosition);
  methods[10].selector = @selector(tweenIndicatorPositionWithADView:withADView:withFloat:);
  methods[11].selector = @selector(animateIndicatorToPositionWithInt:withInt:);
  methods[12].selector = @selector(updateOrRecreateIndicatorAnimationWithBoolean:withInt:withInt:);
  methods[13].selector = @selector(onDrawWithADCanvas:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADMTabLayout;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "indicatorAnimator_", "LADValueAnimator;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "layoutDirection_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADMTabLayout;LADContext;", "setSelectedIndicatorHeight", "I", "setIndicatorPositionFromTabPosition", "IF", "onRtlPropertiesChanged", "onMeasure", "II", "onLayout", "ZIIII", "jumpIndicatorToPosition", "tweenIndicatorPosition", "LADView;LADView;F", "animateIndicatorToPosition", "updateOrRecreateIndicatorAnimation", "ZII", "onDraw", "LADCanvas;", "LADMTabLayout;" };
  static const J2ObjcClassInfo _ADMTabLayout_SlidingTabIndicator = { "SlidingTabIndicator", "com.google.android.material.tabs", ptrTable, methods, fields, 7, 0x1, 14, 3, 18, -1, -1, -1, -1 };
  return &_ADMTabLayout_SlidingTabIndicator;
}

@end

void ADMTabLayout_SlidingTabIndicator_initWithADMTabLayout_withADContext_(ADMTabLayout_SlidingTabIndicator *self, ADMTabLayout *outer$, ADContext *context) {
  JreStrongAssign(&self->this$0_, outer$);
  ADLinearLayout_initWithADContext_(self, context);
  self->layoutDirection_ = -1;
  [self setWillNotDrawWithBoolean:false];
}

ADMTabLayout_SlidingTabIndicator *new_ADMTabLayout_SlidingTabIndicator_initWithADMTabLayout_withADContext_(ADMTabLayout *outer$, ADContext *context) {
  J2OBJC_NEW_IMPL(ADMTabLayout_SlidingTabIndicator, initWithADMTabLayout_withADContext_, outer$, context)
}

ADMTabLayout_SlidingTabIndicator *create_ADMTabLayout_SlidingTabIndicator_initWithADMTabLayout_withADContext_(ADMTabLayout *outer$, ADContext *context) {
  J2OBJC_CREATE_IMPL(ADMTabLayout_SlidingTabIndicator, initWithADMTabLayout_withADContext_, outer$, context)
}

void ADMTabLayout_SlidingTabIndicator_jumpIndicatorToPositionWithInt_(ADMTabLayout_SlidingTabIndicator *self, jint position) {
  if (self->this$0_->viewPagerScrollState_ != ADXViewPager_SCROLL_STATE_IDLE && !(((ADRect *) nil_chk([((ADDrawable *) nil_chk([self->this$0_ getTabSelectedIndicator])) getBounds]))->left_ == -1 && ((ADRect *) nil_chk([((ADDrawable *) nil_chk([self->this$0_ getTabSelectedIndicator])) getBounds]))->right_ == -1)) {
    return;
  }
  ADView *currentView = [self getChildAtWithInt:position];
  [((ADMTabIndicatorInterpolator *) nil_chk(self->this$0_->tabIndicatorInterpolator_)) setIndicatorBoundsForTabWithADMTabLayout:self->this$0_ withADView:currentView withADDrawable:self->this$0_->tabSelectedIndicator_];
  self->this$0_->indicatorPosition_ = position;
}

void ADMTabLayout_SlidingTabIndicator_jumpIndicatorToSelectedPosition(ADMTabLayout_SlidingTabIndicator *self) {
  ADMTabLayout_SlidingTabIndicator_jumpIndicatorToPositionWithInt_(self, [self->this$0_ getSelectedTabPosition]);
}

void ADMTabLayout_SlidingTabIndicator_jumpIndicatorToIndicatorPosition(ADMTabLayout_SlidingTabIndicator *self) {
  if (self->this$0_->indicatorPosition_ == -1) {
    self->this$0_->indicatorPosition_ = [self->this$0_ getSelectedTabPosition];
  }
  ADMTabLayout_SlidingTabIndicator_jumpIndicatorToPositionWithInt_(self, self->this$0_->indicatorPosition_);
}

void ADMTabLayout_SlidingTabIndicator_tweenIndicatorPositionWithADView_withADView_withFloat_(ADMTabLayout_SlidingTabIndicator *self, ADView *startTitle, ADView *endTitle, jfloat fraction) {
  jboolean hasVisibleTitle = startTitle != nil && [startTitle getWidth] > 0;
  if (hasVisibleTitle) {
    [((ADMTabIndicatorInterpolator *) nil_chk(self->this$0_->tabIndicatorInterpolator_)) updateIndicatorForOffsetWithADMTabLayout:self->this$0_ withADView:startTitle withADView:endTitle withFloat:fraction withADDrawable:self->this$0_->tabSelectedIndicator_];
  }
  else {
    [((ADDrawable *) nil_chk(self->this$0_->tabSelectedIndicator_)) setBoundsWithInt:-1 withInt:((ADRect *) nil_chk([self->this$0_->tabSelectedIndicator_ getBounds]))->top_ withInt:-1 withInt:((ADRect *) nil_chk([((ADDrawable *) nil_chk(self->this$0_->tabSelectedIndicator_)) getBounds]))->bottom_];
  }
}

void ADMTabLayout_SlidingTabIndicator_updateOrRecreateIndicatorAnimationWithBoolean_withInt_withInt_(ADMTabLayout_SlidingTabIndicator *self, jboolean recreateAnimation, jint position, jint duration) {
  if (self->this$0_->indicatorPosition_ == position) {
    return;
  }
  ADView *currentView = [self getChildAtWithInt:[self->this$0_ getSelectedTabPosition]];
  ADView *targetView = [self getChildAtWithInt:position];
  if (targetView == nil) {
    ADMTabLayout_SlidingTabIndicator_jumpIndicatorToSelectedPosition(self);
    return;
  }
  self->this$0_->indicatorPosition_ = position;
  id<ADValueAnimator_AnimatorUpdateListener> updateListener = create_ADMTabLayout_SlidingTabIndicator_1_initWithADMTabLayout_SlidingTabIndicator_withADView_withADView_(self, currentView, targetView);
  if (recreateAnimation) {
    ADValueAnimator *animator = JreStrongAssignAndConsume(&self->indicatorAnimator_, new_ADValueAnimator_init());
    [animator setInterpolatorWithADTimeInterpolator:self->this$0_->tabIndicatorTimeInterpolator_];
    [animator setDurationWithLong:duration];
    [animator setFloatValuesWithFloatArray:[IOSFloatArray arrayWithFloats:(jfloat[]){ 0.0f, 1.0f } count:2]];
    [animator addUpdateListenerWithADValueAnimator_AnimatorUpdateListener:updateListener];
    [animator start];
  }
  else {
    [((ADValueAnimator *) nil_chk(self->indicatorAnimator_)) removeAllUpdateListeners];
    [((ADValueAnimator *) nil_chk(self->indicatorAnimator_)) addUpdateListenerWithADValueAnimator_AnimatorUpdateListener:updateListener];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADMTabLayout_SlidingTabIndicator)

@implementation ADMTabLayout_SlidingTabIndicator_1

- (instancetype)initWithADMTabLayout_SlidingTabIndicator:(ADMTabLayout_SlidingTabIndicator *)outer$
                                              withADView:(ADView *)capture$0
                                              withADView:(ADView *)capture$1 {
  ADMTabLayout_SlidingTabIndicator_1_initWithADMTabLayout_SlidingTabIndicator_withADView_withADView_(self, outer$, capture$0, capture$1);
  return self;
}

- (void)onAnimationUpdateWithADValueAnimator:(ADValueAnimator *)valueAnimator {
  ADMTabLayout_SlidingTabIndicator_tweenIndicatorPositionWithADView_withADView_withFloat_(this$0_, val$currentView_, val$targetView_, [((ADValueAnimator *) nil_chk(valueAnimator)) getAnimatedFraction]);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$currentView_);
  RELEASE_(val$targetView_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADMTabLayout_SlidingTabIndicator:withADView:withADView:);
  methods[1].selector = @selector(onAnimationUpdateWithADValueAnimator:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADMTabLayout_SlidingTabIndicator;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$currentView_", "LADView;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$targetView_", "LADView;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADMTabLayout_SlidingTabIndicator;LADView;LADView;", "onAnimationUpdate", "LADValueAnimator;", "LADMTabLayout_SlidingTabIndicator;", "updateOrRecreateIndicatorAnimationWithBoolean:withInt:withInt:" };
  static const J2ObjcClassInfo _ADMTabLayout_SlidingTabIndicator_1 = { "", "com.google.android.material.tabs", ptrTable, methods, fields, 7, 0x8010, 2, 3, 3, -1, 4, -1, -1 };
  return &_ADMTabLayout_SlidingTabIndicator_1;
}

@end

void ADMTabLayout_SlidingTabIndicator_1_initWithADMTabLayout_SlidingTabIndicator_withADView_withADView_(ADMTabLayout_SlidingTabIndicator_1 *self, ADMTabLayout_SlidingTabIndicator *outer$, ADView *capture$0, ADView *capture$1) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$currentView_, capture$0);
  JreStrongAssign(&self->val$targetView_, capture$1);
  NSObject_init(self);
}

ADMTabLayout_SlidingTabIndicator_1 *new_ADMTabLayout_SlidingTabIndicator_1_initWithADMTabLayout_SlidingTabIndicator_withADView_withADView_(ADMTabLayout_SlidingTabIndicator *outer$, ADView *capture$0, ADView *capture$1) {
  J2OBJC_NEW_IMPL(ADMTabLayout_SlidingTabIndicator_1, initWithADMTabLayout_SlidingTabIndicator_withADView_withADView_, outer$, capture$0, capture$1)
}

ADMTabLayout_SlidingTabIndicator_1 *create_ADMTabLayout_SlidingTabIndicator_1_initWithADMTabLayout_SlidingTabIndicator_withADView_withADView_(ADMTabLayout_SlidingTabIndicator *outer$, ADView *capture$0, ADView *capture$1) {
  J2OBJC_CREATE_IMPL(ADMTabLayout_SlidingTabIndicator_1, initWithADMTabLayout_SlidingTabIndicator_withADView_withADView_, outer$, capture$0, capture$1)
}

@implementation ADMTabLayout_TabLayoutOnPageChangeListener

- (instancetype)initWithADMTabLayout:(ADMTabLayout *)tabLayout {
  ADMTabLayout_TabLayoutOnPageChangeListener_initWithADMTabLayout_(self, tabLayout);
  return self;
}

- (void)onPageScrollStateChangedWithInt:(jint)state {
  previousScrollState_ = scrollState_;
  scrollState_ = state;
  ADMTabLayout *tabLayout = JreRetainedLocalValue([((JavaLangRefWeakReference *) nil_chk(tabLayoutRef_)) get]);
  if (tabLayout != nil) {
    [tabLayout updateViewPagerScrollStateWithInt:scrollState_];
  }
}

- (void)onPageScrolledWithInt:(jint)position
                    withFloat:(jfloat)positionOffset
                      withInt:(jint)positionOffsetPixels {
  ADMTabLayout *tabLayout = [((JavaLangRefWeakReference *) nil_chk(tabLayoutRef_)) get];
  if (tabLayout != nil) {
    jboolean updateSelectedTabView = scrollState_ != ADXViewPager_SCROLL_STATE_SETTLING || previousScrollState_ == ADXViewPager_SCROLL_STATE_DRAGGING;
    jboolean updateIndicator = !(scrollState_ == ADXViewPager_SCROLL_STATE_SETTLING && previousScrollState_ == ADXViewPager_SCROLL_STATE_IDLE);
    [tabLayout setScrollPositionWithInt:position withFloat:positionOffset withBoolean:updateSelectedTabView withBoolean:updateIndicator withBoolean:false];
  }
}

- (void)onPageSelectedWithInt:(jint)position {
  ADMTabLayout *tabLayout = [((JavaLangRefWeakReference *) nil_chk(tabLayoutRef_)) get];
  if (tabLayout != nil && [tabLayout getSelectedTabPosition] != position && position < [tabLayout getTabCount]) {
    jboolean updateIndicator = scrollState_ == ADXViewPager_SCROLL_STATE_IDLE || (scrollState_ == ADXViewPager_SCROLL_STATE_SETTLING && previousScrollState_ == ADXViewPager_SCROLL_STATE_IDLE);
    [tabLayout selectTabWithADMTabLayout_Tab:[tabLayout getTabAtWithInt:position] withBoolean:updateIndicator];
  }
}

- (void)reset {
  previousScrollState_ = scrollState_ = ADXViewPager_SCROLL_STATE_IDLE;
}

- (void)dealloc {
  RELEASE_(tabLayoutRef_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADMTabLayout:);
  methods[1].selector = @selector(onPageScrollStateChangedWithInt:);
  methods[2].selector = @selector(onPageScrolledWithInt:withFloat:withInt:);
  methods[3].selector = @selector(onPageSelectedWithInt:);
  methods[4].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tabLayoutRef_", "LJavaLangRefWeakReference;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
    { "previousScrollState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "scrollState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADMTabLayout;", "onPageScrollStateChanged", "I", "onPageScrolled", "IFI", "onPageSelected", "Ljava/lang/ref/WeakReference<Lcom/google/android/material/tabs/TabLayout;>;" };
  static const J2ObjcClassInfo _ADMTabLayout_TabLayoutOnPageChangeListener = { "TabLayoutOnPageChangeListener", "com.google.android.material.tabs", ptrTable, methods, fields, 7, 0x9, 5, 3, 0, -1, -1, -1, -1 };
  return &_ADMTabLayout_TabLayoutOnPageChangeListener;
}

@end

void ADMTabLayout_TabLayoutOnPageChangeListener_initWithADMTabLayout_(ADMTabLayout_TabLayoutOnPageChangeListener *self, ADMTabLayout *tabLayout) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->tabLayoutRef_, new_JavaLangRefWeakReference_initWithId_(tabLayout));
}

ADMTabLayout_TabLayoutOnPageChangeListener *new_ADMTabLayout_TabLayoutOnPageChangeListener_initWithADMTabLayout_(ADMTabLayout *tabLayout) {
  J2OBJC_NEW_IMPL(ADMTabLayout_TabLayoutOnPageChangeListener, initWithADMTabLayout_, tabLayout)
}

ADMTabLayout_TabLayoutOnPageChangeListener *create_ADMTabLayout_TabLayoutOnPageChangeListener_initWithADMTabLayout_(ADMTabLayout *tabLayout) {
  J2OBJC_CREATE_IMPL(ADMTabLayout_TabLayoutOnPageChangeListener, initWithADMTabLayout_, tabLayout)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADMTabLayout_TabLayoutOnPageChangeListener)

@implementation ADMTabLayout_ViewPagerOnTabSelectedListener

- (instancetype)initWithADXViewPager:(ADXViewPager *)viewPager {
  ADMTabLayout_ViewPagerOnTabSelectedListener_initWithADXViewPager_(self, viewPager);
  return self;
}

- (void)onTabSelectedWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab {
  [((ADXViewPager *) nil_chk(viewPager_)) setCurrentItemWithInt:[((ADMTabLayout_Tab *) nil_chk(tab)) getPosition]];
}

- (void)onTabUnselectedWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab {
}

- (void)onTabReselectedWithADMTabLayout_Tab:(ADMTabLayout_Tab *)tab {
}

- (void)dealloc {
  RELEASE_(viewPager_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXViewPager:);
  methods[1].selector = @selector(onTabSelectedWithADMTabLayout_Tab:);
  methods[2].selector = @selector(onTabUnselectedWithADMTabLayout_Tab:);
  methods[3].selector = @selector(onTabReselectedWithADMTabLayout_Tab:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "viewPager_", "LADXViewPager;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXViewPager;", "onTabSelected", "LADMTabLayout_Tab;", "onTabUnselected", "onTabReselected", "LADMTabLayout;" };
  static const J2ObjcClassInfo _ADMTabLayout_ViewPagerOnTabSelectedListener = { "ViewPagerOnTabSelectedListener", "com.google.android.material.tabs", ptrTable, methods, fields, 7, 0x9, 4, 1, 5, -1, -1, -1, -1 };
  return &_ADMTabLayout_ViewPagerOnTabSelectedListener;
}

@end

void ADMTabLayout_ViewPagerOnTabSelectedListener_initWithADXViewPager_(ADMTabLayout_ViewPagerOnTabSelectedListener *self, ADXViewPager *viewPager) {
  NSObject_init(self);
  JreStrongAssign(&self->viewPager_, viewPager);
}

ADMTabLayout_ViewPagerOnTabSelectedListener *new_ADMTabLayout_ViewPagerOnTabSelectedListener_initWithADXViewPager_(ADXViewPager *viewPager) {
  J2OBJC_NEW_IMPL(ADMTabLayout_ViewPagerOnTabSelectedListener, initWithADXViewPager_, viewPager)
}

ADMTabLayout_ViewPagerOnTabSelectedListener *create_ADMTabLayout_ViewPagerOnTabSelectedListener_initWithADXViewPager_(ADXViewPager *viewPager) {
  J2OBJC_CREATE_IMPL(ADMTabLayout_ViewPagerOnTabSelectedListener, initWithADXViewPager_, viewPager)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADMTabLayout_ViewPagerOnTabSelectedListener)

@implementation ADMTabLayout_PagerAdapterObserver

- (instancetype)initWithADMTabLayout:(ADMTabLayout *)outer$ {
  ADMTabLayout_PagerAdapterObserver_initWithADMTabLayout_(self, outer$);
  return self;
}

- (void)onChanged {
  [this$0_ populateFromPagerAdapter];
}

- (void)onInvalidated {
  [this$0_ populateFromPagerAdapter];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADMTabLayout:);
  methods[1].selector = @selector(onChanged);
  methods[2].selector = @selector(onInvalidated);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADMTabLayout;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADMTabLayout;" };
  static const J2ObjcClassInfo _ADMTabLayout_PagerAdapterObserver = { "PagerAdapterObserver", "com.google.android.material.tabs", ptrTable, methods, fields, 7, 0x2, 3, 1, 0, -1, -1, -1, -1 };
  return &_ADMTabLayout_PagerAdapterObserver;
}

@end

void ADMTabLayout_PagerAdapterObserver_initWithADMTabLayout_(ADMTabLayout_PagerAdapterObserver *self, ADMTabLayout *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  ADDataSetObserver_init(self);
}

ADMTabLayout_PagerAdapterObserver *new_ADMTabLayout_PagerAdapterObserver_initWithADMTabLayout_(ADMTabLayout *outer$) {
  J2OBJC_NEW_IMPL(ADMTabLayout_PagerAdapterObserver, initWithADMTabLayout_, outer$)
}

ADMTabLayout_PagerAdapterObserver *create_ADMTabLayout_PagerAdapterObserver_initWithADMTabLayout_(ADMTabLayout *outer$) {
  J2OBJC_CREATE_IMPL(ADMTabLayout_PagerAdapterObserver, initWithADMTabLayout_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADMTabLayout_PagerAdapterObserver)

@implementation ADMTabLayout_AdapterChangeListener

- (instancetype)initWithADMTabLayout:(ADMTabLayout *)outer$ {
  ADMTabLayout_AdapterChangeListener_initWithADMTabLayout_(self, outer$);
  return self;
}

- (void)onAdapterChangedWithADXViewPager:(ADXViewPager *)viewPager
                     withADXPagerAdapter:(ADXPagerAdapter *)oldAdapter
                     withADXPagerAdapter:(ADXPagerAdapter *)newAdapter {
  if (this$0_->viewPager_ == viewPager) {
    [this$0_ setPagerAdapterWithADXPagerAdapter:newAdapter withBoolean:autoRefresh_];
  }
}

- (void)setAutoRefreshWithBoolean:(jboolean)autoRefresh {
  self->autoRefresh_ = autoRefresh;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADMTabLayout:);
  methods[1].selector = @selector(onAdapterChangedWithADXViewPager:withADXPagerAdapter:withADXPagerAdapter:);
  methods[2].selector = @selector(setAutoRefreshWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADMTabLayout;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "autoRefresh_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADMTabLayout;", "onAdapterChanged", "LADXViewPager;LADXPagerAdapter;LADXPagerAdapter;", "setAutoRefresh", "Z" };
  static const J2ObjcClassInfo _ADMTabLayout_AdapterChangeListener = { "AdapterChangeListener", "com.google.android.material.tabs", ptrTable, methods, fields, 7, 0x2, 3, 2, 0, -1, -1, -1, -1 };
  return &_ADMTabLayout_AdapterChangeListener;
}

@end

void ADMTabLayout_AdapterChangeListener_initWithADMTabLayout_(ADMTabLayout_AdapterChangeListener *self, ADMTabLayout *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADMTabLayout_AdapterChangeListener *new_ADMTabLayout_AdapterChangeListener_initWithADMTabLayout_(ADMTabLayout *outer$) {
  J2OBJC_NEW_IMPL(ADMTabLayout_AdapterChangeListener, initWithADMTabLayout_, outer$)
}

ADMTabLayout_AdapterChangeListener *create_ADMTabLayout_AdapterChangeListener_initWithADMTabLayout_(ADMTabLayout *outer$) {
  J2OBJC_CREATE_IMPL(ADMTabLayout_AdapterChangeListener, initWithADMTabLayout_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADMTabLayout_AdapterChangeListener)

@implementation ADMTabLayout_TextViewCompat

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADMTabLayout_TextViewCompat_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)getMaxLinesWithADTextView:(ADTextView *)textView {
  return ADMTabLayout_TextViewCompat_getMaxLinesWithADTextView_(textView);
}

+ (void)setTextAppearanceWithADTextView:(ADTextView *)textView
                           withNSString:(NSString *)textAppearance {
  ADMTabLayout_TextViewCompat_setTextAppearanceWithADTextView_withNSString_(textView, textAppearance);
}

+ (jint)getLineCountWithADTextView:(ADTextView *)textView {
  return ADMTabLayout_TextViewCompat_getLineCountWithADTextView_(textView);
}

+ (jint)getTextSizeWithADTextView:(ADTextView *)textView {
  return ADMTabLayout_TextViewCompat_getTextSizeWithADTextView_(textView);
}

+ (ADMTabLayout_Layout *)getLayoutWithADTextView:(ADTextView *)textView {
  return ADMTabLayout_TextViewCompat_getLayoutWithADTextView_(textView);
}

+ (void)setTextSizeWithADTextView:(ADTextView *)textView
                        withFloat:(jfloat)textSize {
  ADMTabLayout_TextViewCompat_setTextSizeWithADTextView_withFloat_(textView, textSize);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 4, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 5, 1, -1, -1, -1, -1 },
    { NULL, "LADMTabLayout_Layout;", 0x9, 6, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMaxLinesWithADTextView:);
  methods[2].selector = @selector(setTextAppearanceWithADTextView:withNSString:);
  methods[3].selector = @selector(getLineCountWithADTextView:);
  methods[4].selector = @selector(getTextSizeWithADTextView:);
  methods[5].selector = @selector(getLayoutWithADTextView:);
  methods[6].selector = @selector(setTextSizeWithADTextView:withFloat:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getMaxLines", "LADTextView;", "setTextAppearance", "LADTextView;LNSString;", "getLineCount", "getTextSize", "getLayout", "setTextSize", "LADTextView;F", "LADMTabLayout;" };
  static const J2ObjcClassInfo _ADMTabLayout_TextViewCompat = { "TextViewCompat", "com.google.android.material.tabs", ptrTable, methods, NULL, 7, 0x8, 7, 0, 9, -1, -1, -1, -1 };
  return &_ADMTabLayout_TextViewCompat;
}

@end

void ADMTabLayout_TextViewCompat_init(ADMTabLayout_TextViewCompat *self) {
  NSObject_init(self);
}

ADMTabLayout_TextViewCompat *new_ADMTabLayout_TextViewCompat_init() {
  J2OBJC_NEW_IMPL(ADMTabLayout_TextViewCompat, init)
}

ADMTabLayout_TextViewCompat *create_ADMTabLayout_TextViewCompat_init() {
  J2OBJC_CREATE_IMPL(ADMTabLayout_TextViewCompat, init)
}

jint ADMTabLayout_TextViewCompat_getMaxLinesWithADTextView_(ADTextView *textView) {
  ADMTabLayout_TextViewCompat_initialize();
  return 0;
}

void ADMTabLayout_TextViewCompat_setTextAppearanceWithADTextView_withNSString_(ADTextView *textView, NSString *textAppearance) {
  ADMTabLayout_TextViewCompat_initialize();
  if (textAppearance != nil) {
    [((ADTextView *) nil_chk(textView)) setMyAttributeWithNSString:@"textAppearance" withId:textAppearance];
  }
}

jint ADMTabLayout_TextViewCompat_getLineCountWithADTextView_(ADTextView *textView) {
  ADMTabLayout_TextViewCompat_initialize();
  return 1;
}

jint ADMTabLayout_TextViewCompat_getTextSizeWithADTextView_(ADTextView *textView) {
  ADMTabLayout_TextViewCompat_initialize();
  return 1;
}

ADMTabLayout_Layout *ADMTabLayout_TextViewCompat_getLayoutWithADTextView_(ADTextView *textView) {
  ADMTabLayout_TextViewCompat_initialize();
  return nil;
}

void ADMTabLayout_TextViewCompat_setTextSizeWithADTextView_withFloat_(ADTextView *textView, jfloat textSize) {
  ADMTabLayout_TextViewCompat_initialize();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADMTabLayout_TextViewCompat)

@implementation ADMTabLayout_Paint

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADMTabLayout_Paint_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jfloat)getTextSize {
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getTextSize);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADMTabLayout;" };
  static const J2ObjcClassInfo _ADMTabLayout_Paint = { "Paint", "com.google.android.material.tabs", ptrTable, methods, NULL, 7, 0x8, 2, 0, 0, -1, -1, -1, -1 };
  return &_ADMTabLayout_Paint;
}

@end

void ADMTabLayout_Paint_init(ADMTabLayout_Paint *self) {
  NSObject_init(self);
}

ADMTabLayout_Paint *new_ADMTabLayout_Paint_init() {
  J2OBJC_NEW_IMPL(ADMTabLayout_Paint, init)
}

ADMTabLayout_Paint *create_ADMTabLayout_Paint_init() {
  J2OBJC_CREATE_IMPL(ADMTabLayout_Paint, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADMTabLayout_Paint)

@implementation ADMTabLayout_Layout

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADMTabLayout_Layout_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getLineWidthWithInt:(jint)line {
  return 0;
}

- (ADMTabLayout_Paint *)getPaint {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LADMTabLayout_Paint;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getLineWidthWithInt:);
  methods[2].selector = @selector(getPaint);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getLineWidth", "I", "LADMTabLayout;" };
  static const J2ObjcClassInfo _ADMTabLayout_Layout = { "Layout", "com.google.android.material.tabs", ptrTable, methods, NULL, 7, 0x8, 3, 0, 2, -1, -1, -1, -1 };
  return &_ADMTabLayout_Layout;
}

@end

void ADMTabLayout_Layout_init(ADMTabLayout_Layout *self) {
  NSObject_init(self);
}

ADMTabLayout_Layout *new_ADMTabLayout_Layout_init() {
  J2OBJC_NEW_IMPL(ADMTabLayout_Layout, init)
}

ADMTabLayout_Layout *create_ADMTabLayout_Layout_init() {
  J2OBJC_CREATE_IMPL(ADMTabLayout_Layout, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADMTabLayout_Layout)
