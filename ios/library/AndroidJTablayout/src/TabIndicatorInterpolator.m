//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\AndroidJTablayout\src\main\java\com\google\android\material\tabs\TabIndicatorInterpolator.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "Drawable.h"
#include "J2ObjC_source.h"
#include "MaterialAnimationUtils.h"
#include "PluginInvoker.h"
#include "Rect.h"
#include "RectF.h"
#include "TabIndicatorInterpolator.h"
#include "TabLayout.h"
#include "View.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"




#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


inline int32_t ADMTabIndicatorInterpolator_get_MIN_INDICATOR_WIDTH(void);
#define ADMTabIndicatorInterpolator_MIN_INDICATOR_WIDTH 24
J2OBJC_STATIC_FIELD_CONSTANT(ADMTabIndicatorInterpolator, MIN_INDICATOR_WIDTH, int32_t)

@implementation ADMTabIndicatorInterpolator

- (instancetype)initPackagePrivate {
  ADMTabIndicatorInterpolator_initPackagePrivate(self);
  return self;
}

+ (ADRectF *)calculateTabViewContentBoundsWithADMTabLayout_TabView:(ADMTabLayout_TabView *)tabView
                                                           withInt:(int32_t)minWidth {
  return ADMTabIndicatorInterpolator_calculateTabViewContentBoundsWithADMTabLayout_TabView_withInt_(tabView, minWidth);
}

+ (ADRectF *)calculateIndicatorWidthForTabWithADMTabLayout:(ADMTabLayout *)tabLayout
                                                withADView:(ADView *)tab {
  return ADMTabIndicatorInterpolator_calculateIndicatorWidthForTabWithADMTabLayout_withADView_(tabLayout, tab);
}

- (void)setIndicatorBoundsForTabWithADMTabLayout:(ADMTabLayout *)tabLayout
                                      withADView:(ADView *)tab
                                  withADDrawable:(ADDrawable *)indicator {
  ADRectF *startIndicator = ADMTabIndicatorInterpolator_calculateIndicatorWidthForTabWithADMTabLayout_withADView_(tabLayout, tab);
  [((ADDrawable *) nil_chk(indicator)) setBoundsWithInt:JreFpToInt(((ADRectF *) nil_chk(startIndicator))->left_) withInt:((ADRect *) nil_chk([indicator getBounds]))->top_ withInt:JreFpToInt(startIndicator->right_) withInt:((ADRect *) nil_chk([indicator getBounds]))->bottom_];
}

- (void)updateIndicatorForOffsetWithADMTabLayout:(ADMTabLayout *)tabLayout
                                      withADView:(ADView *)startTitle
                                      withADView:(ADView *)endTitle
                                       withFloat:(float)offset
                                  withADDrawable:(ADDrawable *)indicator {
  ADRectF *startIndicator = ADMTabIndicatorInterpolator_calculateIndicatorWidthForTabWithADMTabLayout_withADView_(tabLayout, startTitle);
  ADRectF *endIndicator = ADMTabIndicatorInterpolator_calculateIndicatorWidthForTabWithADMTabLayout_withADView_(tabLayout, endTitle);
  [((ADDrawable *) nil_chk(indicator)) setBoundsWithInt:ADXMaterialAnimationUtils_lerpWithInt_withInt_withFloat_(JreFpToInt(((ADRectF *) nil_chk(startIndicator))->left_), JreFpToInt(((ADRectF *) nil_chk(endIndicator))->left_), offset) withInt:((ADRect *) nil_chk([indicator getBounds]))->top_ withInt:ADXMaterialAnimationUtils_lerpWithInt_withInt_withFloat_(JreFpToInt(startIndicator->right_), JreFpToInt(endIndicator->right_), offset) withInt:((ADRect *) nil_chk([indicator getBounds]))->bottom_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADRectF;", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "LADRectF;", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(calculateTabViewContentBoundsWithADMTabLayout_TabView:withInt:);
  methods[2].selector = @selector(calculateIndicatorWidthForTabWithADMTabLayout:withADView:);
  methods[3].selector = @selector(setIndicatorBoundsForTabWithADMTabLayout:withADView:withADDrawable:);
  methods[4].selector = @selector(updateIndicatorForOffsetWithADMTabLayout:withADView:withADView:withFloat:withADDrawable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MIN_INDICATOR_WIDTH", "I", .constantValue.asInt = ADMTabIndicatorInterpolator_MIN_INDICATOR_WIDTH, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "calculateTabViewContentBounds", "LADMTabLayout_TabView;I", "calculateIndicatorWidthForTab", "LADMTabLayout;LADView;", "setIndicatorBoundsForTab", "LADMTabLayout;LADView;LADDrawable;", "updateIndicatorForOffset", "LADMTabLayout;LADView;LADView;FLADDrawable;" };
  static const J2ObjcClassInfo _ADMTabIndicatorInterpolator = { "TabIndicatorInterpolator", "com.google.android.material.tabs", ptrTable, methods, fields, 7, 0x0, 5, 1, -1, -1, -1, -1, -1 };
  return &_ADMTabIndicatorInterpolator;
}

@end

void ADMTabIndicatorInterpolator_initPackagePrivate(ADMTabIndicatorInterpolator *self) {
  NSObject_init(self);
}

ADMTabIndicatorInterpolator *new_ADMTabIndicatorInterpolator_initPackagePrivate() {
  J2OBJC_NEW_IMPL(ADMTabIndicatorInterpolator, initPackagePrivate)
}

ADMTabIndicatorInterpolator *create_ADMTabIndicatorInterpolator_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(ADMTabIndicatorInterpolator, initPackagePrivate)
}

ADRectF *ADMTabIndicatorInterpolator_calculateTabViewContentBoundsWithADMTabLayout_TabView_withInt_(ADMTabLayout_TabView *tabView, int32_t minWidth) {
  ADMTabIndicatorInterpolator_initialize();
  int32_t tabViewContentWidth = [((ADMTabLayout_TabView *) nil_chk(tabView)) getContentWidth];
  int32_t tabViewContentHeight = [tabView getContentHeight];
  int32_t minWidthPx = JreFpToInt(ASPluginInvoker_convertDpToPixelWithNSString_(JreStrcat("I$", minWidth, @"dp")));
  if (tabViewContentWidth < minWidthPx) {
    tabViewContentWidth = minWidthPx;
  }
  int32_t tabViewCenterX = JreIntDiv(([tabView getLeft] + [tabView getRight]), 2);
  int32_t tabViewCenterY = JreIntDiv(([tabView getTop] + [tabView getBottom]), 2);
  int32_t contentLeftBounds = tabViewCenterX - (JreIntDiv(tabViewContentWidth, 2));
  int32_t contentTopBounds = tabViewCenterY - (JreIntDiv(tabViewContentHeight, 2));
  int32_t contentRightBounds = tabViewCenterX + (JreIntDiv(tabViewContentWidth, 2));
  int32_t contentBottomBounds = tabViewCenterY + (JreIntDiv(tabViewCenterX, 2));
  return create_ADRectF_initWithFloat_withFloat_withFloat_withFloat_(contentLeftBounds, contentTopBounds, contentRightBounds, contentBottomBounds);
}

ADRectF *ADMTabIndicatorInterpolator_calculateIndicatorWidthForTabWithADMTabLayout_withADView_(ADMTabLayout *tabLayout, ADView *tab) {
  ADMTabIndicatorInterpolator_initialize();
  if (tab == nil) {
    return create_ADRectF_init();
  }
  if (![((ADMTabLayout *) nil_chk(tabLayout)) isTabIndicatorFullWidth] && [tab isKindOfClass:[ADMTabLayout_TabView class]]) {
    return ADMTabIndicatorInterpolator_calculateTabViewContentBoundsWithADMTabLayout_TabView_withInt_((ADMTabLayout_TabView *) cast_chk(tab, [ADMTabLayout_TabView class]), ADMTabIndicatorInterpolator_MIN_INDICATOR_WIDTH);
  }
  return create_ADRectF_initWithFloat_withFloat_withFloat_withFloat_([tab getLeft], [tab getTop], [tab getRight], [tab getBottom]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADMTabIndicatorInterpolator)
