//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\AndroidJTablayout\src\main\java\com\google\android\material\tabs\ElasticTabIndicatorInterpolator.java
//

#include "Drawable.h"
#include "ElasticTabIndicatorInterpolator.h"
#include "J2ObjC_source.h"
#include "MaterialAnimationUtils.h"
#include "Rect.h"
#include "RectF.h"
#include "TabIndicatorInterpolator.h"
#include "TabLayout.h"
#include "View.h"
#include "java/lang/Math.h"


@interface ADMElasticTabIndicatorInterpolator ()

+ (jfloat)decInterpWithFloat:(jfloat)fraction;

+ (jfloat)accInterpWithFloat:(jfloat)fraction;

@end

__attribute__((unused)) static jfloat ADMElasticTabIndicatorInterpolator_decInterpWithFloat_(jfloat fraction);

__attribute__((unused)) static jfloat ADMElasticTabIndicatorInterpolator_accInterpWithFloat_(jfloat fraction);

@implementation ADMElasticTabIndicatorInterpolator

- (instancetype)initPackagePrivate {
  ADMElasticTabIndicatorInterpolator_initPackagePrivate(self);
  return self;
}

+ (jfloat)decInterpWithFloat:(jfloat)fraction {
  return ADMElasticTabIndicatorInterpolator_decInterpWithFloat_(fraction);
}

+ (jfloat)accInterpWithFloat:(jfloat)fraction {
  return ADMElasticTabIndicatorInterpolator_accInterpWithFloat_(fraction);
}

- (void)updateIndicatorForOffsetWithADMTabLayout:(ADMTabLayout *)tabLayout
                                      withADView:(ADView *)startTitle
                                      withADView:(ADView *)endTitle
                                       withFloat:(jfloat)offset
                                  withADDrawable:(ADDrawable *)indicator {
  ADRectF *startIndicator = ADMTabIndicatorInterpolator_calculateIndicatorWidthForTabWithADMTabLayout_withADView_(tabLayout, startTitle);
  ADRectF *endIndicator = ADMTabIndicatorInterpolator_calculateIndicatorWidthForTabWithADMTabLayout_withADView_(tabLayout, endTitle);
  jfloat leftFraction;
  jfloat rightFraction;
  jboolean isMovingRight = ((ADRectF *) nil_chk(startIndicator))->left_ < ((ADRectF *) nil_chk(endIndicator))->left_;
  if (isMovingRight) {
    leftFraction = ADMElasticTabIndicatorInterpolator_accInterpWithFloat_(offset);
    rightFraction = ADMElasticTabIndicatorInterpolator_decInterpWithFloat_(offset);
  }
  else {
    leftFraction = ADMElasticTabIndicatorInterpolator_decInterpWithFloat_(offset);
    rightFraction = ADMElasticTabIndicatorInterpolator_accInterpWithFloat_(offset);
  }
  [((ADDrawable *) nil_chk(indicator)) setBoundsWithInt:ADXMaterialAnimationUtils_lerpWithInt_withInt_withFloat_(JreFpToInt(startIndicator->left_), JreFpToInt(endIndicator->left_), leftFraction) withInt:((ADRect *) nil_chk([indicator getBounds]))->top_ withInt:ADXMaterialAnimationUtils_lerpWithInt_withInt_withFloat_(JreFpToInt(startIndicator->right_), JreFpToInt(endIndicator->right_), rightFraction) withInt:((ADRect *) nil_chk([indicator getBounds]))->bottom_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "F", 0xa, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(decInterpWithFloat:);
  methods[2].selector = @selector(accInterpWithFloat:);
  methods[3].selector = @selector(updateIndicatorForOffsetWithADMTabLayout:withADView:withADView:withFloat:withADDrawable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "decInterp", "F", "accInterp", "updateIndicatorForOffset", "LADMTabLayout;LADView;LADView;FLADDrawable;" };
  static const J2ObjcClassInfo _ADMElasticTabIndicatorInterpolator = { "ElasticTabIndicatorInterpolator", "com.google.android.material.tabs", ptrTable, methods, NULL, 7, 0x0, 4, 0, -1, -1, -1, -1, -1 };
  return &_ADMElasticTabIndicatorInterpolator;
}

@end

void ADMElasticTabIndicatorInterpolator_initPackagePrivate(ADMElasticTabIndicatorInterpolator *self) {
  ADMTabIndicatorInterpolator_initPackagePrivate(self);
}

ADMElasticTabIndicatorInterpolator *new_ADMElasticTabIndicatorInterpolator_initPackagePrivate() {
  J2OBJC_NEW_IMPL(ADMElasticTabIndicatorInterpolator, initPackagePrivate)
}

ADMElasticTabIndicatorInterpolator *create_ADMElasticTabIndicatorInterpolator_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(ADMElasticTabIndicatorInterpolator, initPackagePrivate)
}

jfloat ADMElasticTabIndicatorInterpolator_decInterpWithFloat_(jfloat fraction) {
  ADMElasticTabIndicatorInterpolator_initialize();
  return (jfloat) JavaLangMath_sinWithDouble_((fraction * JavaLangMath_PI) / 2.0);
}

jfloat ADMElasticTabIndicatorInterpolator_accInterpWithFloat_(jfloat fraction) {
  ADMElasticTabIndicatorInterpolator_initialize();
  return (jfloat) (1.0 - JavaLangMath_cosWithDouble_((fraction * JavaLangMath_PI) / 2.0));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADMElasticTabIndicatorInterpolator)
